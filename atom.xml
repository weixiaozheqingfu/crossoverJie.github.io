<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crossoverJie&#39;s Blog</title>
  <subtitle>会crossover的程序猿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://crossoverJie.github.io/"/>
  <updated>2016-10-18T05:45:20.000Z</updated>
  <id>http://crossoverJie.github.io/</id>
  
  <author>
    <name>crossoverJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSM(六)跨域传输</title>
    <link href="http://crossoverJie.github.io/2016/10/18/SSM6/"/>
    <id>http://crossoverJie.github.io/2016/10/18/SSM6/</id>
    <published>2016-10-18T05:44:54.000Z</published>
    <updated>2016-10-18T05:45:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20161017231007221" alt="logo"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知大家在平时的开发过程中有没有遇到过跨域访问资源的问题，我不巧在上周就碰到一个这样的问题，幸运的是在公司前端同学的帮忙下解决了该问题。</p>
<h2 id="什么是跨域问题？"><a href="#什么是跨域问题？" class="headerlink" title="什么是跨域问题？"></a>什么是跨域问题？</h2><ol>
<li>只要协议、域名、端口有任何一个不同，都被当作是不同的域</li>
<li>只要是在不同域中是无法进行通信的。</li>
</ol>
<a id="more"></a>
<p>基于以上的的出发点，我们又有跨域共享资源的需求(<code>譬如现在流行的前后端分离之后分别部署的情况</code>)，本文所采用的解决办法是<code>JSONP</code>，说到<code>JSONP</code>就会首先想到<code>JSON</code>。虽然只有一字之差但意义却完全不一样，首先科普一下<code>JSON</code>。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote>
<p>其实现在<code>JSON</code>已经是相当流行了，只要涉及到前后端的数据交互大都都是采用的JSON(不管是web还是android和IOS)，所以我这里就举一个例子，就算是没有用过的同学也能很快明白其中的意思。</p>
</blockquote>
<h2 id="PostMan"><a href="#PostMan" class="headerlink" title="PostMan"></a>PostMan</h2><p>首先给大家安利一款后端开发的利器<code>PostMan</code>,可以用于模拟几乎所有的<code>HTTP</code>请求，在开发阶段调试后端接口非常有用。<br>这是一个Chrome插件，可以直接在google商店搜索直接下载(当然前提你懂得)。<br>之后界面就如下：<br><img src="http://img.blog.csdn.net/20161018003136470" alt="2">。<br>界面非常简洁，有点开发经验的童鞋应该都会使用，不太会用的直接google下就可以了比较简单。<br>接着我们就可以利用<code>PostMan</code>来发起一次请求获取<code>JSON</code>了。这里以我<code>SSM</code>项目为例,也正好有暴露一个JSON的接口。地址如下:<br><a href="http://www.crossoverjie.top/SSM/content_load" target="_blank" rel="external">http://www.crossoverjie.top/SSM/content_load</a>。<br>直接在<code>POSTMAN</code>中的地址栏输入该地址，采用<code>GET</code>的方式请求，之后所返回的就是JSON格式的字符串。<br>由于<code>Javascript</code>原生的就支持JSON，所以解析起来非常方便。</p>
<h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>好了，终于可以谈谈<code>JSONP</code>了。之前说道<code>JSONP</code>是用来解决跨域问题的，那么他是如何解决的呢。<br>经过我们开发界的前辈们发现，HTML中拥有<code>SRC</code>属性的标签都不受跨域的影响，比如：<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;</code>标签。<br>由于JS原生支持JSON的解析，于是我们采用<code>&lt;script&gt;</code>的方式来处理跨域解析，代码如下一看就明白。<br>web端:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        $(document).ready(function()&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                type: "get",</div><div class="line">                async: false,</div><div class="line">                url: "http://www.crossoverjie.top/SSM/jsonpInfo?callback=getUser&amp;userId=3",</div><div class="line">                dataType: "jsonp",</div><div class="line">                jsonp: "callback",//一般默认为:callback</div><div class="line">                jsonpCallback:"getUser",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</div><div class="line">                success: function(json)&#123;</div><div class="line">                    /**</div><div class="line">                     * 获得服务器返回的信息。</div><div class="line">                     * 可以做具体的业务处理。</div><div class="line">                     */</div><div class="line">                    alert('用户信息：ID： ' + json.userId + ' ，姓名： ' + json.username + '。');</div><div class="line">                &#125;,</div><div class="line">                error: function()&#123;</div><div class="line">                    alert('fail');</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">oncontextmenu</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中我们采用了JQuery给我封装好的函数，这样就可以自动帮我们解析了。<br>首先我们来看下代码中的<a href="http://www.crossoverjie.top/SSM/jsonpInfo?callback=getUser&amp;userId=3" target="_blank" rel="external">http://www.crossoverjie.top/SSM/jsonpInfo?callback=getUser&amp;userId=3</a>这个地址返回的是什么内容，还是放到<code>POSTMAN</code>中执行如下：<br><img src="http://img.blog.csdn.net/20161018005211291" alt="3">。<br>可以看到我们所传递的<code>callback</code>参数带着查询的数据又原封不动的返回给我们了，这样的话即使我们不使用<code>JQuery</code>给我封装好的函数，我们自定义一个和<code>callback</code>名称一样的函数一样是可以解析其中的数据的，只是<code>Jquery</code>帮我们做了而已。</p>
<p>前端没问题了，那么后端又是如何实现的呢？也很简单，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/jsonpInfo"</span>,method = &#123; RequestMethod.GET &#125;)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">jsonpInfo</span><span class="params">(String callback,Integer userId)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    User user = userService.getUserById(userId);</div><div class="line">    JSONPObject jsonpObject = <span class="keyword">new</span> JSONPObject(callback,user) ;</div><div class="line">    <span class="keyword">return</span> jsonpObject ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后端采用了<code>jackson</code>中的<code>JSONPObject</code>这个类的一个构造方法，只需要将<code>callback</code>字段和需要转成<code>JSON</code>字符串的对象放进去即可。<br>需要主要的是需要使用<code>@ResponseBody</code>注解才能成功返回。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实网上还有其他的方法来处理跨域问题，不过我觉得这样的方式最为简单。同样JSONP也是有缺点的，比如：只支持<code>GET</code>方式的HTTP请求。<br>以上代码依然在博主的<a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">SSM</a>项目中，如有需要可以直接<code>FORK</code>。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161017231007221&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;不知大家在平时的开发过程中有没有遇到过跨域访问资源的问题，我不巧在上周就碰到一个这样的问题，幸运的是在公司前端同学的帮忙下解决了该问题。&lt;/p&gt;
&lt;h2 id=&quot;什么是跨域问题？&quot;&gt;&lt;a href=&quot;#什么是跨域问题？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域问题？&quot;&gt;&lt;/a&gt;什么是跨域问题？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;只要协议、域名、端口有任何一个不同，都被当作是不同的域&lt;/li&gt;
&lt;li&gt;只要是在不同域中是无法进行通信的。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="JSONP" scheme="http://crossoverJie.github.io/tags/JSONP/"/>
    
      <category term="JSON" scheme="http://crossoverJie.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Linux（二）服务器运行环境配置</title>
    <link href="http://crossoverJie.github.io/2016/09/20/Linux-normal2/"/>
    <id>http://crossoverJie.github.io/2016/09/20/Linux-normal2/</id>
    <published>2016-09-20T11:45:17.000Z</published>
    <updated>2016-09-21T14:35:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160919233102914" alt="logo"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux相信对大多数程序员来说都不陌生，毕竟在服务器端依然还是霸主地位而且丝毫没有退居二线的意思，以至于现在几乎每一个软件开发的相关人员都得或多或少的知道一些Linux的相关内容，本文将介绍如何在刚拿到一台云服务器(采用<code>centos</code>)来进行运行环境的搭建，包括<code>JDK</code>、<code>Mysql</code>、<code>Tomcat</code>以及<code>nginx</code>。相信对于小白来说很有必要的，也是我个人的一个记录。</p>
<blockquote>
<p>该服务器的用途是用于部署JavaEE项目。<br>部署之后的效果图如下:<br><img src="http://img.blog.csdn.net/20160919234003891" alt="1"><br><a id="more"></a></p>
</blockquote>
<h1 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h1><p>由于我们之后需要部署的是<code>JavaEE</code>项目，所以首先第一步就是安装JDK了。</p>
<h2 id="卸载自带的openJDK"><a href="#卸载自带的openJDK" class="headerlink" title="卸载自带的openJDK"></a>卸载自带的openJDK</h2><p>现在的服务器拿来之后一般都是默认给我们安装一个<code>openJDK</code>，首先我们需要卸载掉。</p>
<ol>
<li>使用<code>rpm -qa | grep java</code>命令查看系统中是否存在有Java。</li>
<li>使用<code>rpm -e --nodeps 相关应用名称</code>来进行卸载。(相关应用名称就是上一个命令中显示出来的名称复制到这里卸载即可)。</li>
</ol>
<h2 id="下载并安装JDK"><a href="#下载并安装JDK" class="headerlink" title="下载并安装JDK"></a>下载并安装JDK</h2><ol>
<li>之后是下载<code>ORACLE</code>所提供的JDK，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">传送门</a>根据自己系统的情况下载对应版本即可。笔者使用的是<code>jdk-8u101-linux-x64.rpm</code>版本。</li>
<li>然后使用FTP工具上传到<code>/usr/java</code>目录下即可，没有<code>java</code>目录新建一个即可。</li>
<li>然后使用<code>rpm -ivh jdk-8u101-linux-x64.rpm</code>命令进行解压安装。</li>
</ol>
<h2 id="profile文件配置"><a href="#profile文件配置" class="headerlink" title="profile文件配置"></a>profile文件配置</h2><p>安装完成之后使用<code>vi /etc/profile</code>命令编辑<code>profile</code>文件(注意该文件路径是指根目录下的etc文件夹不要找错了)。<br>在该文件中加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/java/jdk-8u101-linux-x64</div><div class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure></p>
<p>保存之后运行<code>source /etc/profile</code>使配置生效。</p>
<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>之后我们使用在<code>windows</code>平台也有的命令<code>java -version</code>，如果输出如图：<br><img src="http://img.blog.csdn.net/20160920000008974" alt="2"><br>表示安装成功。</p>
<h1 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h1><h2 id="卸载自带的Mysql"><a href="#卸载自带的Mysql" class="headerlink" title="卸载自带的Mysql"></a>卸载自带的Mysql</h2><p>首先第一步还是要卸载掉自带的mysql。<br><code>rpm -e --nodeps mysql</code>命令和之前一样只是把应用名称换成mysql了而已。</p>
<h2 id="使用yum来安装mysql"><a href="#使用yum来安装mysql" class="headerlink" title="使用yum来安装mysql"></a>使用<code>yum</code>来安装mysql</h2><p>之后我们采用<code>yum</code>来安装mysql。这样的方式最简单便捷。<br><code>yum install -y mysql-server mysql mysql-deve</code>执行该命令直到出现<code>Complete!</code>提示之后表示安装成功。<br><code>rpm -qi mysql-server</code>之后使用该命令可以查看我们安装的mysql信息。</p>
<h2 id="mysql相关配置"><a href="#mysql相关配置" class="headerlink" title="mysql相关配置"></a>mysql相关配置</h2><p>使用<code>service mysqld start</code>来启动mysql服务(第一次会输出很多信息)，之后就不会了。<br>然后我们可以使用<code>chkconfig mysqld on</code>命令将mysql设置为开机启动。<br>输入<code>chkconfig --list | grep mysql</code>命令显示如下图：<br><img src="http://img.blog.csdn.net/20160920120817031" alt="3"><br>表示设置成功。<br>使用<code>mysqladmin -u root password &#39;root&#39;</code>为<code>root</code>账户设置密码。</p>
<h2 id="设置远程使用"><a href="#设置远程使用" class="headerlink" title="设置远程使用"></a>设置远程使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option;</div><div class="line"># root是用户名，%代表任意主机，&apos;123456&apos;指定的登录密码（这个和本地的root密码可以设置不同的，互不影响）</div><div class="line">flush privileges; # 重载系统权限</div><div class="line">exit;</div></pre></td></tr></table></figure>
<h2 id="验证使用"><a href="#验证使用" class="headerlink" title="验证使用"></a>验证使用</h2><p>使用<code>mysql -u root -proot</code>来登录mysql。如果出现以下界面表示设置成功。<br><img src="http://img.blog.csdn.net/20160920121542492" alt="4"></p>
<h1 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h1><p><code>Tomcat</code>也是我们运行<code>JavaEE</code>项目必备的一个中间件。</p>
<ol>
<li>第一步需要下载linux的Tomcat，<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">传送门</a>。根据自己系统版本进行下载即可。之后将<code>apache-tomcat-8.5.5.tar.gz</code>上传到<code>/usr/local</code>目录中。</li>
<li>解压该压缩包<code>tar -zxv -f apache-tomcat-8.5.5.tar.gz</code>,再使用<code>mv apache-tomcat-8.5.5  tomcat</code>将解压的Tomcat移动到外层的<code>Tomcat</code>目录中。</li>
<li>进入<code>/usr/local/tomcat/apache-tomcat-8.5.5/bin</code>目录使用<code>./startup.bat</code>命令启动tomcat。</li>
<li>因为tomcat使用的默认端口是<code>8080</code>，linux防火墙默认是不能访问的，需要手动将其打开。使用<code>vi + /etc/sysconfig/iptables</code>编辑<code>iptables</code>(注意etc目录是根目录下的)，加入以下代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</div><div class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里我们开放了8080和80端口，之后安装nginx就不用在开放了。</p>
<blockquote>
<p>ps:这里用到了简单的vim命令。按<code>i</code>进入插入模式，输入上面两段代码。之后按<code>esc</code>退出插入模式。再按<code>:wq</code>保存关闭即可。<br>之后使用<code>service iptables restart</code>命令重启防火墙即可。在浏览器输入服务器的<code>ip+8080</code>如果出现Tomcat的欢迎页即表明<code>Tomcat</code>安装成功。</p>
</blockquote>
<h1 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h1><p>最后是安装<code>nginx</code>，这里我们还是使用最简单的<code>yum</code>的方式来进行安装。</p>
<ul>
<li><p>首先使用以下几个命令安装必备的几个库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y install pcre*</div><div class="line">yum -y install openssl*</div><div class="line">yum -y install gcc</div></pre></td></tr></table></figure>
</li>
<li><p>之后安装nginx。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/</div><div class="line">wget http://nginx.org/download/nginx-1.4.2.tar.gz</div><div class="line">tar -zxvf nginx-1.4.2.tar.gz</div><div class="line">cd nginx-1.4.2  </div><div class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>之后就可以使用<code>/usr/local/nginx/sbin/nginx</code>命令来启动nginx了。输入服务器的IP地址，如果出现nginx的欢迎界面表示安装成功了。</li>
</ul>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>这里我就简单贴以下我的配置，主要就是配置一个<code>upstream,</code>之后在<code>server</code>中引用配置的那个<code>upstream</code>即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line">    upstream crossover_main &#123;</div><div class="line">        server 127.0.0.1:8080;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  www.crossoverjie.top;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location  / &#123;</div><div class="line">             proxy_pass http://crossover_main/examples/;</div><div class="line">             proxy_set_header Host $http_host;</div><div class="line">             proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line">             index  index.jsp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">        # concurs with nginx&apos;s one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl                  on;</div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_protocols  SSLv2 SSLv3 TLSv1;</div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后我们在地址栏输入服务器的IP地址(如果有域名解析了服务器的IP可以直接输入域名)就会进入我们在<code>upstream</code>中配置的地址加上在<code>server</code>中的地址。根据我这里的配置最后解析地址就是<code>http://127.0.0.1:8080/examples</code>应该是很好理解的。最终的结果是我在片头放的那张截图一样。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一个简单的基于centOS的运行环境配置，对于小白练手应该是够了，有不清楚和错误的地方欢迎指出反正我也不会回复。<br><img src="http://i.imgur.com/wQmHabT.gif" alt="4"></p>
<blockquote>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160919233102914&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Linux相信对大多数程序员来说都不陌生，毕竟在服务器端依然还是霸主地位而且丝毫没有退居二线的意思，以至于现在几乎每一个软件开发的相关人员都得或多或少的知道一些Linux的相关内容，本文将介绍如何在刚拿到一台云服务器(采用&lt;code&gt;centos&lt;/code&gt;)来进行运行环境的搭建，包括&lt;code&gt;JDK&lt;/code&gt;、&lt;code&gt;Mysql&lt;/code&gt;、&lt;code&gt;Tomcat&lt;/code&gt;以及&lt;code&gt;nginx&lt;/code&gt;。相信对于小白来说很有必要的，也是我个人的一个记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该服务器的用途是用于部署JavaEE项目。&lt;br&gt;部署之后的效果图如下:&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160919234003891&quot; alt=&quot;1&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://crossoverJie.github.io/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://crossoverJie.github.io/tags/Linux/"/>
    
      <category term="centos" scheme="http://crossoverJie.github.io/tags/centos/"/>
    
      <category term="nginx" scheme="http://crossoverJie.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>SSM(五)基于webSocket的聊天室</title>
    <link href="http://crossoverJie.github.io/2016/09/04/SSM5/"/>
    <id>http://crossoverJie.github.io/2016/09/04/SSM5/</id>
    <published>2016-09-04T13:20:17.000Z</published>
    <updated>2016-09-04T16:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160901003737732" alt="o"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知大家在平时的需求中有没有遇到需要实时处理信息的情况，如站内信，订阅，聊天之类的。在这之前我们通常想到的方法一般都是采用轮训的方式每隔一定的时间向服务器发送请求从而获得最新的数据，但这样会浪费掉很多的资源并且也不是实时的，于是随着<code>HTML5</code>的推出带来了<code>websocket</code>可以根本的解决以上问题实现真正的实时传输。</p>
<h2 id="websocket是什么？"><a href="#websocket是什么？" class="headerlink" title="websocket是什么？"></a>websocket是什么？</h2><p>至于<code>websocket</code>是什么、有什么用这样的问题一Google一大把，这里我就简要的说些<code>websocket</code>再本次实例中的作用吧。<br>由于在本次实例中需要实现的是一个聊天室，一个实时的聊天室。如下图：<br><img src="http://i.imgur.com/6of3Z5K.gif" alt="1.gif"><br><a id="more"></a><br>采用<code>websocket</code>之后可以让前端和和后端像C/S模式一样实时通信，不再需要每次单独发送请求。由于是基于H5的所以对于老的浏览器如IE7、IE8之类的就没办法了，不过H5是大势所趋这点不用担心。</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>既然推出了<code>websocket</code>，作为现在主流的Java肯定也有相应的支持，所以在<code>JavaEE7</code>之后也对<code>websocket</code>做出了规范，所以本次的代码理论上是要运行在<code>Java1.7</code>+和<code>Tomcat7.0+</code>之上的。<br>看过我前面几篇文章的朋友应该都知道本次实例也是运行在之前的<a href="https://github.com/crossoverjie/ssm" target="_blank" rel="external">SSM</a>之上的，所以这里就不再赘述了。<br>首先第一步需要加入<code>websocket</code>的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.websocket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.websocket-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上就是使用<code>websocket</code>所需要用到的包。<code>spring-websocket</code>这个主要是在之后需要在<code>websocket</code>的后端注入<code>service</code>所需要的。<br>之后再看一下后端的核心代码<code>MyWebSocket.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.controller;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/8/7.</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.ContentService;</div><div class="line"><span class="keyword">import</span> org.apache.camel.BeanInject;</div><div class="line"><span class="keyword">import</span> org.apache.camel.EndpointInject;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.support.SpringBeanAutowiringSupport;</div><div class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.SpringConfigurator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnClose;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnError;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</div><div class="line"><span class="keyword">import</span> javax.websocket.Session;</div><div class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</div><div class="line"></div><div class="line"><span class="comment">//该注解用来指定一个URI，客户端可以通过这个URI来连接到WebSocket。</span></div><div class="line"><span class="comment">/**</span></div><div class="line">  类似Servlet的注解mapping。无需在web.xml中配置。</div><div class="line"> * configurator = SpringConfigurator.class是为了使该类可以通过Spring注入。</div><div class="line"> */</div><div class="line"><span class="meta">@ServerEndpoint</span>(value = <span class="string">"/websocket"</span>,configurator = SpringConfigurator.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocket</span> </span>&#123;</div><div class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyWebSocket</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentService contentService ;</div><div class="line"></div><div class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></div><div class="line">    <span class="comment">// 若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;MyWebSocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;MyWebSocket&gt;();</div><div class="line"></div><div class="line">    <span class="comment">//与客户端的连接会话，需要通过它来给客户端发送数据</span></div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 连接建立成功调用的方法</div><div class="line">     * <span class="doctag">@param</span> session  可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据</div><div class="line">     */</div><div class="line">    <span class="meta">@OnOpen</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.session = session;</div><div class="line">        webSocketSet.add(<span class="keyword">this</span>);     <span class="comment">//加入set中</span></div><div class="line">        addOnlineCount();           <span class="comment">//在线数加1</span></div><div class="line">        System.out.println(<span class="string">"有新连接加入！当前在线人数为"</span> + getOnlineCount());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 连接关闭调用的方法</div><div class="line">     */</div><div class="line">    <span class="meta">@OnClose</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</div><div class="line">        webSocketSet.remove(<span class="keyword">this</span>);  <span class="comment">//从set中删除</span></div><div class="line">        subOnlineCount();           <span class="comment">//在线数减1</span></div><div class="line">        System.out.println(<span class="string">"有一连接关闭！当前在线人数为"</span> + getOnlineCount());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 收到客户端消息后调用的方法</div><div class="line">     * <span class="doctag">@param</span> message 客户端发送过来的消息</div><div class="line">     * <span class="doctag">@param</span> session 可选的参数</div><div class="line">     */</div><div class="line">    <span class="meta">@OnMessage</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"来自客户端的消息:"</span> + message);</div><div class="line">        <span class="comment">//群发消息</span></div><div class="line">        <span class="keyword">for</span>(MyWebSocket item: webSocketSet)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                item.sendMessage(message);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发生错误时调用</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@param</span> error</div><div class="line">     */</div><div class="line">    <span class="meta">@OnError</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"发生错误"</span>);</div><div class="line">        error.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这个方法与上面几个方法不一样。没有用注解，是根据自己需要添加的方法。</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        <span class="comment">//保存数据到数据库</span></div><div class="line">        Content content = <span class="keyword">new</span> Content() ;</div><div class="line">        content.setContent(message);</div><div class="line">        SimpleDateFormat sm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:dd"</span>) ;</div><div class="line">        content.setCreateDate(sm.format(<span class="keyword">new</span> Date()));</div><div class="line">        contentService.insertSelective(content) ;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</div><div class="line">        <span class="comment">//this.session.getAsyncRemote().sendText(message);</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> onlineCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        MyWebSocket.onlineCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        MyWebSocket.onlineCount--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是整个<code>websocket</code>的后端代码。看起来也比较简单主要就是使用那几个注解。每当有一个客户端连入、关闭、发送消息都会调用各自注解的方法。这里我讲一下<code>sendMessage()</code>这个方法。</p>
<h2 id="websocket绕坑"><a href="#websocket绕坑" class="headerlink" title="websocket绕坑"></a>websocket绕坑</h2><p>在<code>sendMessage()</code>方法中我只想实现一个简单的功能，就是将每次的聊天记录都存到数据库中。看似一个简单的功能硬是花了我半天的时间。<br>我先是按照以前的惯性思维只需要在这个类中注入<code>service</code>即可。但是无论怎么弄每次都注入不进来都是<code>null</code>。<br>最后没办法只有google了，最后终于在神级社区<code>StackOverFlow</code>中找到了答案，就是前边所说的需要添加的第二个    <code>maven</code>依赖，然后加入<code>@ServerEndpoint(value = &quot;/websocket&quot;,configurator = SpringConfigurator.class)</code>这个注解即可利用<code>Spring</code>注入了。接着就可以做消息的保存了。</p>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>前端我采用了Bootstrap做的，不太清楚Bootstrap的童鞋建议先看下<a href="http://www.bootcss.com/" target="_blank" rel="external">官方文档</a>也比较简单。还是先贴一下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">    <span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></div><div class="line">    <span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//" + <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" + <span class="attr">request.getServerPort</span>() + <span class="attr">path</span> + "/";</div><div class="line">%&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></div><div class="line">          <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">    &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/ueditor/ueditor.config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/ueditor/ueditor.all.min.js"</span>&gt;</span><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--建议手动加在语言，避免在ie下有时因为加载语言失败导致编辑器加载失败--&gt;</span></div><div class="line">    <span class="comment">&lt;!--这里加载的语言文件会覆盖你在配置项目里添加的语言类型，比如你在配置项目里配置的是英文，这里加载的中文，那最后就是中文--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/ueditor/lang/zh-cn/zh-cn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data</span>=<span class="string">"/ssm"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>关闭连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span></div><div class="line">                    在线人数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"onlineCount"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>人</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"editor"</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">style</span>=<span class="string">"width:1024px;height:200px;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sendMsg();"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">    var ue = UE.getEditor('editor');</div><div class="line">    var websocket = null;</div><div class="line"></div><div class="line">    //判断当前浏览器是否支持WebSocket</div><div class="line">    if ('WebSocket' in window) &#123;</div><div class="line">        websocket = new WebSocket("ws://192.168.0.102:8080/ssm/websocket");</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        alert("对不起！你的浏览器不支持webSocket")</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //连接发生错误的回调方法</div><div class="line">    websocket.onerror = function () &#123;</div><div class="line">        setMessageInnerHTML("error");</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //连接成功建立的回调方法</div><div class="line">    websocket.onopen = function (event) &#123;</div><div class="line">        setMessageInnerHTML("加入连接");</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //接收到消息的回调方法</div><div class="line">    websocket.onmessage = function (event) &#123;</div><div class="line">        setMessageInnerHTML(event.data);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //连接关闭的回调方法</div><div class="line">    websocket.onclose = function () &#123;</div><div class="line">        setMessageInnerHTML("断开连接");</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，</div><div class="line">    // 防止连接还没断开就关闭窗口，server端会抛异常。</div><div class="line">    window.onbeforeunload = function () &#123;</div><div class="line">        var is = confirm("确定关闭窗口？");</div><div class="line">        if (is)&#123;</div><div class="line">            websocket.close();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //将消息显示在网页上</div><div class="line">    function setMessageInnerHTML(innerHTML) &#123;</div><div class="line">        $("#msg").append(innerHTML+"<span class="tag">&lt;<span class="name">br</span>/&gt;</span>")</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //关闭连接</div><div class="line">    function closeWebSocket() &#123;</div><div class="line">        websocket.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //发送消息</div><div class="line">    function send() &#123;</div><div class="line">        var message = $("#text").val() ;</div><div class="line">        websocket.send(message);</div><div class="line">        $("#text").val("") ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function sendMsg()&#123;</div><div class="line">        var msg = ue.getContent();</div><div class="line">        websocket.send(msg);</div><div class="line">        ue.setContent('');</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/js/Globals.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/js/websocket.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其实其中重要的就是那几个JS方法，都写有注释。需要注意的是这里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断当前浏览器是否支持WebSocket</span></div><div class="line"><span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</div><div class="line">    websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://192.168.0.102:8080/ssm/websocket"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"对不起！你的浏览器不支持webSocket"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当项目跑起来之后需要将这里的地址改为你项目的地址即可。<br>哦对了，我在这里采用了百度的一个<code>Ueditor</code>的富文本编辑器(虽然百度搜索我现在很少用了，但是这个编辑器确实还不错)，这个编辑器也比较简单只需要个性化的配置一下个人的需求即可。</p>
<h2 id="Ueditor相关配置"><a href="#Ueditor相关配置" class="headerlink" title="Ueditor相关配置"></a>Ueditor相关配置</h2><p>直接使用我项目运行的童鞋就不需要重新下载了，我将资源放在了webapp目录下的ueditor文件夹下面的。<br>值得注意的是我们首先需要将<code>jsp--&gt;lib</code>下的jar包加入到项目中。加好之后会出现一个想下的箭头表示已经引入成功。<br><img src="http://i.imgur.com/ZtHInpF.png" alt="">，之后修改该目录下的<code>config.json</code>文件，主要修改以下内容即可：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"imageAllowFiles": [".png", ".jpg", ".jpeg", ".gif", ".bmp"], /* 上传图片格式显示 */</div><div class="line">"imageCompressEnable": true, /* 是否压缩图片,默认是true */</div><div class="line">"imageCompressBorder": 1600, /* 图片压缩最长边限制 */</div><div class="line">"imageInsertAlign": "none", /* 插入的图片浮动方式 */</div><div class="line">"imageUrlPrefix": "http://192.168.0.102:8080/ssm", /* 图片访问路径前缀 */</div><div class="line">"imagePathFormat": "/ueditor/jsp/upload/image/&#123;yyyy&#125;&#123;mm&#125;&#123;dd&#125;/&#123;time&#125;&#123;rand:6&#125;",</div></pre></td></tr></table></figure></p>
<p>这里主要是要修改<code>imageUrlPrefix</code>为你自己的项目地址就可以了。<code>ueditor</code>一个我认为很不错的就是他支持图片、多图、截图上传，而且都不需要手动编写后端接口，所有上传的文件、图片都会保存到项目发布出去的<code>jsp--&gt;upload</code>文件夹下一看就明白了。更多关于<code>ueditor</code>的配置可以查看<a href="http://ueditor.baidu.com/website/" target="_blank" rel="external">官网</a>。</p>
<blockquote>
<p>其中值得注意一点的是，由于项目采用了<code>Spring MVC</code>并拦截了所有的请求，导致静态资源不能访问，如果是需要用到上传<code>txt</code>文件之类的需求可以参照<code>web.xml</code>中修改，如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.txt<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样就可以访问txt文件了，如果还需要上传PPT之类的就以此类推。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样一个简单的基于<code>websocket</code>的聊天室就算完成了，感兴趣的朋友可以将项目部署到外网服务器上这样好基友之间就可以愉快的聊(zhuang)天(bi)了。<br>当然这只是一个简单的项目，感兴趣的朋友再这基础之上加入实时在线人数，用户名和IP之类的。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。<br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160901003737732&quot; alt=&quot;o&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;不知大家在平时的需求中有没有遇到需要实时处理信息的情况，如站内信，订阅，聊天之类的。在这之前我们通常想到的方法一般都是采用轮训的方式每隔一定的时间向服务器发送请求从而获得最新的数据，但这样会浪费掉很多的资源并且也不是实时的，于是随着&lt;code&gt;HTML5&lt;/code&gt;的推出带来了&lt;code&gt;websocket&lt;/code&gt;可以根本的解决以上问题实现真正的实时传输。&lt;/p&gt;
&lt;h2 id=&quot;websocket是什么？&quot;&gt;&lt;a href=&quot;#websocket是什么？&quot; class=&quot;headerlink&quot; title=&quot;websocket是什么？&quot;&gt;&lt;/a&gt;websocket是什么？&lt;/h2&gt;&lt;p&gt;至于&lt;code&gt;websocket&lt;/code&gt;是什么、有什么用这样的问题一Google一大把，这里我就简要的说些&lt;code&gt;websocket&lt;/code&gt;再本次实例中的作用吧。&lt;br&gt;由于在本次实例中需要实现的是一个聊天室，一个实时的聊天室。如下图：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/6of3Z5K.gif&quot; alt=&quot;1.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="websocket" scheme="http://crossoverJie.github.io/tags/websocket/"/>
    
      <category term="HTML5" scheme="http://crossoverJie.github.io/tags/HTML5/"/>
    
      <category term="ueditor" scheme="http://crossoverJie.github.io/tags/ueditor/"/>
    
  </entry>
  
  <entry>
    <title>SSM(四)WebService入门详解</title>
    <link href="http://crossoverJie.github.io/2016/08/02/SSM4/"/>
    <id>http://crossoverJie.github.io/2016/08/02/SSM4/</id>
    <published>2016-08-02T09:28:00.000Z</published>
    <updated>2016-08-02T13:40:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160802154107534" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>webservice这个不知道大家首次接触的时候是怎么理解的，反正我记得我当时第一次接触这个东西的时候以为又是一个XX框架，觉得还挺高大上。然而这一切在之后我使用过后才发现这些全都是YY。<br>那么webservice到底是什么呢，根据我自己的理解：简单来说就像是一个公开的接口，其他系统不管你是用什么语言来编写的都可以调用这个接口，并可以返回相应的数据给你。就像是现在很多的天气应用，他们肯定不会自己去搞一个气象局之类的部门去监测天气，大多都是直接调用一个天气接口，然后返回天气数据，相关应用就可以将这些信息展示给用户了。<br>通常来说发布这类接口的应用都是用一两种语言来编写即可，但是调用这个接口应用可能会是各种语言来编写的，为了满足这样的需求webservice出现了。</p>
<blockquote>
<p>简单来说webservice就是为了满足以上需求而定义出来的规范。</p>
</blockquote>
<hr>
<h1 id="Spring整合CXF"><a href="#Spring整合CXF" class="headerlink" title="Spring整合CXF"></a>Spring整合CXF</h1><p>在Java中实现webservice有多种方法，java本身在jdk1.7之后也对webservice有了默认的实现，但是在我们实际开发中一般还是会使用框架来，比如这里所提到的CXF就有着广泛的应用。<br>废话我就不多说了，直接讲Spring整合CXF，毕竟现在的JavaEE开发是离不开Spring了。<br>该项目还是基于之前的<a href="https://github.com/crossoverjie/SSM" target="_blank" rel="external">SSM</a>进行开发的。</p>
<h2 id="加入maven依赖"><a href="#加入maven依赖" class="headerlink" title="加入maven依赖"></a>加入maven依赖</h2><p>第一步肯定是要加入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--cxf--&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxws --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-core --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>接着我们需要配置一个CXF的servlet：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--定义一个cxf的servlet--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webservice/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后只要我们访问webservice/*这个地址就会进入CXF的servlet中。</p>
<h2 id="整合Spring配置"><a href="#整合Spring配置" class="headerlink" title="整合Spring配置"></a>整合Spring配置</h2><p>接下来是最重要的一部，用Spring整合CXF：<br>在这之前我有新建一个CXF的包，如下图：<br><img src="http://img.blog.csdn.net/20160802160407964" alt="目录结构"><br>这里有两个主要类</p>
<ul>
<li>HelloWorld接口。</li>
<li>实现HelloWorld接口的HelloWorldImpl类。<br>代码如下：<br>HelloWorld.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.cxf;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jws.WebService;</div><div class="line"></div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String str)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中就只定义了一个简单的<code>say()</code>方法。<br>HelloWorldImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.cxf.impl;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.cxf.HelloWorld;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> javax.jws.WebService;</div><div class="line"><span class="meta">@Component</span>(<span class="string">"helloWorld"</span>)</div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello"</span>+str;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里就是对<code>say()</code>方法的简单实现。<br>接下来就是整合Spring了，由于需要使用到CXF的标签，所以我们需要添加额外的命名路径如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xmlns:p="http://www.springframework.org/schema/p"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:jee="http://www.springframework.org/schema/jee"</div><div class="line">       xmlns:tx="http://www.springframework.org/schema/tx"</div><div class="line">       xmlns:jaxws="http://cxf.apache.org/jaxws"</div><div class="line">       xsi:schemaLocation="</div><div class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;import resource="classpath:META-INF/cxf/cxf.xml"/&gt;</div><div class="line">    &lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml"/&gt;</div><div class="line">    &lt;!-- 自动扫描webService --&gt;</div><div class="line">    &lt;context:component-scan base-package="com.crossoverJie.cxf" /&gt;</div><div class="line">    &lt;!-- 定义webservice的发布接口  --&gt;</div><div class="line">    &lt;jaxws:endpoint</div><div class="line">            implementor="#helloWorld"</div><div class="line">            address="/HelloWorld"</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>更加具体的配置可以查看官方给出的文档:<a href="http://cxf.apache.org/docs/how-do-i-develop-a-service.html" target="_blank" rel="external">http://cxf.apache.org/docs/how-do-i-develop-a-service.html</a>。<br><code>#helloWorld</code>指的是我们在<code>HelloWorldImpl</code>类中所自定义的名字，<code>/HelloWorld</code>则是我们需要访问的地址。<br>之后我们运行项目输入该地址：<a href="http://127.0.0.1:8080/ssm/webservice/HelloWorld?wsdl" target="_blank" rel="external">http://127.0.0.1:8080/ssm/webservice/HelloWorld?wsdl</a>如果出现如下界面：<br><img src="http://img.blog.csdn.net/20160802170000891" alt="xml">则说明我们的webservice发布成功了。<br>接下来只需要通过客户端调用这个接口即可获得返回结果了。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是一个简单的webservice入门实例，更多的关于CXF拦截器，客户端调用就没有做过多介绍，后续有时间的话再接着更新。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。<br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160802154107534&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;webservice这个不知道大家首次接触的时候是怎么理解的，反正我记得我当时第一次接触这个东西的时候以为又是一个XX框架，觉得还挺高大上。然而这一切在之后我使用过后才发现这些全都是YY。&lt;br&gt;那么webservice到底是什么呢，根据我自己的理解：简单来说就像是一个公开的接口，其他系统不管你是用什么语言来编写的都可以调用这个接口，并可以返回相应的数据给你。就像是现在很多的天气应用，他们肯定不会自己去搞一个气象局之类的部门去监测天气，大多都是直接调用一个天气接口，然后返回天气数据，相关应用就可以将这些信息展示给用户了。&lt;br&gt;通常来说发布这类接口的应用都是用一两种语言来编写即可，但是调用这个接口应用可能会是各种语言来编写的，为了满足这样的需求webservice出现了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说webservice就是为了满足以上需求而定义出来的规范。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Spring整合CXF&quot;&gt;&lt;a href=&quot;#Spring整合CXF&quot; class=&quot;headerlink&quot; title=&quot;Spring整合CXF&quot;&gt;&lt;/a&gt;Spring整合CXF&lt;/h1&gt;&lt;p&gt;在Java中实现webservice有多种方法，java本身在jdk1.7之后也对webservice有了默认的实现，但是在我们实际开发中一般还是会使用框架来，比如这里所提到的CXF就有着广泛的应用。&lt;br&gt;废话我就不多说了，直接讲Spring整合CXF，毕竟现在的JavaEE开发是离不开Spring了。&lt;br&gt;该项目还是基于之前的&lt;a href=&quot;https://github.com/crossoverjie/SSM&quot;&gt;SSM&lt;/a&gt;进行开发的。&lt;/p&gt;
&lt;h2 id=&quot;加入maven依赖&quot;&gt;&lt;a href=&quot;#加入maven依赖&quot; class=&quot;headerlink&quot; title=&quot;加入maven依赖&quot;&gt;&lt;/a&gt;加入maven依赖&lt;/h2&gt;&lt;p&gt;第一步肯定是要加入maven依赖：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--cxf--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxws --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cxf-rt-frontend-jaxws&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-core --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cxf-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cxf-rt-transports-http&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
      <category term="CXF" scheme="http://crossoverJie.github.io/tags/CXF/"/>
    
  </entry>
  
  <entry>
    <title>SSM(三)Shiro使用详解</title>
    <link href="http://crossoverJie.github.io/2016/07/15/SSM3/"/>
    <id>http://crossoverJie.github.io/2016/07/15/SSM3/</id>
    <published>2016-07-15T12:29:37.000Z</published>
    <updated>2016-08-02T13:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/58tv80u.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相比有做过企业级开发的童鞋应该都有做过权限安全之类的功能吧，最先开始我采用的是建<code>用户表</code>,<code>角色表</code>,<code>权限表</code>，之后在拦截器中对每一个请求进行拦截，再到数据库中进行查询看当前用户是否有该权限，这样的设计能满足大多数中小型系统的需求。不过这篇所介绍的Shiro能满足之前的所有需求，并且使用简单，安全性高，而且现在越来越的多企业都在使用Shiro，这应该是一个收入的你的技能库。</p>
<hr>
<h1 id="创建自定义MyRealm类"><a href="#创建自定义MyRealm类" class="headerlink" title="创建自定义MyRealm类"></a>创建自定义<code>MyRealm</code>类</h1><p>有关Shiro的基础知识我这里就不过多介绍了，直接来干货，到最后会整合Spring来进行权限验证。<br>首先在使用Shiro的时候我们要考虑在什么样的环境下使用：</p>
<ul>
<li>登录的验证</li>
<li>对指定角色的验证</li>
<li>对URL的验证</li>
</ul>
<a id="more"></a>
<p>基本上我们也就这三个需求，所以同时我们也需要三个方法：</p>
<ol>
<li><code>findUserByUserName(String username)</code>根据username查询用户，之后Shiro会根据查询出来的User的密码来和提交上来的密码进行比对。</li>
<li><code>findRoles(String username)</code>根据username查询该用户的所有角色，用于角色验证。</li>
<li><code>findPermissions(String username)</code>根据username查询他所拥有的权限信息，用于权限判断。</li>
</ol>
<p>下面我贴一下我的mapper代码(PS:该项目依然是基于之前的SSM，不太清楚整合的请看<a href="http://crossoverjie.top/2016/06/28/SSM1/" target="_blank" rel="external">SSM一</a>)。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.crossoverJie.dao.T_userDao"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.crossoverJie.pojo.T_user"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"userName"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"roleId"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span> &gt;</span></div><div class="line">        id, username, password,roleId</div><div class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></div><div class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></div><div class="line">        from t_user where userName=#&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findRoles"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></div><div class="line">        select r.roleName from t_user u,t_role r where u.roleId=r.id and u.userName=#&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPermissions"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></div><div class="line">        select p.permissionName from t_user u,t_role r,t_permission p</div><div class="line">        where u.roleId=r.id and p.roleId=r.id and u.userName=#&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>很简单只有三个方法，分别对应上面所说的三个方法。对<code>sql</code>稍微熟悉点的童鞋应该都能看懂，不太清楚就拷到数据库中执行一下就行了，数据库的<code>Sql</code>也在我的<code>github</code>上。实体类就比较简单了，就只有四个字段以及get,set方法。我就这里就不贴了，具体可以去<code>github</code>上<code>fork</code>我的源码。</p>
<p>现在就需要创建自定义的<code>MyRealm</code>类，这个还是比较重要的。继承至<code>Shiro</code>的<code>AuthorizingRealm</code>类，用于处理自己的验证逻辑，下面贴一下我的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.shiro;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.T_user;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.T_userService;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IDEA</div><div class="line"> * Created by $&#123;jie.chen&#125; on 2016/7/14.</div><div class="line"> * Shiro自定义域</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> T_userService t_userService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于的权限的认证。</div><div class="line">     * <span class="doctag">@param</span> principalCollection</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</div><div class="line">        String username = principalCollection.getPrimaryPrincipal().toString() ;</div><div class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo() ;</div><div class="line">        Set&lt;String&gt; roleName = t_userService.findRoles(username) ;</div><div class="line">        Set&lt;String&gt; permissions = t_userService.findPermissions(username) ;</div><div class="line">        info.setRoles(roleName);</div><div class="line">        info.setStringPermissions(permissions);</div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首先执行这个登录验证</div><div class="line">     * <span class="doctag">@param</span> token</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> AuthenticationException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span></span></div><div class="line">            <span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        <span class="comment">//获取用户账号</span></div><div class="line">        String username = token.getPrincipal().toString() ;</div><div class="line">        T_user user = t_userService.findUserByUsername(username) ;</div><div class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//将查询到的用户账号和密码存放到 authenticationInfo用于后面的权限判断。第三个参数随便放一个就行了。</span></div><div class="line">            AuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUserName(),user.getPassword(),</div><div class="line">                    <span class="string">"a"</span>) ;</div><div class="line">            <span class="keyword">return</span> authenticationInfo ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span>  <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>继承<code>AuthorizingRealm</code>类之后就需要覆写它的两个方法，<code>doGetAuthorizationInfo</code>,<code>doGetAuthenticationInfo</code>，这两个方法的作用我都有写注释，逻辑也比较简单。<br><code>doGetAuthenticationInfo</code>是用于登录验证的，在登录的时候需要将数据封装到<code>Shiro</code>的一个<code>token</code>中，执行shiro的<code>login()</code>方法，之后只要我们将<code>MyRealm</code>这个类配置到Spring中，登录的时候<code>Shiro</code>就会自动的调用<code>doGetAuthenticationInfo()</code>方法进行验证。<br>哦对了，忘了贴下登录的<code>Controller</code>了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.T_user;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.T_userService;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IDEA</div><div class="line"> * Created by $&#123;jie.chen&#125; on 2016/7/14.</div><div class="line"> * 后台Controller</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T_userController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> T_userService t_userService ;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/loginAdmin"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(T_user user, Model model)</span></span>&#123;</div><div class="line">        Subject subject = SecurityUtils.getSubject() ;</div><div class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(user.getUserName(),user.getPassword()) ;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            subject.login(token);</div><div class="line">            <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            <span class="comment">//这里将异常打印关闭是因为如果登录失败的话会自动抛异常</span></div><div class="line"><span class="comment">//            e.printStackTrace();</span></div><div class="line">            model.addAttribute(<span class="string">"error"</span>,<span class="string">"用户名或密码错误"</span>) ;</div><div class="line">            <span class="keyword">return</span> <span class="string">"../../login"</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"admin"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/student"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">student</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/teacher"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">teacher</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要就是<code>login()</code>方法。逻辑比较简单，只是登录验证的时候不是像之前那样直接查询数据库然后返回是否有用户了，而是调用<code>subject</code>的<code>login()</code>方法,就是我上面提到的，调用<code>login()</code>方法时<code>Shiro</code>会自动调用我们自定义的<code>MyRealm</code>类中的<code>doGetAuthenticationInfo()</code>方法进行验证的，验证逻辑是先根据用户名查询用户，如果查询到的话再将查询到的用户名和密码放到<code>SimpleAuthenticationInfo</code>对象中，Shiro会自动根据用户输入的密码和查询到的密码进行匹配，如果匹配不上就会抛出异常，匹配上之后就会执行<code>doGetAuthorizationInfo()</code>进行相应的权限验证。<br><code>doGetAuthorizationInfo()</code>方法的处理逻辑也比较简单，根据用户名获取到他所拥有的角色以及权限，然后赋值到<code>SimpleAuthorizationInfo</code>对象中即可，Shiro就会按照我们配置的XX角色对应XX权限来进行判断，这个配置在下面的整合中会讲到。</p>
<hr>
<h1 id="整合Spring"><a href="#整合Spring" class="headerlink" title="整合Spring"></a>整合Spring</h1><p>接下来应该是大家比较关系的一步：整合<code>Spring</code>。<br>我是在之前的<code>Spring SpringMVC Mybatis</code>的基础上进行整合的。</p>
<h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>首先我们需要在<code>web.xml</code>进行配置Shiro的过滤器。<br>我只贴Shiro部分的，其余的和之前配置是一样的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- shiro过滤器定义 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>配置还是比较简单的，这样会过滤所有的请求。<br>之后我们还需要在Spring中配置一个<code>shiroFilter</code>的bean。</p>
<h2 id="spring-mybatis-xml配置"><a href="#spring-mybatis-xml配置" class="headerlink" title="spring-mybatis.xml配置"></a>spring-mybatis.xml配置</h2><p>由于这里配置较多，我就全部贴一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.crossoverJie"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 指定连接数据库的驱动 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.crossoverJie.dao"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置自定义Realm --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myRealm"</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.shiro.MyRealm"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 安全管理器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"myRealm"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Shiro过滤器 核心--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Shiro的核心安全接口,这个属性是必须的 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 身份认证失败，则跳转到登录页面的配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 权限认证失败，则跳转到指定页面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/nopower.jsp"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Shiro连接约束配置,即过滤链的定义 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--anon 表示匿名访问，不需要认证以及授权--&gt;</span></div><div class="line">                /loginAdmin=anon</div><div class="line"></div><div class="line">                <span class="comment">&lt;!--authc表示需要认证 没有进行身份认证是不能进行访问的--&gt;</span></div><div class="line">                /admin*=authc</div><div class="line"></div><div class="line"></div><div class="line">                /student=roles[teacher]</div><div class="line">                /teacher=perms["user:create"]</div><div class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 开启Shiro注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></div><div class="line">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这里我们配置了上文中所提到的自定义<code>myRealm</code>,这样Shiro就可以按照我们自定义的逻辑来进行权限验证了。其余的都比较简单，看注释应该都能明白。<br>着重讲解一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--anon 表示匿名访问，不需要认证以及授权--&gt;</span></div><div class="line">        /loginAdmin=anon</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--authc表示需要认证 没有进行身份认证是不能进行访问的--&gt;</span></div><div class="line">        /admin*=authc</div><div class="line"></div><div class="line"></div><div class="line">        /student=roles[teacher]</div><div class="line">        /teacher=perms["user:create"]</div><div class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>/loginAdmin=anon的意思的意思是，发起/loginAdmin这个请求是不需要进行身份认证的，这个请求在这次项目中是一个登录请求，一般对于这样的请求都是不需要身份认证的。</li>
<li>/admin*=authc表示 /admin,/admin1,/admin2这样的请求都是需要进行身份认证的，不然是不能访问的。</li>
<li>/student=roles[teacher]表示访问/student请求的用户必须是<code>teacher</code>角色，不然是不能进行访问的。</li>
<li>/teacher=perms[“user:create”]表示访问/teacher请求是需要当前用户具有<code>user:create</code>权限才能进行访问的。<br>更多相关权限过滤的资料可以访问shiro的官方介绍：<a href="http://shiro.apache.org/spring.html" target="_blank" rel="external">传送门</a></li>
</ul>
<hr>
<h1 id="使用Shiro标签库"><a href="#使用Shiro标签库" class="headerlink" title="使用Shiro标签库"></a>使用Shiro标签库</h1><p>Shiro还有着强大标签库，可以在前端帮我获取信息和做判断。<br>我贴一下我这里登录完成之后显示的界面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%--</span></span></div><div class="line">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></div><div class="line">  <span class="attr">User:</span> <span class="attr">Administrator</span></div><div class="line">  <span class="attr">Date:</span> <span class="attr">2016</span>/<span class="attr">7</span>/<span class="attr">14</span></div><div class="line">  <span class="attr">Time:</span> <span class="attr">13:17</span></div><div class="line">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></div><div class="line"><span class="attr">--</span>%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"shiro"</span> <span class="attr">uri</span>=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span></div><div class="line">    这是admin角色登录：<span class="tag">&lt;<span class="name">shiro:principal</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:principal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span></div><div class="line">    有user:create权限信息</div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">登录成功</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>要想使用Shiro标签，只需要引入一下标签即可：<br><code>&lt;%@ taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;</code><br>其实英语稍微好点的童鞋应该都能看懂。下面我大概介绍下一些标签的用法：</p>
<ul>
<li><shiro:hasrole name="admin">具有<code>admin</code>角色才会显示标签内的信息。</shiro:hasrole></li>
<li><shiro:principal></shiro:principal>获取用户信息。默认调用<code>Subject.getPrincipal()</code>获取，即 Primary Principal。</li>
<li><shiro:haspermission name="user:create"> 用户拥有<code>user:create</code>这个权限才回显示标签内的信息。<br>更多的标签可以查看官网：<a href="http://shiro.apache.org/webapp-tutorial.html" target="_blank" rel="external">传送门</a></shiro:haspermission></li>
</ul>
<hr>
<h1 id="整体测试"><a href="#整体测试" class="headerlink" title="整体测试"></a>整体测试</h1><p><img src="http://i.imgur.com/Vmg8LLA.png" alt=""><br>这是我的测试数据。<br>首先来验证一下登录：<br>先输入一个错误的账号和密码：<br><img src="http://i.imgur.com/5LXP14s.gif" alt="1.gif"></p>
<p>接下来输入一个正确的：<br><img src="http://i.imgur.com/zbJxEfO.gif" alt="2.gif"><br>可以看到我登录的用户是<code>crossoverJie</code>他是有<code>admin</code>的角色，并且拥有<code>user:*</code>(ps:系统数据详见上面的数据库截图)的权限，所以在这里：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span>   </div><div class="line">    这是admin角色登录：<span class="tag">&lt;<span class="name">shiro:principal</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:principal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span></div><div class="line">    有user:create权限信息</div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>是能显示出标签内的信息，并把用户信息也显示出来了。<br>接着我们来访问一下<code>/student</code>这个请求，因为在Spring的配置文件中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--anon 表示匿名访问，不需要认证以及授权--&gt;</span></div><div class="line">        /loginAdmin=anon</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--authc表示需要认证 没有进行身份认证是不能进行访问的--&gt;</span></div><div class="line">        /admin*=authc</div><div class="line"></div><div class="line"></div><div class="line">        /student=roles[teacher]</div><div class="line">        /teacher=perms["user:create"]</div><div class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>只有<code>teacher</code>角色才能访问<code>/student</code>这个请求的：<br><img src="http://i.imgur.com/0LmdgCW.gif" alt="3.gif"><br>果然，Shiro做了安全控制是不能进行访问的。<br>然后我们换<code>aaa</code>用户登录，他正好是<code>teacher</code>角色，看能不能访问<code>/student</code>。<br><img src="http://i.imgur.com/XjeLdmF.gif" alt="4.gif"><br>果然是能访问的。<br>因为我在控制器里访问<code>/student</code>返回的是同一个界面所以看到的还是这个界面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/teacher"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">teacher</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并且没有显示之前Shiro标签内的内容。<br>其他的我就不测了，大家可以自己在数据库里加一些数据，或者是改下拦截的权限多试试，这样对Shiro的理解就会更加深刻。</p>
<hr>
<h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><p>Shiro还封装了一个我认为非常不错的功能，那就是MD5加密，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.shiro;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IDEA</div><div class="line"> * 基于Shiro的MD5加密</div><div class="line"> * Created by $&#123;jie.chen&#125; on 2016/7/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String str,String salt)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Md5Hash(str,salt).toString() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String md5 = md5(<span class="string">"abc123"</span>,<span class="string">"crossoverjie"</span>) ;</div><div class="line">        System.out.println(md5);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码非常简单，只需要调用<code>Md5Hash(str,salt)</code>方法即可，这里多了一个参数，第一个参数不用多解释，是需要加密的字符串。第二个参数<code>salt</code>中文翻译叫盐，加密的时候我们传一个字符串进去，只要这个salt不被泄露出去，那原则上加密之后是无法被解密的，在存用户密码的时候可以使用，感觉还是非常屌的。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是Shiro实际使用的案例，将的比较初略，但是关于Shiro的核心东西都在里面了。大家可以去我的github上下载源码，只要按照我给的数据库就没有问题，项目跑起来之后试着改下里面的东西可以加深对Shiro的理解。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。<br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/58tv80u.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;相比有做过企业级开发的童鞋应该都有做过权限安全之类的功能吧，最先开始我采用的是建&lt;code&gt;用户表&lt;/code&gt;,&lt;code&gt;角色表&lt;/code&gt;,&lt;code&gt;权限表&lt;/code&gt;，之后在拦截器中对每一个请求进行拦截，再到数据库中进行查询看当前用户是否有该权限，这样的设计能满足大多数中小型系统的需求。不过这篇所介绍的Shiro能满足之前的所有需求，并且使用简单，安全性高，而且现在越来越的多企业都在使用Shiro，这应该是一个收入的你的技能库。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;创建自定义MyRealm类&quot;&gt;&lt;a href=&quot;#创建自定义MyRealm类&quot; class=&quot;headerlink&quot; title=&quot;创建自定义MyRealm类&quot;&gt;&lt;/a&gt;创建自定义&lt;code&gt;MyRealm&lt;/code&gt;类&lt;/h1&gt;&lt;p&gt;有关Shiro的基础知识我这里就不过多介绍了，直接来干货，到最后会整合Spring来进行权限验证。&lt;br&gt;首先在使用Shiro的时候我们要考虑在什么样的环境下使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录的验证&lt;/li&gt;
&lt;li&gt;对指定角色的验证&lt;/li&gt;
&lt;li&gt;对URL的验证&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
      <category term="Shiro" scheme="http://crossoverJie.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>SSM(二)Lucene全文检索</title>
    <link href="http://crossoverJie.github.io/2016/07/06/SSM2/"/>
    <id>http://crossoverJie.github.io/2016/07/06/SSM2/</id>
    <published>2016-07-06T13:57:41.000Z</published>
    <updated>2016-07-06T15:01:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>大家平时肯定都有用过全文检索工具，最常用的百度谷歌就是其中的典型。如果自己能够做一个那是不是想想就逼格满满呢。<a href="http://lucene.apache.org/" target="_blank" rel="external">Apache</a>就为我们提供了这样一个框架，以下就是在实际开发中加入Lucene的一个小Demo。</p>
</blockquote>
<hr>
<h1 id="获取Maven依赖"><a href="#获取Maven依赖" class="headerlink" title="获取Maven依赖"></a>获取Maven依赖</h1><p>首先看一下实际运行的效果图：<br><img src="http://i.imgur.com/pTTnv3R.png" alt=""><br><img src="http://i.imgur.com/nRcHFQg.png" alt=""><br><a id="more"></a><br>这个项目是基于之前使用IDEA搭建的SSM的基础上进行增加的，建议小白先看下一我。<a href="http://crossoverjie.top/2016/06/28/SSM1/" target="_blank" rel="external">上一篇博客</a>，以及共享在Github上的<a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">源码</a>。<br>以下是Lucene所需要的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--加入lucene--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-common --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--lucene中文分词--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-smartcn --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-smartcn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--lucene高亮--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-highlighter --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>具体的用途我都写有注释。<br>在IDEA中修改了Pom.xml文件之后只需要点击如图所示的按钮即可重新获取依赖：<br><img src="http://i.imgur.com/0XU7DjK.png" alt=""></p>
<hr>
<h1 id="编写Lucene工具类"><a href="#编写Lucene工具类" class="headerlink" title="编写Lucene工具类"></a>编写Lucene工具类</h1><p>这个工具类中的具体代码我就不单独提出来说了，每个关键的地方我都写有注释，不清楚的再讨论。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.lucene;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.User;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.*;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.*;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.*;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.StringReader;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 博客索引类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneIndex</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Directory dir=<span class="keyword">null</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取IndexWriter实例</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> IndexWriter <span class="title">getWriter</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 生成的索引我放在了C盘，可以根据自己的需要放在具体位置</div><div class="line">		 */</div><div class="line">		dir= FSDirectory.open(Paths.get(<span class="string">"C://lucene"</span>));</div><div class="line">		SmartChineseAnalyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line">		IndexWriterConfig iwc=<span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">		IndexWriter writer=<span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">		<span class="keyword">return</span> writer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加博客索引</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIndex</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		IndexWriter writer=getWriter();</div><div class="line">		Document doc=<span class="keyword">new</span> Document();</div><div class="line">		doc.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>,String.valueOf(user.getUserId()), Field.Store.YES));</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * yes是会将数据存进索引，如果查询结果中需要将记录显示出来就要存进去，如果查询结果</div><div class="line">		 * 只是显示标题之类的就可以不用存，而且内容过长不建议存进去</div><div class="line">		 * 使用TextField类是可以用于查询的。</div><div class="line">		 */</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"username"</span>, user.getUsername(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>,user.getDescription(), Field.Store.YES));</div><div class="line">		writer.addDocument(doc);</div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 更新博客索引</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndex</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		IndexWriter writer=getWriter();</div><div class="line">		Document doc=<span class="keyword">new</span> Document();</div><div class="line">		doc.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>,String.valueOf(user.getUserId()), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"username"</span>, user.getUsername(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>,user.getDescription(), Field.Store.YES));</div><div class="line">		writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"id"</span>, String.valueOf(user.getUserId())), doc);</div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除指定博客的索引</div><div class="line">	 * <span class="doctag">@param</span> userId</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(String userId)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		IndexWriter writer=getWriter();</div><div class="line">		writer.deleteDocuments(<span class="keyword">new</span> Term(<span class="string">"id"</span>, userId));</div><div class="line">		writer.forceMergeDeletes(); <span class="comment">// 强制删除</span></div><div class="line">		writer.commit();</div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查询用户</div><div class="line">	 * <span class="doctag">@param</span> q 查询关键字</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">searchBlog</span><span class="params">(String q)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 注意的是查询索引的位置得是存放索引的位置，不然会找不到。</div><div class="line">		 */</div><div class="line">		dir= FSDirectory.open(Paths.get(<span class="string">"C://lucene"</span>));</div><div class="line">		IndexReader reader = DirectoryReader.open(dir);</div><div class="line">		IndexSearcher is=<span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">		BooleanQuery.Builder booleanQuery = <span class="keyword">new</span> BooleanQuery.Builder();</div><div class="line">		SmartChineseAnalyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * username和description就是我们需要进行查找的两个字段</div><div class="line">		 * 同时在存放索引的时候要使用TextField类进行存放。</div><div class="line">		 */</div><div class="line">		QueryParser parser=<span class="keyword">new</span> QueryParser(<span class="string">"username"</span>,analyzer);</div><div class="line">		Query query=parser.parse(q);</div><div class="line">		QueryParser parser2=<span class="keyword">new</span> QueryParser(<span class="string">"description"</span>,analyzer);</div><div class="line">		Query query2=parser2.parse(q);</div><div class="line">		booleanQuery.add(query, BooleanClause.Occur.SHOULD);</div><div class="line">		booleanQuery.add(query2, BooleanClause.Occur.SHOULD);</div><div class="line">		TopDocs hits=is.search(booleanQuery.build(), <span class="number">100</span>);</div><div class="line">		QueryScorer scorer=<span class="keyword">new</span> QueryScorer(query);</div><div class="line">		Fragmenter fragmenter = <span class="keyword">new</span> SimpleSpanFragmenter(scorer);</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 这里可以根据自己的需要来自定义查找关键字高亮时的样式。</div><div class="line">		 */</div><div class="line">		SimpleHTMLFormatter simpleHTMLFormatter=<span class="keyword">new</span> SimpleHTMLFormatter(<span class="string">"&lt;b&gt;&lt;font color='red'&gt;"</span>,<span class="string">"&lt;/font&gt;&lt;/b&gt;"</span>);</div><div class="line">		Highlighter highlighter=<span class="keyword">new</span> Highlighter(simpleHTMLFormatter, scorer);</div><div class="line">		highlighter.setTextFragmenter(fragmenter);</div><div class="line">		List&lt;User&gt; userList=<span class="keyword">new</span> LinkedList&lt;User&gt;();</div><div class="line">		<span class="keyword">for</span>(ScoreDoc scoreDoc:hits.scoreDocs)&#123;</div><div class="line">			Document doc=is.doc(scoreDoc.doc);</div><div class="line">			User user=<span class="keyword">new</span> User();</div><div class="line">			user.setUserId(Integer.parseInt(doc.get((<span class="string">"id"</span>))));</div><div class="line">			user.setDescription(doc.get((<span class="string">"description"</span>)));</div><div class="line">			String username=doc.get(<span class="string">"username"</span>);</div><div class="line">			String description=doc.get(<span class="string">"description"</span>);</div><div class="line">			<span class="keyword">if</span>(username!=<span class="keyword">null</span>)&#123;</div><div class="line">				TokenStream tokenStream = analyzer.tokenStream(<span class="string">"username"</span>, <span class="keyword">new</span> StringReader(username));</div><div class="line">				String husername=highlighter.getBestFragment(tokenStream, username);</div><div class="line">				<span class="keyword">if</span>(StringUtil.isEmpty(husername))&#123;</div><div class="line">					user.setUsername(username);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					user.setUsername(husername);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(description!=<span class="keyword">null</span>)&#123;</div><div class="line">				TokenStream tokenStream = analyzer.tokenStream(<span class="string">"description"</span>, <span class="keyword">new</span> StringReader(description));</div><div class="line">				String hContent=highlighter.getBestFragment(tokenStream, description);</div><div class="line">				<span class="keyword">if</span>(StringUtil.isEmpty(hContent))&#123;</div><div class="line">					<span class="keyword">if</span>(description.length()&lt;=<span class="number">200</span>)&#123;</div><div class="line">						user.setDescription(description);</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						user.setDescription(description.substring(<span class="number">0</span>, <span class="number">200</span>));</div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					user.setDescription(hContent);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			userList.add(user);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> userList;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="查询Controller的编写"><a href="#查询Controller的编写" class="headerlink" title="查询Controller的编写"></a>查询Controller的编写</h1><p>接下来是查询Controller：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/q"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">search</span><span class="params">(@RequestParam(value = <span class="string">"q"</span>, required = <span class="keyword">false</span>,defaultValue = <span class="string">""</span>)</span> String q,</span></div><div class="line">                     @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"page"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"1"</span>)</span> String page,</div><div class="line">                     Model model,</div><div class="line">                     HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    LuceneIndex luceneIndex = <span class="keyword">new</span> LuceneIndex() ;</div><div class="line">    List&lt;User&gt; userList = luceneIndex.searchBlog(q);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 关于查询之后的分页我采用的是每次分页发起的请求都是将所有的数据查询出来，</div><div class="line">     * 具体是第几页再截取对应页数的数据，典型的拿空间换时间的做法，如果各位有什么</div><div class="line">     * 高招欢迎受教。</div><div class="line">     */</div><div class="line">    Integer toIndex = userList.size() &gt;= Integer.parseInt(page) * <span class="number">5</span> ? Integer.parseInt(page) * <span class="number">5</span> : userList.size();</div><div class="line">    List&lt;User&gt; newList = userList.subList((Integer.parseInt(page) - <span class="number">1</span>) * <span class="number">5</span>, toIndex);</div><div class="line">    model.addAttribute(<span class="string">"userList"</span>,newList) ;</div><div class="line">    String s = <span class="keyword">this</span>.genUpAndDownPageCode(Integer.parseInt(page), userList.size(), q, <span class="number">5</span>, request.getServletContext().</div><div class="line">            getContextPath());</div><div class="line">    model.addAttribute(<span class="string">"pageHtml"</span>,s) ;</div><div class="line">    model.addAttribute(<span class="string">"q"</span>,q) ;</div><div class="line">    model.addAttribute(<span class="string">"resultTotal"</span>,userList.size()) ;</div><div class="line">    model.addAttribute(<span class="string">"pageTitle"</span>,<span class="string">"搜索关键字'"</span> + q + <span class="string">"'结果页面"</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">"queryResult"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有用到一个<code>genUpAndDownPageCode()</code>方法来生成分页的Html代码，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 查询之后的分页</div><div class="line"> * <span class="doctag">@param</span> page</div><div class="line"> * <span class="doctag">@param</span> totalNum</div><div class="line"> * <span class="doctag">@param</span> q</div><div class="line"> * <span class="doctag">@param</span> pageSize</div><div class="line"> * <span class="doctag">@param</span> projectContext</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">genUpAndDownPageCode</span><span class="params">(<span class="keyword">int</span> page,Integer totalNum,String q,Integer pageSize,String projectContext)</span></span>&#123;</div><div class="line">    <span class="keyword">long</span> totalPage=totalNum%pageSize==<span class="number">0</span>?totalNum/pageSize:totalNum/pageSize+<span class="number">1</span>;</div><div class="line">    StringBuffer pageCode=<span class="keyword">new</span> StringBuffer();</div><div class="line">    <span class="keyword">if</span>(totalPage==<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        pageCode.append(<span class="string">"&lt;nav&gt;"</span>);</div><div class="line">        pageCode.append(<span class="string">"&lt;ul class='pager' &gt;"</span>);</div><div class="line">        <span class="keyword">if</span>(page&gt;<span class="number">1</span>)&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li&gt;&lt;a href='"</span>+projectContext+<span class="string">"/q?page="</span>+(page-<span class="number">1</span>)+<span class="string">"&amp;q="</span>+q+<span class="string">"'&gt;上一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li class='disabled'&gt;&lt;a href='#'&gt;上一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(page&lt;totalPage)&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li&gt;&lt;a href='"</span>+projectContext+<span class="string">"/q?page="</span>+(page+<span class="number">1</span>)+<span class="string">"&amp;q="</span>+q+<span class="string">"'&gt;下一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li class='disabled'&gt;&lt;a href='#'&gt;下一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;</div><div class="line">        pageCode.append(<span class="string">"&lt;/ul&gt;"</span>);</div><div class="line">        pageCode.append(<span class="string">"&lt;/nav&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pageCode.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码比较简单，就是根据的页数、总页数来生成分页代码，对了我前端采用的是现在流行的Bootstrap，这个有不会的可以去他<a href="http://www.bootcss.com/" target="_blank" rel="external">官网</a>看看，比较简单易上手。接下来只需要编写显示界面就大功告成了。<br><img src="http://i.imgur.com/NUZM7Bc.png" alt=""></p>
<hr>
<h1 id="显示界面"><a href="#显示界面" class="headerlink" title="显示界面"></a>显示界面</h1><p>我只贴关键代码，具体的可以去Github上查看。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;userList.size()==0 &#125;"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"padding-top: 20px"</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>$&#123;q&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span>未查询到结果，请换个关键字试试！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"padding-top: 20px"</span>&gt;</span></div><div class="line">                            查询<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>$&#123;q&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span>关键字，约$&#123;resultTotal&#125;条记录！</div><div class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"u"</span> <span class="attr">items</span>=<span class="string">"$&#123;userList &#125;"</span> <span class="attr">varStatus</span>=<span class="string">"status"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading "</span>&gt;</span></div><div class="line"></div><div class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></div><div class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">                                                <span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">                                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=path %&gt;/user/showUser/$&#123;u.userId&#125;"</span>&gt;</span>$&#123;u.username&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                                                <span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">                                                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">                                                    $&#123;u.description&#125;</div><div class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-2"</span>&gt;</span></div><div class="line">                                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted text-right"</span>&gt;</span></div><div class="line">                                                $&#123;u.password&#125;</div><div class="line">                                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-comment"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">							 $&#123;u.password&#125;</div><div class="line">							<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>利用<code>JSTL</code>标签即可将数据循环展示出来，关键字就不需要单独做处理了，在后台查询的时候已经做了修改了。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于全文检索的框架不止<code>Lucene</code>还有<code>solr</code>，具体谁好有什么区别我也不太清楚，准备下来花点时间研究下。哦对了，最近又有点想做<code>Android</code>开发了，感觉做点东西能够实实在在的摸得到逼格确实要高些(现在主要在做后端开发)，感兴趣的朋友可以关注下。哦对了，直接运行我代码的朋友要下注意：</p>
<ul>
<li>首先要将数据库倒到自己的MySQL上<img src="http://i.imgur.com/rSodBB5.png" alt=""></li>
<li>之后在首次运行的时候需要点击<img src="http://i.imgur.com/jQySeaf.png" alt="">重新生成索引按钮生成一遍索引之后才能进行搜索，因为现在的数据是直接存到数据库中的，并没有在新增的时候就增加索引，在实际开发的时候需要在新增数据那里再生成一份索引，就直接调用<code>LuceneIndex</code>类中的<code>addIndex</code>方法传入实体即可，再做更新、删除操作的时候也同样需要对索引做操作。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;大家平时肯定都有用过全文检索工具，最常用的百度谷歌就是其中的典型。如果自己能够做一个那是不是想想就逼格满满呢。&lt;a href=&quot;http://lucene.apache.org/&quot;&gt;Apache&lt;/a&gt;就为我们提供了这样一个框架，以下就是在实际开发中加入Lucene的一个小Demo。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;获取Maven依赖&quot;&gt;&lt;a href=&quot;#获取Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;获取Maven依赖&quot;&gt;&lt;/a&gt;获取Maven依赖&lt;/h1&gt;&lt;p&gt;首先看一下实际运行的效果图：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/pTTnv3R.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/nRcHFQg.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="Lucene" scheme="http://crossoverJie.github.io/tags/Lucene/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>SSM(一)框架的整合</title>
    <link href="http://crossoverJie.github.io/2016/06/28/SSM1/"/>
    <id>http://crossoverJie.github.io/2016/06/28/SSM1/</id>
    <published>2016-06-28T13:40:15.000Z</published>
    <updated>2016-06-28T16:45:42.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近这几年<code>JetBrains</code>公司开发的<code>IDEA</code>是越来越流行了，甚至Google的官方IDE都是<code>IDEA</code>来定制的，可见IDEA的发展趋势是越来越好，由于博主接触IDEA的时间也不长，所以有关<code>IDEA</code>和<code>Eclipse</code>的区别和优劣势请自行百度了。<br>借此机会我就使用IDEA来整合一下SSM，针对于初学者(初次使用IDEA和JAVAEE初学者)还是有帮助的。</p>
<hr>
<h1 id="新建SSM项目"><a href="#新建SSM项目" class="headerlink" title="新建SSM项目"></a>新建SSM项目</h1><p>哦对了，关于IDEA的版本问题强烈建议使用旗舰版，有条件的就购买，没条件的嘛。。天朝你懂的。<br>在欢迎界面点击<code>Create New Project</code>。<br><img src="http://i.imgur.com/St7JEw7.png" alt=""><br><a id="more"></a><br>之后选择<code>Maven</code>(新建JAVAEE项目是需要安装JDK的，这个就不在这里讲解了。)选好之后点击下一步。<br><img src="http://i.imgur.com/5kSWIla.png" alt=""><br>之后填入<code>GroupID</code>和<code>ArtifactID</code>这里尽量按照Maven的命名规范来即可。<br><img src="http://i.imgur.com/DiiEJ4h.png" alt=""><br>之后点击下一步，填入项目名称，这里我建议和之前填写的<code>ArtifactID</code>名称一样即可。<br><img src="http://i.imgur.com/aOJC4Ic.png" alt=""><br>点击Finish完成项目的创建。<br>之后尽量不要做其他操作，让IDEA完成索引创建。<br><img src="http://i.imgur.com/rWOtgha.png" alt=""></p>
<h1 id="完善目录结构"><a href="#完善目录结构" class="headerlink" title="完善目录结构"></a>完善目录结构</h1><p>首先观察一下IDEA给我们生成的目录结构，这是一个标准的Maven目录。但是其中少了一个<code>webapp</code>目录用于存放<code>jsp</code>、<code>css</code>、<code>js</code>、图片之类的文件。之后还需要完善我们的目录结构，如下图：<br><img src="http://i.imgur.com/u2xPqCS.png" alt=""><br>以上的命名都是我们开发过程中常用的命名规则，不一定按照我这样来，但是最好是有一定的规范。</p>
<hr>
<h1 id="POM-xml"><a href="#POM-xml" class="headerlink" title="POM.xml"></a>POM.xml</h1><p><code>pom.xml</code>是整个maven的核心配置文件，里面有对项目的描述和项目所需要的依赖。哦对了，在修改<code>pom.xml</code>文件之前我们最好先设置一下该项目的Maven设置(IDEA对每个项目的maven设置和Eclipse不一样，不是设置一次就可了，如果今后还要新建项目那就还需要设置，同时按住<code>ctrl</code>,<code>alt</code>,<code>s</code>是打开设置的快捷键，更多有关IDEA的操作今后会更新相关博文。)<br><img src="http://i.imgur.com/fCaXCDT.png" alt=""></p>
<h2 id="IDEA的Maven设置"><a href="#IDEA的Maven设置" class="headerlink" title="IDEA的Maven设置"></a>IDEA的Maven设置</h2><p>在<code>Eclipse</code>中用过Maven的都应该知道，这里是将项目的Maven换成我们自己安装的Maven，下面两个目录是选择Maven配置文件，不知道是什么原因在<code>Eclipse</code>中选择了配置文件之后会自动的将Maven本地厂库的路径更改为你<code>settings.xml</code>中配置的路径。既然这里没有自动选中那我们就手动修改即可，尽量不要放在C盘，一是用久之后本地厂库占用的空间会比较大，二是万一系统崩溃的话还有可能找回来。</p>
<h2 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h2><p>以下是我的<code>pom.xml</code>文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="comment">&lt;!--suppress MavenModelInspection --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">source</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">target</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- spring --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 使用SpringMVC需配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 关系型数据库整合时需配置 如hibernate jpa等 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-orm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- log4j --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- mysql连接 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.34<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- json --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- aop --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- servlet --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0-alpha-1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 上传文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>关于<code>maven</code>的知识点我就不细讲了，毕竟这是一个整合教程。</p>
<hr>
<h1 id="spring-mvc-xml"><a href="#spring-mvc-xml" class="headerlink" title="spring-mvc.xml"></a>spring-mvc.xml</h1><p>这个配置文件是springMVC的配置文件：<br>里面的我都写有注释，应该都能看懂。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/mvc</div><div class="line">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.crossoverJie.controller"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;bean id="mappingJacksonHttpMessageConverter"</span></div><div class="line">          class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"&gt;</div><div class="line">        &lt;property name="supportedMediaTypes"&gt;</div><div class="line">            &lt;list&gt;</div><div class="line">                &lt;value&gt;text/html;charset=UTF-8&lt;/value&gt;</div><div class="line">            &lt;/list&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">    &lt;/bean&gt;--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射</span></div><div class="line">    --&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 默认编码 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 文件大小最大值 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 内存中的最大值 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置拦截器 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;mvc:interceptors&gt;</span></div><div class="line">        &lt;mvc:interceptor&gt;</div><div class="line">            &amp;lt;!&amp;ndash; &lt;mvc:mapping path="/**"/&gt;拦截所有 &amp;ndash;&amp;gt;</div><div class="line">            &lt;mvc:mapping path="/user/**"/&gt;</div><div class="line">            &lt;mvc:mapping path="/role/**"/&gt;</div><div class="line">            &lt;mvc:mapping path="/function/**"/&gt;</div><div class="line">            &lt;mvc:mapping path="/news/**"/&gt;</div><div class="line">            &lt;mvc:mapping path="/img/**"/&gt;</div><div class="line">            &lt;bean class="com.crossoverJie.intercept.Intercept"&gt;&lt;/bean&gt;</div><div class="line">        &lt;/mvc:interceptor&gt;</div><div class="line">    &lt;/mvc:interceptors&gt;--&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>关于上面拦截器注释掉的那里，配置是没有问题的，因为这是一个整合项目，所以里边也没有用到拦截器，为了防止运行报错所以就先注释掉了。如果后续需要增加拦截器，可以参考这里的配置。</p>
<hr>
<h1 id="spring-mybatis-xml"><a href="#spring-mybatis-xml" class="headerlink" title="spring-mybatis.xml"></a>spring-mybatis.xml</h1><p>这个是spring和mybatis的整合配置文件，其中还有<code>Druid</code>连接池的配置。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.crossoverJie"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 指定连接数据库的驱动 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.crossoverJie.dao"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上两个就是最重要的配置文件了，只要其中的包名和配置文件中的名字一样就不会出问题。<br>关于<code>xxMpper.xml</code>以及实体类的生成，我们可以借助<code>mybatis-generator</code>自动生成工具来生成，方便快捷。</p>
<hr>
<h1 id="IDEA配置Tomcat"><a href="#IDEA配置Tomcat" class="headerlink" title="IDEA配置Tomcat"></a>IDEA配置Tomcat</h1><p>关于Tomcat的下载与安装我这里就不多介绍了。<br><img src="http://i.imgur.com/vJPS2Yh.png" alt=""><br>按照下图选择：<br><img src="http://i.imgur.com/FH695fj.png" alt=""><br>在<code>name</code>中为这个Tomcat输入一个名字。之后选择你本地Tomcat的目录点击<code>Ok</code>即可。<br><img src="http://i.imgur.com/f1RS3LJ.png" alt=""><br><img src="http://i.imgur.com/gKKK6YG.png" alt=""><br><img src="http://i.imgur.com/7jjk7JF.png" alt=""><br>点击<code>apply</code>和保存之后就返回首页即可看到Tomcat的标识。<br><img src="http://i.imgur.com/9Zw2ngh.png" alt=""><br>根据需要点击<code>Run</code>和<code>Debug</code>即可运行。</p>
<p>运行结果如下：<br><img src="http://i.imgur.com/zJgW4za.png" alt=""><br><img src="http://i.imgur.com/q8zyEJk.png" alt=""><br>点击上图的2,3,4可看到不同用户的结果，如果你走到这一步，那么恭喜你整合成功。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上源码都在我的Github上。<br>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">SSM</a><br>其中有问题或者不对的地方欢迎交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近这几年&lt;code&gt;JetBrains&lt;/code&gt;公司开发的&lt;code&gt;IDEA&lt;/code&gt;是越来越流行了，甚至Google的官方IDE都是&lt;code&gt;IDEA&lt;/code&gt;来定制的，可见IDEA的发展趋势是越来越好，由于博主接触IDEA的时间也不长，所以有关&lt;code&gt;IDEA&lt;/code&gt;和&lt;code&gt;Eclipse&lt;/code&gt;的区别和优劣势请自行百度了。&lt;br&gt;借此机会我就使用IDEA来整合一下SSM，针对于初学者(初次使用IDEA和JAVAEE初学者)还是有帮助的。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;新建SSM项目&quot;&gt;&lt;a href=&quot;#新建SSM项目&quot; class=&quot;headerlink&quot; title=&quot;新建SSM项目&quot;&gt;&lt;/a&gt;新建SSM项目&lt;/h1&gt;&lt;p&gt;哦对了，关于IDEA的版本问题强烈建议使用旗舰版，有条件的就购买，没条件的嘛。。天朝你懂的。&lt;br&gt;在欢迎界面点击&lt;code&gt;Create New Project&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/St7JEw7.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
      <category term="Spring" scheme="http://crossoverJie.github.io/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://crossoverJie.github.io/tags/SpringMVC/"/>
    
      <category term="Mybatis" scheme="http://crossoverJie.github.io/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Initial Demo</title>
    <link href="http://crossoverJie.github.io/2016/06/19/Initial%20Demo/"/>
    <id>http://crossoverJie.github.io/2016/06/19/Initial Demo/</id>
    <published>2016-06-19T05:19:02.000Z</published>
    <updated>2016-06-19T05:19:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><a id="more"></a>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a><br>视频：<iframe height="498" width="510" src="http://player.youku.com/embed/XNjcyMDU4Njg0" frameborder="0" allowfullscreen></iframe></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日常记录（三）更换Hexo主题</title>
    <link href="http://crossoverJie.github.io/2016/06/18/normal-skill3/"/>
    <id>http://crossoverJie.github.io/2016/06/18/normal-skill3/</id>
    <published>2016-06-17T16:05:24.000Z</published>
    <updated>2016-06-17T17:10:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>由于博主的喜新厌旧，再经过一段时间对上一个主题的审美疲劳加上我专(zhuang)研(bi)的精神<br>于是就想找一个B格较高的主题。经过一段时间的查找发现NexT这个主题简洁而不失华丽，低调而不失逼格(就不收广告费了)特别适合我，接着就着手开干。</p>
</blockquote>
<hr>
<h1 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h1><h2 id="从Git上克隆主题"><a href="#从Git上克隆主题" class="headerlink" title="从Git上克隆主题"></a>从Git上克隆主题</h2><p>这里我就不介绍有关Hexo的东西了，默认是知道如何搭建Hexo博客的。还不太清楚的请自行百度。<br>首先将NexT主题先克隆到自己电脑上：</p>
<ul>
<li><code>cd your-hexo-site</code></li>
<li><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>。<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2>接下来我们只需要将站点下的<code>_config.yml</code>配置文件中的主题配置更换成Next，如下图：<br><img src="http://i.imgur.com/GhhnMDs.png" alt=""><br>其实这样主题就配好了，是不是很简单<br><img src="http://i.imgur.com/wQmHabT.gif" alt="">。<a id="more"></a>
</li>
</ul>
<hr>
<h1 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h1><h2 id="Hexo配置文件相关配置"><a href="#Hexo配置文件相关配置" class="headerlink" title="Hexo配置文件相关配置"></a>Hexo配置文件相关配置</h2><p>Next主题的个人头像是在Hexo配置文件中的。<br><img src="http://i.imgur.com/Wranuhu.png" alt=""><br>NexT同样也支持多说配置，我们只需要将你自己的多说账号也配置到Hexo的配置文件中即可。<br><code>duoshuo_shortname: your name</code></p>
<h2 id="Next配置文件相关配置"><a href="#Next配置文件相关配置" class="headerlink" title="Next配置文件相关配置"></a>Next配置文件相关配置</h2><p>NexT主题非常吸引我的一点就是他支持打赏功能，这让我这种穷逼程序猿又看到了生路(多半也没人会给我打赏)，以下一段配置即可在每篇博文下边开启打赏功能。<br><img src="http://i.imgur.com/EvWY5v0.png" alt=""><br>微信也是可以的，但是我找了半天没有找到生成微信支付码的地方。<br>其他的一些配置我觉得都比较简单，看官方的帮助文档也是完全可以的，有问题的我们可以再讨论。</p>
<hr>
<h1 id="一个绕坑指南"><a href="#一个绕坑指南" class="headerlink" title="一个绕坑指南"></a>一个绕坑指南</h1><p>我在换完NexT之后发现在首页<br><img src="http://i.imgur.com/JA451zP.png" alt=""><br>这里显示的分类和便签的统计都是对的，但是点进去之后就是空白的。我查看了Hexo和NexT的文档发现我写的没有任何问题，之后就懵逼了。。。<img src="http://i.imgur.com/dQxzrn6.gif" alt="">各位有碰到这个问题的可以往下看。</p>
<h2 id="绕坑"><a href="#绕坑" class="headerlink" title="绕坑"></a>绕坑</h2><p>之后我仔细的查阅了NexT的文档，发现他所使用的tags和categories文件夹下的<code>index.md</code>的格式是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: tags</div><div class="line">date: 2016-06-16 02:13:06</div><div class="line">type: &quot;tags&quot;</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>这和我之前使用的<code>JackMan</code>主题是完全不一样的(有关JackMan主题可以自行查阅)。<br>之后我讲categories文件下的<code>index.md</code>文件也换成这样的格式就没有问题了。如果你和我一样眼神不好的话建议配副眼镜。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实以上的很多东西都是在<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT官方文档</a>里查得到的，接下来我会尝试提一点<code>pull request</code>来更加深入的了解Hexo。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于博主的喜新厌旧，再经过一段时间对上一个主题的审美疲劳加上我专(zhuang)研(bi)的精神&lt;br&gt;于是就想找一个B格较高的主题。经过一段时间的查找发现NexT这个主题简洁而不失华丽，低调而不失逼格(就不收广告费了)特别适合我，接着就着手开干。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;安装NexT主题&quot;&gt;&lt;a href=&quot;#安装NexT主题&quot; class=&quot;headerlink&quot; title=&quot;安装NexT主题&quot;&gt;&lt;/a&gt;安装NexT主题&lt;/h1&gt;&lt;h2 id=&quot;从Git上克隆主题&quot;&gt;&lt;a href=&quot;#从Git上克隆主题&quot; class=&quot;headerlink&quot; title=&quot;从Git上克隆主题&quot;&gt;&lt;/a&gt;从Git上克隆主题&lt;/h2&gt;&lt;p&gt;这里我就不介绍有关Hexo的东西了，默认是知道如何搭建Hexo博客的。还不太清楚的请自行百度。&lt;br&gt;首先将NexT主题先克隆到自己电脑上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cd your-hexo-site&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone https://github.com/iissnan/hexo-theme-next themes/next&lt;/code&gt;。&lt;h2 id=&quot;安装主题&quot;&gt;&lt;a href=&quot;#安装主题&quot; class=&quot;headerlink&quot; title=&quot;安装主题&quot;&gt;&lt;/a&gt;安装主题&lt;/h2&gt;接下来我们只需要将站点下的&lt;code&gt;_config.yml&lt;/code&gt;配置文件中的主题配置更换成Next，如下图：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/GhhnMDs.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;其实这样主题就配好了，是不是很简单&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/wQmHabT.gif&quot; alt=&quot;&quot;&gt;。
    
    </summary>
    
      <category term="日常记录" scheme="http://crossoverJie.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Hexo" scheme="http://crossoverJie.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>日常记录（二）SpringMvc导出Excel</title>
    <link href="http://crossoverJie.github.io/2016/06/14/normal-skill2/"/>
    <id>http://crossoverJie.github.io/2016/06/14/normal-skill2/</id>
    <published>2016-06-14T12:38:06.000Z</published>
    <updated>2016-06-15T17:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>相信很多朋友在实际工作中都会要将数据导出成Excel的需求，通常这样的做法有两种。<br>一是采用JXL来生成Excel，之后保存到服务器，然后在生成页面之后下载该文件。<br>二是使用POI来生成Excel，之后使用Stream的方式输出到前台直接下载<code>(ps:当然也可以生成到服务器中再下载。)</code>。这里我们讨论第二种。<br><em>至于两种方式的优缺点请自行<a href="http://www.baidu.com" target="_blank" rel="external">百度</a></em>。</p>
</blockquote>
<hr>
<h1 id="Struts2的方式"><a href="#Struts2的方式" class="headerlink" title="Struts2的方式"></a>Struts2的方式</h1><p>通常我会将已经生成好的<code>HSSFWorkbook</code>放到一个<code>InputStream</code>中，然后再到xml配置文件中将返回结果更改为<code>stream</code>的方式。如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">responseData</span><span class="params">(HSSFWorkbook wb)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">	ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">	wb.write(baos);</div><div class="line">	baos.flush();</div><div class="line">	<span class="keyword">byte</span>[] aa = baos.toByteArray();</div><div class="line">	excelStream = <span class="keyword">new</span> ByteArrayInputStream(aa, <span class="number">0</span>, aa.length);</div><div class="line">	baos.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>配置文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;action name="exportXxx" class="xxxAction" method="exportXxx"&gt;</div><div class="line">	&lt;result name="exportSuccess" type="stream"&gt;</div><div class="line">		&lt;param name="inputName"&gt;excelStream&lt;/param&gt;</div><div class="line">    	&lt;param name="contentType"&gt;application/vnd.ms-excel&lt;/param&gt;</div><div class="line">    	&lt;param name="contentDisposition"&gt;attachment;filename="Undefined.xls"&lt;/param&gt;</div><div class="line">	&lt;/result&gt;</div><div class="line">&lt;/action&gt;</div></pre></td></tr></table></figure></p>
<p>这样即可达到点击链接即可直接下载文件的目的。</p>
<hr>
<h1 id="SpringMVC的方式"><a href="#SpringMVC的方式" class="headerlink" title="SpringMVC的方式"></a>SpringMVC的方式</h1><p>先贴代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/exportXxx.action"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportXxx</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">		@RequestParam(value=<span class="string">"scheduleId"</span>, defaultValue=<span class="string">"0"</span>)<span class="keyword">int</span> scheduleId)&#123;</div><div class="line">	HSSFWorkbook wb = createExcel(scheduleId) ;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename=appointmentUser.xls"</span>);</div><div class="line">		response.setContentType(<span class="string">"application/vnd.ms-excel; charset=utf-8"</span>) ;</div><div class="line">		OutputStream out = response.getOutputStream() ;</div><div class="line">		wb.write(out) ;</div><div class="line">		out.flush();</div><div class="line">		out.close();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">	&#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实springMVC和Struts2的原理上是一样的，只是Struts2是才去配置文件的方式。首先是使用<code>createExcel()</code>这个方法来生成Excel并返回，最后利用r<code>response</code>即可向前台输出Excel，这种方法是通用的，也可以试用与<code>Servlet、Struts2等</code>。我们只需要在<code>response</code>的头信息中设置相应的输出信息即可。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不管是使用<code>Struts2</code>，还是使用<code>SpringMVC</code>究其根本都是使用的<code>response</code>，所以只要我们把<code>response</code>理解透了不管是下载图片、world、Excel还是其他什么文件都是一样的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;相信很多朋友在实际工作中都会要将数据导出成Excel的需求，通常这样的做法有两种。&lt;br&gt;一是采用JXL来生成Excel，之后保存到服务器，然后在生成页面之后下载该文件。&lt;br&gt;二是使用POI来生成Excel，之后使用Stream的方式输出到前台直接下载&lt;code&gt;(ps:当然也可以生成到服务器中再下载。)&lt;/code&gt;。这里我们讨论第二种。&lt;br&gt;&lt;em&gt;至于两种方式的优缺点请自行&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Struts2的方式&quot;&gt;&lt;a href=&quot;#Struts2的方式&quot; class=&quot;headerlink&quot; title=&quot;Struts2的方式&quot;&gt;&lt;/a&gt;Struts2的方式&lt;/h1&gt;&lt;p&gt;通常我会将已经生成好的&lt;code&gt;HSSFWorkbook&lt;/code&gt;放到一个&lt;code&gt;InputStream&lt;/code&gt;中，然后再到xml配置文件中将返回结果更改为&lt;code&gt;stream&lt;/code&gt;的方式。如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;responseData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(HSSFWorkbook wb)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	ByteArrayOutputStream baos = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayOutputStream();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	wb.write(baos);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	baos.flush();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;[] aa = baos.toByteArray();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	excelStream = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ByteArrayInputStream(aa, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, aa.length);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	baos.close();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="日常记录" scheme="http://crossoverJie.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="poi" scheme="http://crossoverJie.github.io/tags/poi/"/>
    
  </entry>
  
  <entry>
    <title>日常记录（一）MySQL被锁解决方案</title>
    <link href="http://crossoverJie.github.io/2016/06/05/normal-skill1/"/>
    <id>http://crossoverJie.github.io/2016/06/05/normal-skill1/</id>
    <published>2016-06-04T16:04:56.000Z</published>
    <updated>2016-06-15T17:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>由于前段时间为了让部署在Linux中的项目访问另一台服务器的MySQL，经过各种折腾就把<code>root</code>用户给弄出问题了，导致死活登不上<code>PS:Linux中的项目还是没有连上。。</code>(这是后话了。)。经过各种查阅资料终于找到解决方法了。</p>
</blockquote>
<p>报错如下：<br><code>Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password:YES)</code></p>
<hr>
<h1 id="关闭MySQL服务，修改MySQL初始文件"><a href="#关闭MySQL服务，修改MySQL初始文件" class="headerlink" title="关闭MySQL服务，修改MySQL初始文件"></a>关闭MySQL服务，修改MySQL初始文件</h1><p>打开MySQL目录下的<code>my-default.ini</code>文件，如图：<br><img src="http://i.imgur.com/eUDlxik.png" alt=""><br>在最后一行加入<code>skip-grant-tables</code>之后保存。<br>然后重启MySQL服务。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h1 id="用命令行登录MySQL修改ROOT账号密码"><a href="#用命令行登录MySQL修改ROOT账号密码" class="headerlink" title="用命令行登录MySQL修改ROOT账号密码"></a>用命令行登录MySQL修改ROOT账号密码</h1><p>用命令行登录MySQL输入<code>mysql -uroot -p</code>,不用输入密码，直接敲回车即可进入。如下图：<br><img src="http://i.imgur.com/pENPn4Y.png" alt=""><br>之后执行以下语句修改ROOT用户密码：</p>
<ul>
<li><code>use mysql;</code></li>
<li><code>update user set password=PASSWORD(&quot;你的密码&quot;) where user=&#39;root&#39;;</code></li>
</ul>
<h1 id="还原my-default-ini文件"><a href="#还原my-default-ini文件" class="headerlink" title="还原my-default.ini文件"></a>还原<code>my-default.ini</code>文件</h1><p>最后还原配置文件，之后重启MySQL服务即可正常登录了。<br><img src="http://i.imgur.com/rZO0ghR.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于前段时间为了让部署在Linux中的项目访问另一台服务器的MySQL，经过各种折腾就把&lt;code&gt;root&lt;/code&gt;用户给弄出问题了，导致死活登不上&lt;code&gt;PS:Linux中的项目还是没有连上。。&lt;/code&gt;(这是后话了。)。经过各种查阅资料终于找到解决方法了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;报错如下：&lt;br&gt;&lt;code&gt;Access denied for user &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (using password:YES)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;关闭MySQL服务，修改MySQL初始文件&quot;&gt;&lt;a href=&quot;#关闭MySQL服务，修改MySQL初始文件&quot; class=&quot;headerlink&quot; title=&quot;关闭MySQL服务，修改MySQL初始文件&quot;&gt;&lt;/a&gt;关闭MySQL服务，修改MySQL初始文件&lt;/h1&gt;&lt;p&gt;打开MySQL目录下的&lt;code&gt;my-default.ini&lt;/code&gt;文件，如图：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/eUDlxik.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;在最后一行加入&lt;code&gt;skip-grant-tables&lt;/code&gt;之后保存。&lt;br&gt;然后重启MySQL服务。&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="日常记录" scheme="http://crossoverJie.github.io/categories/%E6%97%A5%E5%B8%B8%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="MySQL" scheme="http://crossoverJie.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>java多线程（二）有返回值的多线程</title>
    <link href="http://crossoverJie.github.io/2016/05/27/java-thread2/"/>
    <id>http://crossoverJie.github.io/2016/05/27/java-thread2/</id>
    <published>2016-05-27T09:39:16.000Z</published>
    <updated>2016-06-16T15:24:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我们使用多线程要么是继承<code>Thread</code>类，要么是实现<code>Runnable</code>接口，然后重写一下<code>run()</code>方法即可。<br>但是只有的话如果有死锁、对共享资源的访问和随时监控线程状态就不行了，于是在Java5之后就有了Callable接口。</p>
<hr>
<h1 id="简单的实现有返回值的线程"><a href="#简单的实现有返回值的线程" class="headerlink" title="简单的实现有返回值的线程"></a>简单的实现有返回值的线程</h1><p>代码如下：<br><code>CallableFuture</code>类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableFuture</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//创建一个线程池</span></div><div class="line">		ExecutorService pool = Executors.newFixedThreadPool(<span class="number">3</span>) ;</div><div class="line">		</div><div class="line">		<span class="comment">//创建三个有返回值的任务</span></div><div class="line">		CallableTest2 c1 = <span class="keyword">new</span> CallableTest2(<span class="string">"线程1"</span>) ;</div><div class="line">		CallableTest2 c2 = <span class="keyword">new</span> CallableTest2(<span class="string">"线程2"</span>) ;</div><div class="line">		CallableTest2 c3 = <span class="keyword">new</span> CallableTest2(<span class="string">"线程3"</span>) ;</div><div class="line">		</div><div class="line">		Future f1 = pool.submit(c1) ;</div><div class="line">		Future f2 = pool.submit(c2) ;</div><div class="line">		Future f3 = pool.submit(c3) ;</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			System.out.println(f1.get().toString());</div><div class="line">			System.out.println(f2.get().toString());</div><div class="line">			System.out.println(f3.get().toString());</div><div class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;<span class="keyword">finally</span>&#123;</div><div class="line">			pool.shutdown();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>·CallableTest2·类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableTest2</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name ;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CallableTest2</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">return</span> name+<span class="string">"返回了东西"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">线程1返回了东西</div><div class="line">线程2返回了东西</div><div class="line">线程3返回了东西</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是一个简单的例子，需要了解更多详情可以去看那几个类的API。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前我们使用多线程要么是继承&lt;code&gt;Thread&lt;/code&gt;类，要么是实现&lt;code&gt;Runnable&lt;/code&gt;接口，然后重写一下&lt;code&gt;run()&lt;/code&gt;方法即可。&lt;br&gt;但是只有的话如果有死锁、对共享资源的访问和随时监控线程状态就不行了，于是在Java5之后就有了Callable接口。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;简单的实现有返回值的线程&quot;&gt;&lt;a href=&quot;#简单的实现有返回值的线程&quot; class=&quot;headerlink&quot; title=&quot;简单的实现有返回值的线程&quot;&gt;&lt;/a&gt;简单的实现有返回值的线程&lt;/h1&gt;&lt;p&gt;代码如下：&lt;br&gt;&lt;code&gt;CallableFuture&lt;/code&gt;类&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; top.crosssoverjie.study.Thread;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.ExecutionException;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.ExecutorService;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Executors;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.concurrent.Future;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CallableFuture&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//创建一个线程池&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		ExecutorService pool = Executors.newFixedThreadPool(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;//创建三个有返回值的任务&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		CallableTest2 c1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CallableTest2(&lt;span class=&quot;string&quot;&gt;&quot;线程1&quot;&lt;/span&gt;) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		CallableTest2 c2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CallableTest2(&lt;span class=&quot;string&quot;&gt;&quot;线程2&quot;&lt;/span&gt;) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		CallableTest2 c3 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; CallableTest2(&lt;span class=&quot;string&quot;&gt;&quot;线程3&quot;&lt;/span&gt;) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Future f1 = pool.submit(c1) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Future f2 = pool.submit(c2) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		Future f3 = pool.submit(c3) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(f1.get().toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(f2.get().toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			System.out.println(f3.get().toString());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ExecutionException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			pool.shutdown();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java多线程" scheme="http://crossoverJie.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="Callable" scheme="http://crossoverJie.github.io/tags/Callable/"/>
    
      <category term="ExecutorService" scheme="http://crossoverJie.github.io/tags/ExecutorService/"/>
    
      <category term="Future" scheme="http://crossoverJie.github.io/tags/Future/"/>
    
      <category term="Executors" scheme="http://crossoverJie.github.io/tags/Executors/"/>
    
  </entry>
  
  <entry>
    <title>让百度和google收录我们的网站</title>
    <link href="http://crossoverJie.github.io/2016/05/19/baidu-google/"/>
    <id>http://crossoverJie.github.io/2016/05/19/baidu-google/</id>
    <published>2016-05-19T08:07:44.000Z</published>
    <updated>2016-06-15T18:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>花了几天时间终于把这个看似高大上的博客搞好了，但是发现只能通过在地址栏输入地址进行访问，这很明显和我装X装到底的性格，于是乎在查阅了嘟爷的博客，和我各种百度终于搞出来了。</p>
<hr>
<h1 id="让谷歌收录"><a href="#让谷歌收录" class="headerlink" title="让谷歌收录"></a>让谷歌收录</h1><p>让谷歌收录还是比较简单，首先我们肯定是要翻墙的(这个就不仔细说了，具体百度。)<br>由于我这里突然登不上google账号了，所以下次补充截图。同体来说就是以下步骤：</p>
<blockquote>
<ul>
<li>下载google的html验证文件放到网站的根目录，使google能够访问得到。</li>
<li>在谷歌站长工具里加上自己的站点地图。<a id="more"></a>
</li>
</ul>
</blockquote>
<hr>
<h1 id="创建站点地图"><a href="#创建站点地图" class="headerlink" title="创建站点地图"></a>创建站点地图</h1><p>站点地图是一种文件，可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎，以便更加智能的抓取你的网站信息。<br>首先我们要为Hexo安装谷歌和百度的插件(博主是用Hexo来搭建的博客)，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install hexo-generator-sitemap --save</div><div class="line">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure></p>
<p>在博客的根目录中的<code>_config.yml</code>文件中加入以下内容：<br><img src="http://i.imgur.com/CUrNUtM.png" alt=""><br>之后部署上去之后如果在地址栏后面加上站点地图如下的话表示部署成功：<br><img src="http://i.imgur.com/AAujKdL.png" alt=""><br><img src="http://i.imgur.com/4K6JvJ4.png" alt=""></p>
<hr>
<h1 id="让百度收录"><a href="#让百度收录" class="headerlink" title="让百度收录"></a>让百度收录</h1><p>有三种方式可以让百度收录我们的网站。<br>第一种：主动推送<br>我用Java写了一个小程序，可以手工的自己推送地址给百度。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crossoverjie.post;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.BufferedReader;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStreamReader;</div><div class="line"><span class="keyword">import</span> java.io.PrintWriter;</div><div class="line"><span class="keyword">import</span> java.net.URL;</div><div class="line"><span class="keyword">import</span> java.net.URLConnection;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Post</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">					  </div><div class="line">		String url = <span class="string">"http://data.zz.baidu.com/urls?site=crossoverjie.top&amp;token=1002EzhDReuy34dq"</span>;<span class="comment">// 网站的服务器连接</span></div><div class="line">		String[] param = &#123; </div><div class="line">			<span class="comment">// 需要推送的网址</span></div><div class="line"><span class="comment">//			"http://crossoverjie.top/tags",</span></div><div class="line"><span class="comment">//			"http://crossoverjie.top/categories",</span></div><div class="line">			<span class="comment">//"http://crossoverjie.top/about/"</span></div><div class="line">			<span class="string">"http://crossoverjie.top/2016/05/14/java-thread1"</span></div><div class="line">			</div><div class="line">		&#125;;</div><div class="line">		String json = Post(url, param);<span class="comment">// 执行推送方法</span></div><div class="line">		System.out.println(<span class="string">"结果是"</span> + json); <span class="comment">// 打印推送结果</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 百度链接实时推送</div><div class="line">	 * </div><div class="line">	 * <span class="doctag">@param</span> PostUrl</div><div class="line">	 * <span class="doctag">@param</span> Parameters</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">Post</span><span class="params">(String PostUrl, String[] Parameters)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">null</span> == PostUrl || <span class="keyword">null</span> == Parameters || Parameters.length == <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		String result = <span class="string">""</span>;</div><div class="line">		PrintWriter out = <span class="keyword">null</span>;</div><div class="line">		BufferedReader in = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// 建立URL之间的连接</span></div><div class="line">			URLConnection conn = <span class="keyword">new</span> URL(PostUrl).openConnection();</div><div class="line">			<span class="comment">// 设置通用的请求属性</span></div><div class="line">			conn.setRequestProperty(<span class="string">"Host"</span>, <span class="string">"data.zz.baidu.com"</span>);</div><div class="line">			conn.setRequestProperty(<span class="string">"User-Agent"</span>, <span class="string">"curl/7.12.1"</span>);</div><div class="line">			conn.setRequestProperty(<span class="string">"Content-Length"</span>, <span class="string">"83"</span>);</div><div class="line">			conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"text/plain"</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 发送POST请求必须设置如下两行</span></div><div class="line">			conn.setDoInput(<span class="keyword">true</span>);</div><div class="line">			conn.setDoOutput(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">			<span class="comment">// 获取conn对应的输出流</span></div><div class="line">			out = <span class="keyword">new</span> PrintWriter(conn.getOutputStream());</div><div class="line">			<span class="comment">// 发送请求参数</span></div><div class="line">			String param = <span class="string">""</span>;</div><div class="line">			<span class="keyword">for</span> (String s : Parameters) &#123;</div><div class="line">				param += s + <span class="string">"\n"</span>;</div><div class="line">			&#125;</div><div class="line">			out.print(param.trim());</div><div class="line">			<span class="comment">// 进行输出流的缓冲</span></div><div class="line">			out.flush();</div><div class="line">			<span class="comment">// 通过BufferedReader输入流来读取Url的响应</span></div><div class="line">			in = <span class="keyword">new</span> BufferedReader(</div><div class="line">					<span class="keyword">new</span> InputStreamReader(conn.getInputStream()));</div><div class="line">			String line;</div><div class="line">			<span class="keyword">while</span> ( (line = in.readLine()) != <span class="keyword">null</span>) &#123;</div><div class="line">				result += line;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			System.out.println(<span class="string">"发送post请求出现异常！"</span> + e);</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125; <span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span> (out != <span class="keyword">null</span>) &#123;</div><div class="line">					out.close();</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</div><div class="line">					in.close();</div><div class="line">				&#125;</div><div class="line"></div><div class="line">			&#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">				ex.printStackTrace();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行之后结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">结果是&#123;<span class="string">"remain"</span>:<span class="number">499</span>,<span class="string">"success"</span>:<span class="number">1</span>&#125;</div></pre></td></tr></table></figure></p>
<p><code>remain</code>表示还有多少可以推送，我这里表示还有499条。<code>success</code>表示成功推送了多少条链接，我这里表示成功推送了一条链接。</p>
<p>第二种是主动推送，可以按照百度的教程进行配置：<br><img src="http://i.imgur.com/hDU8NPb.png" alt=""></p>
<p>第三种就是配置站点地图了，按照之前将的将站点地图安装到项目中，参照我的配置即可：<br><img src="http://i.imgur.com/20Sh5GR.png" alt=""><br>如果能像我这个一样状态正常，能获取到URL数量就表示成功了。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在整个过程中不是我黑百度，百度的效率真是太低了。我头一天在google提交上去第二天就能收到了，百度是我提交了大概一周多才给我收录进去，这当然肯定也和我的内容有关系。<br><img src="http://i.imgur.com/41EH6bE.png" alt=""><br><img src="http://i.imgur.com/cyVNJTg.png" alt=""><br><img src="http://i.imgur.com/L4q7lq1.png" alt=""><br><img src="http://i.imgur.com/mVnjUDa.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;花了几天时间终于把这个看似高大上的博客搞好了，但是发现只能通过在地址栏输入地址进行访问，这很明显和我装X装到底的性格，于是乎在查阅了嘟爷的博客，和我各种百度终于搞出来了。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;让谷歌收录&quot;&gt;&lt;a href=&quot;#让谷歌收录&quot; class=&quot;headerlink&quot; title=&quot;让谷歌收录&quot;&gt;&lt;/a&gt;让谷歌收录&lt;/h1&gt;&lt;p&gt;让谷歌收录还是比较简单，首先我们肯定是要翻墙的(这个就不仔细说了，具体百度。)&lt;br&gt;由于我这里突然登不上google账号了，所以下次补充截图。同体来说就是以下步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;下载google的html验证文件放到网站的根目录，使google能够访问得到。&lt;/li&gt;
&lt;li&gt;在谷歌站长工具里加上自己的站点地图。
    
    </summary>
    
      <category term="小技巧" scheme="http://crossoverJie.github.io/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="baidu" scheme="http://crossoverJie.github.io/tags/baidu/"/>
    
      <category term="google" scheme="http://crossoverJie.github.io/tags/google/"/>
    
  </entry>
  
  <entry>
    <title>java多线程（一）多线程基础</title>
    <link href="http://crossoverJie.github.io/2016/05/14/java-thread1/"/>
    <id>http://crossoverJie.github.io/2016/05/14/java-thread1/</id>
    <published>2016-05-14T12:09:10.000Z</published>
    <updated>2016-06-16T15:23:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要讲解java多线程的基础，以及一些常用方法。关于线程同步、ExecutorService框架我会放到后续的文章进行讲解。</p>
<hr>
<h1 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程简单的来说就是在内存中运行的应用程序，一个进程可以启动多个线程。<br>比如在windows中一个运行EXE文件就是一个进程。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>同一个线程中的进程共用相同的地址空间，同时共享进程所拥有的内存和其他资源。<br><a id="more"></a></p>
<hr>
<h1 id="线程Demo-继承Thread类"><a href="#线程Demo-继承Thread类" class="headerlink" title="线程Demo-继承Thread类"></a>线程Demo-继承Thread类</h1><p>首先我们我们继承<code>java.lang.Thread</code>类来创建线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"主线程ID是："</span> + Thread.currentThread().getId());</div><div class="line">		MyThread my = <span class="keyword">new</span> MyThread(<span class="string">"线程1"</span>);</div><div class="line">		my.start() ;</div><div class="line">		</div><div class="line">		MyThread my2 = <span class="keyword">new</span> MyThread(<span class="string">"线程2"</span>) ;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 这里直接调用my2的run()方法。</div><div class="line">		 */</div><div class="line">		my2.run() ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"名字："</span> + name + <span class="string">"的线程ID是="</span></div><div class="line">				+ Thread.currentThread().getId());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">主线程ID是：<span class="number">1</span></div><div class="line">名字：线程<span class="number">2</span>的线程ID是=<span class="number">1</span></div><div class="line">名字：线程<span class="number">1</span>的线程ID是=<span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>由输出结果我们可以得出以下结论：</p>
<blockquote>
<ul>
<li>my和my2的线程ID不相同，my2和主线程ID相同。说明直接调用<code>run()</code>方法不会创建新的线程，而是在主线程中直接调用的<code>run()</code>方法,和普通的方法调用没有区别。</li>
<li>虽然my的<code>start()</code>方法是在my2的<code>run()</code>方法之前调用，但是却是后输出内容，说明新建的线程并不会影响主线程的执行。</li>
</ul>
</blockquote>
<hr>
<h1 id="线程Demo-实现Runnable接口"><a href="#线程Demo-实现Runnable接口" class="headerlink" title="线程Demo-实现Runnable接口"></a>线程Demo-实现Runnable接口</h1><p>除了继承<code>java.lang.Thread</code>类之外，我们还可以实现<code>java.lang.Runnable</code>接口来创建线程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunnable</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"主线程的线程ID是"</span>+Thread.currentThread().getId());</div><div class="line">		MyThread2 my = <span class="keyword">new</span> MyThread2(<span class="string">"线程1"</span>) ;</div><div class="line">		Thread t = <span class="keyword">new</span> Thread(my) ;</div><div class="line">		t.start() ;</div><div class="line">		</div><div class="line">		MyThread2 my2 = <span class="keyword">new</span> MyThread2(<span class="string">"线程2"</span>) ;</div><div class="line">		Thread t2 = <span class="keyword">new</span> Thread(my2) ;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 方法调用，并不会创建线程，依然是主线程</div><div class="line">		 */</div><div class="line">		t2.run() ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> String name ;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread2</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name ;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"线程"</span>+name+<span class="string">"的线程ID是"</span>+Thread.currentThread().getId());</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">主线程的线程ID是<span class="number">1</span></div><div class="line">线程线程<span class="number">2</span>的线程ID是<span class="number">1</span></div><div class="line">线程线程<span class="number">1</span>的线程ID是<span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>notes:</p>
<blockquote>
<ul>
<li>实现Runnable的方式需要将实现Runnable接口的类作为参数传递给Thread，然后通过Thread类调用<code>Start()</code>方法来创建线程。</li>
<li>这两种方式都可以来创建线程，至于选择哪一种要看自己的需求。直接继承Thread类的话代码要简洁一些，但是由于java只支持单继承，所以如果要继承其他类的同时需要实现线程那就只能实现Runnable接口了，这里更推荐实现Runnable接口。</li>
</ul>
</blockquote>
<p>实际上如果我们查看Thread类的源码我们会发现Thread是实现了Runnable接口的：<br><img src="http://i.imgur.com/FLsghcS.png" alt="Thread源码"></p>
<hr>
<h1 id="线程中常用的方法"><a href="#线程中常用的方法" class="headerlink" title="线程中常用的方法"></a>线程中常用的方法</h1><table>
<thead>
<tr>
<th>序号</th>
<th style="text-align:left">方法</th>
<th style="text-align:left">介绍</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td style="text-align:left"><code>public void start()</code></td>
<td style="text-align:left">使该线程执行，java虚拟机会调用该线程的<code>run()</code>方法。</td>
</tr>
<tr>
<td>2</td>
<td style="text-align:left"><code>public final void setName(String name)</code></td>
<td style="text-align:left">修改线程名称。</td>
</tr>
<tr>
<td>3</td>
<td style="text-align:left"><code>public final void setPriority(int privority)</code></td>
<td style="text-align:left">修改线程的优先级。</td>
</tr>
<tr>
<td>4</td>
<td style="text-align:left"><code>public final void setDaemon(false on)</code></td>
<td style="text-align:left">将该线程标记为守护线程或用户线程，当正在运行线程都是守护线程时，java虚拟机退出，该方法必须在启动线程前调用。</td>
</tr>
<tr>
<td>5</td>
<td style="text-align:left"><code>public final void join(long mills)</code></td>
<td style="text-align:left">等待该线程的终止时间最长为mills毫秒。</td>
</tr>
<tr>
<td>6</td>
<td style="text-align:left"><code>public void interrupt()</code></td>
<td style="text-align:left">中断线程。</td>
</tr>
<tr>
<td>7</td>
<td style="text-align:left"><code>public static boolean isAlive()</code></td>
<td style="text-align:left">测试线程是否处于活动状态。如果该线程已经启动尚未终止，则为活动状态。</td>
</tr>
<tr>
<td>8</td>
<td style="text-align:left"><code>public static void yield()</code></td>
<td style="text-align:left">暂停当前线程执行的对象，并执行其他线程。</td>
</tr>
<tr>
<td>9</td>
<td style="text-align:left"><code>public static void sleep(long mills)</code></td>
<td style="text-align:left">在指定毫秒数内，让当前执行的线程休眠(暂停)。</td>
</tr>
<tr>
<td>10</td>
<td style="text-align:left"><code>public static Thread currentThread()</code></td>
<td style="text-align:left">返回当前线程的引用。</td>
</tr>
</tbody>
</table>
<h2 id="方法详解-public-static-void-sleep-long-mills"><a href="#方法详解-public-static-void-sleep-long-mills" class="headerlink" title="方法详解- public static void sleep(long mills)"></a>方法详解- <code>public static void sleep(long mills)</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">10</span> ;</div><div class="line">	<span class="keyword">private</span> Object ob = <span class="keyword">new</span> Object() ;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		TestSleep t = <span class="keyword">new</span> TestSleep() ;</div><div class="line">		MyThread3 thread1 = t.new MyThread3() ;</div><div class="line">		MyThread3 thread2 = t.new MyThread3() ;</div><div class="line">		thread1.start() ;</div><div class="line">		thread2.start() ;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">synchronized</span> (ob) &#123;</div><div class="line">				i++ ;</div><div class="line">				System.out.println(<span class="string">"i的值："</span>+i);</div><div class="line">				System.out.println(<span class="string">"线程："</span>+Thread.currentThread().getName()+<span class="string">"进入休眠状态"</span>);</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					Thread.currentThread().sleep(<span class="number">1000</span>) ;</div><div class="line">				&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">					e.printStackTrace();</div><div class="line">				&#125;</div><div class="line">				System.out.println(<span class="string">"线程："</span>+Thread.currentThread().getName()+<span class="string">"休眠结束"</span>);</div><div class="line">				i++;</div><div class="line">				System.out.println(<span class="string">"i的值&gt;："</span>+i);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">i的值：<span class="number">11</span></div><div class="line">线程：Thread-<span class="number">0</span>进入休眠状态</div><div class="line">线程：Thread-<span class="number">0</span>休眠结束</div><div class="line">i的值&gt;：<span class="number">12</span></div><div class="line">i的值：<span class="number">13</span></div><div class="line">线程：Thread-<span class="number">1</span>进入休眠状态</div><div class="line">线程：Thread-<span class="number">1</span>休眠结束</div><div class="line">i的值&gt;：<span class="number">14</span></div></pre></td></tr></table></figure></p>
<p>由输出结果我们可以得出：</p>
<blockquote>
<ul>
<li>当Thread0进入休眠状态时，Thread1并没有继续执行，而是等待Thread0休眠结束释放了对象锁，Thread1才继续执行。<br>当调用<code>sleep()</code>方法时，必须捕获异常或者向上层抛出异常。当线程休眠时间满时，并不一定会马上执行，因为此时有可能CPU正在执行其他的任务，所以调用了<code>sleep()</code>方法相当于线程进入了阻塞状态。</li>
</ul>
</blockquote>
<h2 id="方法详解-public-static-void-yield"><a href="#方法详解-public-static-void-yield" class="headerlink" title="方法详解- public static void yield()"></a>方法详解- <code>public static void yield()</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testyield</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		MyThread4 my = <span class="keyword">new</span> MyThread4() ;</div><div class="line">		my.start() ;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread4</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">long</span> open = System.currentTimeMillis();</div><div class="line">		<span class="keyword">int</span> count= <span class="number">0</span> ;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">1000000</span>;i++)&#123;</div><div class="line">			count= count+(i+<span class="number">1</span>);</div><div class="line"><span class="comment">//			Thread.yield() ;</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">		System.out.println(<span class="string">"用时："</span>+(end-open)+<span class="string">"毫秒"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:<br><code>用时：1毫秒</code><br>如果将 Thread.yield()注释取消掉，输出结果:<br><code>用时：116毫秒</code></p>
<blockquote>
<ul>
<li>调用<code>yield()</code>方法是为了让当前线程交出CPU权限，让CPU去执行其他线程。它和<code>sleep()</code>方法类似同样是不会释放锁。但是<code>yield()</code>不能控制具体的交出CUP的时间。并且它只能让相同优先级的线程获得CPU执行时间的机会。</li>
<li>调用<code>yield()</code>方法不会让线程进入阻塞状态，而是进入就绪状态，它只需要等待重新获取CPU的时间，这一点和<code>sleep()</code>方法是不一样的。</li>
</ul>
</blockquote>
<h2 id="方法详解-public-final-void-join"><a href="#方法详解-public-final-void-join" class="headerlink" title="方法详解- public final void join()"></a>方法详解- <code>public final void join()</code></h2><p>在很多情况下我们需要在子线程中执行大量的耗时任务，但是我们主线程又必须得等待子线程执行完毕之后才能结束，这就需要用到 <code>join()</code>方法了。<code>join()</code>方法的作用是等待线程对象销毁，如果子线程执行了这个方法，那么主线程就要等待子线程执行完毕之后才会销毁，请看下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study.Thread;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testjoin</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">		<span class="keyword">new</span> MyThread5(<span class="string">"t1"</span>).start() ;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			<span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</div><div class="line">				MyThread5 my =<span class="keyword">new</span> MyThread5(<span class="string">"t2"</span>) ;</div><div class="line">				my.start() ;</div><div class="line">				my.join() ;</div><div class="line">			&#125;</div><div class="line">			System.out.println(<span class="string">"main当前线程："</span>+Thread.currentThread().getName()+<span class="string">" "</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread5</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">MyThread5</span><span class="params">(String name)</span></span>&#123;</div><div class="line">		<span class="keyword">super</span>(name) ;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">			System.out.println(<span class="string">"当前线程："</span>+Thread.currentThread().getName()+<span class="string">" "</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">main当前线程：main <span class="number">0</span></div><div class="line">当前线程：t1 <span class="number">0</span></div><div class="line">当前线程：t1 <span class="number">1</span></div><div class="line">main当前线程：main <span class="number">1</span></div><div class="line">当前线程：t1 <span class="number">2</span></div><div class="line">main当前线程：main <span class="number">2</span></div><div class="line">当前线程：t1 <span class="number">3</span></div><div class="line">main当前线程：main <span class="number">3</span></div><div class="line">当前线程：t1 <span class="number">4</span></div><div class="line">main当前线程：main <span class="number">4</span></div><div class="line">当前线程：t2 <span class="number">0</span></div><div class="line">当前线程：t2 <span class="number">1</span></div><div class="line">当前线程：t2 <span class="number">2</span></div><div class="line">当前线程：t2 <span class="number">3</span></div><div class="line">当前线程：t2 <span class="number">4</span></div><div class="line">main当前线程：main <span class="number">5</span></div><div class="line">main当前线程：main <span class="number">6</span></div><div class="line">main当前线程：main <span class="number">7</span></div><div class="line">main当前线程：main <span class="number">8</span></div><div class="line">main当前线程：main <span class="number">9</span></div></pre></td></tr></table></figure></p>
<p>如果我们把<code>join()</code>方法注释掉之后：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">main当前线程：main <span class="number">0</span></div><div class="line">当前线程：t1 <span class="number">0</span></div><div class="line">main当前线程：main <span class="number">1</span></div><div class="line">当前线程：t1 <span class="number">1</span></div><div class="line">main当前线程：main <span class="number">2</span></div><div class="line">当前线程：t1 <span class="number">2</span></div><div class="line">main当前线程：main <span class="number">3</span></div><div class="line">当前线程：t1 <span class="number">3</span></div><div class="line">main当前线程：main <span class="number">4</span></div><div class="line">当前线程：t1 <span class="number">4</span></div><div class="line">main当前线程：main <span class="number">5</span></div><div class="line">main当前线程：main <span class="number">6</span></div><div class="line">main当前线程：main <span class="number">7</span></div><div class="line">main当前线程：main <span class="number">8</span></div><div class="line">main当前线程：main <span class="number">9</span></div><div class="line">当前线程：t2 <span class="number">0</span></div><div class="line">当前线程：t2 <span class="number">1</span></div><div class="line">当前线程：t2 <span class="number">2</span></div><div class="line">当前线程：t2 <span class="number">3</span></div><div class="line">当前线程：t2 <span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>由上我们可以得出以下结论：</p>
<blockquote>
<ul>
<li>在使用了<code>join()</code>方法之后主线程会等待子线程结束之后才会结束。</li>
</ul>
</blockquote>
<h2 id="方法详解-setDaemon-boolean-on-getDaemon"><a href="#方法详解-setDaemon-boolean-on-getDaemon" class="headerlink" title="方法详解- setDaemon(boolean on),getDaemon()"></a>方法详解- <code>setDaemon(boolean on)</code>,<code>getDaemon()</code></h2><p>用来设置是否为守护线程和判断是否为守护线程。<br>notes：</p>
<blockquote>
<ul>
<li>守护线程依赖于创建他的线程，而用户线程则不需要。如果在<code>main()</code>方法中创建了一个守护线程，那么当main方法执行完毕之后守护线程也会关闭。而用户线程则不会，在JVM中垃圾收集器的线程就是守护线程。</li>
</ul>
</blockquote>
<hr>
<h1 id="优雅的终止线程"><a href="#优雅的终止线程" class="headerlink" title="优雅的终止线程"></a>优雅的终止线程</h1><p>有三种方法可以终止线程，如下：</p>
<ol>
<li>使用退出标识，使线程正常的退出，也就是当<code>run()</code>方法完成后线程终止。</li>
<li><em>使用<code>stop()</code>方法强行关闭，这个方法现在已经被废弃，不推荐使用</em></li>
<li>使用<code>interrupt()</code>方法终止线程。</li>
</ol>
<p>具体的实现代码我将在下一篇博文中将到。。</p>
<h1 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h1><p>在操作系统中线程是分优先级的，优先级高的线程CPU将会提供更多的资源，在java中我们可以通过<code>setPriority(int newPriority)</code>方法来更改线程的优先级。<br>在java中分为1~10这个十个优先级，设置不在这个范围内的优先级将会抛出<code>IllegalArgumentException</code>异常。<br>java中有三个预设好的优先级：</p>
<blockquote>
<ul>
<li><code>public final static int MIN_PRIORITY = 1;</code></li>
<li><code>public final static int NORM_PRIORITY = 5;</code></li>
<li><code>public final static int MAX_PRIORITY = 10;</code></li>
</ul>
</blockquote>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<ul>
<li><a href="http://blog.csdn.net/anhuidelinger/article/details/11746365" target="_blank" rel="external">如何终止线程</a></li>
<li><a href="http://www.mamicode.com/info-detail-517008.html" target="_blank" rel="external">java多线程学习</a></li>
</ul>
</blockquote>
<h1 id="java多线程思维图"><a href="#java多线程思维图" class="headerlink" title="java多线程思维图"></a>java多线程思维图</h1><p><img src="http://i.imgur.com/PCfshMD.png" alt=""></p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是我总结的java多线程基础知识，后续会补充线程关闭、线程状态、线程同步和有返回结果的多线程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文主要讲解java多线程的基础，以及一些常用方法。关于线程同步、ExecutorService框架我会放到后续的文章进行讲解。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;进程与线程的区别&quot;&gt;&lt;a href=&quot;#进程与线程的区别&quot; class=&quot;headerlink&quot; title=&quot;进程与线程的区别&quot;&gt;&lt;/a&gt;进程与线程的区别&lt;/h1&gt;&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进程&lt;/h2&gt;&lt;p&gt;进程简单的来说就是在内存中运行的应用程序，一个进程可以启动多个线程。&lt;br&gt;比如在windows中一个运行EXE文件就是一个进程。&lt;/p&gt;
&lt;h2 id=&quot;线程&quot;&gt;&lt;a href=&quot;#线程&quot; class=&quot;headerlink&quot; title=&quot;线程&quot;&gt;&lt;/a&gt;线程&lt;/h2&gt;&lt;p&gt;同一个线程中的进程共用相同的地址空间，同时共享进程所拥有的内存和其他资源。&lt;br&gt;
    
    </summary>
    
      <category term="java多线程" scheme="http://crossoverJie.github.io/categories/java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="Thread" scheme="http://crossoverJie.github.io/tags/Thread/"/>
    
      <category term="Runnable" scheme="http://crossoverJie.github.io/tags/Runnable/"/>
    
  </entry>
  
  <entry>
    <title>java笔记（一）java的反射机制</title>
    <link href="http://crossoverJie.github.io/2016/05/10/java-reflect/"/>
    <id>http://crossoverJie.github.io/2016/05/10/java-reflect/</id>
    <published>2016-05-10T13:01:36.000Z</published>
    <updated>2016-06-15T17:50:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>java反射机制指的是在java运行过程中，对于任意的类都可以知道他的所有属性以及方法，对于任意一个对象都可以任意的调用他的属性和方法，这种动态获取对象信息和动态调用对象方法的功能称为java反射机制，但是反射使用不当会造成很高的成本。</p>
<h1 id="简单实例"><a href="#简单实例" class="headerlink" title="简单实例"></a>简单实例</h1><hr>
<h2 id="反射获取类名称"><a href="#反射获取类名称" class="headerlink" title="反射获取类名称"></a>反射获取类名称</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflect</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Class&lt;Reflect&gt; c1 = Reflect.class;</div><div class="line">        System.out.println(c1.getName());</div><div class="line">        </div><div class="line">        Reflect r1 = <span class="keyword">new</span> Reflect() ;</div><div class="line">        Class&lt;Reflect&gt; c2 = (Class&lt;Reflect&gt;) r1.getClass() ;</div><div class="line">        System.out.println(c2.getName());</div><div class="line">        </div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;Reflect&gt; c3 = (Class&lt;Reflect&gt;) Class.forName(<span class="string">"top.crosssoverjie.study.Reflect"</span>);</div><div class="line">            System.out.println(c3.getName());</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">top.crosssoverjie.study.Reflect</div><div class="line">top.crosssoverjie.study.Reflect</div><div class="line">top.crosssoverjie.study.Reflect</div></pre></td></tr></table></figure>
<p>以上的 c1,c2,c3是完全一样的，他们都有一个统一的名称：叫做Reflect类的类类型。</p>
<hr>
<h1 id="反射的用处"><a href="#反射的用处" class="headerlink" title="反射的用处"></a>反射的用处</h1><h2 id="获取成员方法"><a href="#获取成员方法" class="headerlink" title="获取成员方法"></a>获取成员方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Method <span class="title">getDeclaredMethod</span><span class="params">(String name,Class&lt;?&gt;...parameterTypes)</span><span class="comment">//得到该类的所有方法，但是不包括父类的方法。</span></span></div><div class="line"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(String name,Class&lt;?&gt;...parameterTypes)</span><span class="comment">//获得该类的所有public方法，包括父类的。</span></div></pre></td></tr></table></figure>
<p>通过反射获取成员方法调用的实例:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> String name=<span class="string">"crossover"</span> ;</div><div class="line">	<span class="keyword">private</span> String msg ;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String msg)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.msg = msg;</div><div class="line">		System.out.println(name+<span class="string">"的描述是"</span>+msg);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String name ,String msg)</span></span>&#123;</div><div class="line">		System.out.println(name+<span class="string">"说："</span>+msg);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> msg;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.msg = msg;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//首先获取类类型</span></div><div class="line">			Class c1 = Class.forName(<span class="string">"top.crosssoverjie.study.Person"</span>) ;</div><div class="line">			</div><div class="line">			<span class="comment">//通过newInstance()方法生成一个实例</span></div><div class="line">			Object o1 = c1.newInstance() ;</div><div class="line">			</div><div class="line">			<span class="comment">//获取该类的say方法</span></div><div class="line">			Method m1 = c1.getMethod(<span class="string">"say"</span>, String.class,String.class) ;</div><div class="line">			</div><div class="line">			<span class="comment">//通过invoke方法调用该方法</span></div><div class="line"><span class="comment">//			m1.invoke(o1, "张三","你好啊") ;</span></div><div class="line">			</div><div class="line">			Method[] methods = c1.getDeclaredMethods() ;</div><div class="line"><span class="comment">//			for(Method m : methods)&#123;</span></div><div class="line"><span class="comment">//				System.out.println(m.getName());</span></div><div class="line"><span class="comment">//			&#125;</span></div><div class="line">			</div><div class="line">			Method[] methods2 = c1.getMethods() ;</div><div class="line">			<span class="keyword">for</span> (Method method : methods2) &#123;</div><div class="line">				System.out.println(method.getName());</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">张三说：你好啊</div></pre></td></tr></table></figure></p>
<p>所以我们只要知道类的全限定名就可以任意的调用里面的方法。</p>
<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Method[] methods = c1.getDeclaredMethods() ;</div><div class="line"><span class="keyword">for</span>(Method m : methods)&#123;</div><div class="line">	System.out.println(m.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">main</div><div class="line">getName</div><div class="line">setName</div><div class="line">say</div><div class="line">getMsg</div><div class="line">setMsg</div></pre></td></tr></table></figure></p>
<p>使用的还是之前那个Person类，所以这里只写了关键代码。这里输出的是Person的所有public方法。</p>
<p>如果我们调用<code>getMethods()</code>方法会是什么结果呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Method[] methods2 = c1.getMethods() ;</div><div class="line"><span class="keyword">for</span> (Method method : methods2) &#123;</div><div class="line">	System.out.println(method.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">main</div><div class="line">getName</div><div class="line">setName</div><div class="line">say</div><div class="line">getMsg</div><div class="line">setMsg</div><div class="line">wait</div><div class="line">wait</div><div class="line">wait</div><div class="line">hashCode</div><div class="line">getClass</div><div class="line">equals</div><div class="line">toString</div><div class="line">notify</div><div class="line">notifyAll</div></pre></td></tr></table></figure></p>
<p>这时我们会发现这里输出的结果会比刚才多得多，这时因为<code>getMethods()</code>方法返回的是包括父类的所有方法。</p>
<hr>
<h2 id="获取成员变量"><a href="#获取成员变量" class="headerlink" title="获取成员变量"></a>获取成员变量</h2><p>我们还可以通过反射来获取类包括父类的成员变量，主要方法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Field <span class="title">getDeclaredFiled</span><span class="params">(String name)</span><span class="comment">//获得该类所有的成员变量，但不包括父类的。</span></span></div><div class="line"><span class="keyword">public</span> Filed <span class="title">getFiled</span><span class="params">(String name)</span><span class="comment">//获得该类的所有的public变量，包括其父类的。</span></div></pre></td></tr></table></figure></p>
<p>还是按照之前例子中的Person类举例，他具有两个成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> String name=<span class="string">"crossover"</span> ;</div><div class="line"><span class="keyword">private</span> String msg ;</div></pre></td></tr></table></figure></p>
<p>我们可以通过以下方法来获取其中的成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Class c1 = Class.forName(<span class="string">"top.crosssoverjie.study.Person"</span>) ;</div><div class="line">Field field = c1.getDeclaredField(<span class="string">"name"</span>);<span class="comment">//获取该类所有的成员属性</span></div></pre></td></tr></table></figure></p>
<p>通过以下例子可以获取指定对象上此field的值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reflect</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			Class c1 = Class.forName(<span class="string">"top.crosssoverjie.study.Person"</span>);</div><div class="line">			Field field = c1.getDeclaredField(<span class="string">"name"</span>) ;</div><div class="line">			Object o1 = c1.newInstance() ;</div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * 由于Person类中的name变量是private修饰的，</div><div class="line">			 * 所以需要手动开启允许访问，是public修饰的就不需要设置了</div><div class="line">			 */</div><div class="line">			field.setAccessible(<span class="keyword">true</span>);</div><div class="line">			Object name = field.get(o1) ;</div><div class="line">			System.out.println(name);</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace() ;</div><div class="line">		&#125;</div><div class="line"><span class="comment">//		Class&lt;Reflect&gt; c1 = Reflect.class;</span></div><div class="line"><span class="comment">//		System.out.println(c1.getName());</span></div><div class="line"><span class="comment">//		</span></div><div class="line"><span class="comment">//		Reflect r1 = new Reflect() ;</span></div><div class="line"><span class="comment">//		Class&lt;Reflect&gt; c2 = (Class&lt;Reflect&gt;) r1.getClass() ;</span></div><div class="line"><span class="comment">//		System.out.println(c2.getName());</span></div><div class="line"><span class="comment">//		</span></div><div class="line"><span class="comment">//		try &#123;</span></div><div class="line"><span class="comment">//			Class&lt;Reflect&gt; c3 = (Class&lt;Reflect&gt;) Class.forName("top.crosssoverjie.study.Reflect");</span></div><div class="line"><span class="comment">//			System.out.println(c3.getName());</span></div><div class="line"><span class="comment">//		&#125; catch (ClassNotFoundException e) &#123;</span></div><div class="line"><span class="comment">//			e.printStackTrace();</span></div><div class="line"><span class="comment">//		&#125;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crossover</div></pre></td></tr></table></figure></p>
<p>我们也可以通过方法<code>getDeclaredFieds()</code>方法来获取所有的成员变量，返回是是一个<code>Field[]</code>数组，只需要遍历这个数组即可获所有的成员变量。例子如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Field[] fields = c1.getDeclaredFields() ;</div><div class="line"><span class="keyword">for</span>(Field f :fields)&#123;</div><div class="line">	System.out.println(f.getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name</div><div class="line">msg</div></pre></td></tr></table></figure></p>
<h2 id="获取构造方法"><a href="#获取构造方法" class="headerlink" title="获取构造方法"></a>获取构造方法</h2><p>可以通过以下两个方法来获取构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Constructor <span class="title">getDeclaredConstructor</span><span class="params">(Class&lt;?&gt;...parameterTypes)</span><span class="comment">//获取该类的所有构造方法，不包括父类的。</span></span></div><div class="line"><span class="keyword">public</span> Constructor <span class="title">getConstructor</span><span class="params">(Class&lt;?&gt;...parameterTypes)</span><span class="comment">//获取该类的所有public修饰的构造方法，包括父类的。</span></div></pre></td></tr></table></figure></p>
<p>在之前的Person类中有以下的构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String msg)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.msg = msg;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以通过以下方法来获取Person类的构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Constructor dc1 = c1.getDeclaredConstructor(String.class,String.class) ;</div></pre></td></tr></table></figure></p>
<p>具体代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Constructor dc1 = c1.getDeclaredConstructor(String.class,String.class) ;</div><div class="line">dc1.setAccessible(<span class="keyword">true</span>);</div><div class="line">dc1.newInstance(<span class="string">"小明"</span>,<span class="string">"很帅"</span>) ;</div></pre></td></tr></table></figure></p>
<p><code>dc1.newInstance(&quot;小明&quot;,&quot;很帅&quot;);</code>方法调用了Person类中的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String msg)</span> </span>&#123;</div><div class="line">	<span class="keyword">this</span>.name = name;</div><div class="line">	<span class="keyword">this</span>.msg = msg;</div><div class="line">	System.out.println(name+<span class="string">"的描述是"</span>+msg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个构造方法，如果不传参数的话，那么调用的就是无参的构造方法。输出结果为:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">小明的描述是很帅</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="通过反射了解集合泛型的本质"><a href="#通过反射了解集合泛型的本质" class="headerlink" title="通过反射了解集合泛型的本质"></a>通过反射了解集合泛型的本质</h2><p>通过以下例子程序可以看出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.crosssoverjie.study;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEssence</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">//声明两个list，一个有泛型，一个没有泛型</span></div><div class="line">		List list1 = <span class="keyword">new</span> ArrayList() ;</div><div class="line">		List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;() ;</div><div class="line">		</div><div class="line">		list2.add(<span class="string">"你好"</span>) ;</div><div class="line"><span class="comment">//		list2.add(11) ;加上泛型之后在编译期间只能添加String，不然会报错。</span></div><div class="line">		System.out.println(<span class="string">"list2的长度是："</span>+list2.size());</div><div class="line">		</div><div class="line">		</div><div class="line">		Class c1 = list1.getClass();</div><div class="line">		Class c2 = list2.getClass() ;</div><div class="line">		System.out.print(<span class="string">"c1,c2是否相等:"</span>);</div><div class="line">		System.out.println(c1==c2);</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">//通过反射绕过编译器动态调用add方法，可能否加入非String类型的元素</span></div><div class="line">			Method method = c2.getDeclaredMethod(<span class="string">"add"</span>, Object.class) ;</div><div class="line">			method.invoke(list2, <span class="number">123</span>) ;<span class="comment">//在这里加入int类型，在上面如果加入int会出现编译报错。</span></div><div class="line">			</div><div class="line">			<span class="comment">//list2的长度增加了，说明添加成功了</span></div><div class="line">			System.out.println(<span class="string">"现在list2的长度是:"</span>+list2.size());</div><div class="line">			</div><div class="line">			<span class="comment">/**</span></div><div class="line">			 * 所以可以看出，泛型只是在编译期间起作用，在经过编译进入运行期间是不起作用的。</div><div class="line">			 * 就算是不是泛型要求的类型也是可以插入的。</div><div class="line">			 */</div><div class="line">			</div><div class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">			e.printStackTrace() ;</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>所以可以看出，泛型只是在编译期间起作用，在经过编译进入运行期间是不起作用的。就算是不是泛型要求的类型也是可以插入的。</p>
</blockquote>
<h2 id="反射知识点"><a href="#反射知识点" class="headerlink" title="反射知识点"></a>反射知识点</h2><p><img src="http://i.imgur.com/b0yfRh9.png" alt="泛型"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>泛型的应用比较多：</p>
<ul>
<li>spring的IOC/DI。 </li>
<li>JDBC中的中的加载驱动</li>
</ul>
</blockquote>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.csdn.net/liujiahan629629/article/details/18013523" title="java中的反射机制" target="_blank" rel="external">java中的反射机制</a></li>
<li><a href="http://zhidao.baidu.com/question/141970313.html" title="反射机制是什么" target="_blank" rel="external">反射机制是什么</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;java反射机制指的是在java运行过程中，对于任意的类都可以知道他的所有属性以及方法，对于任意一个对象都可以任意的调用他的属性和方法，这种动态获取对象信息和动态调用对象方法的功能称为java反射机制，但是反射使用不当会造成很高的成本。&lt;/p&gt;
&lt;h1 id=&quot;简单实例&quot;&gt;&lt;a href=&quot;#简单实例&quot; class=&quot;headerlink&quot; title=&quot;简单实例&quot;&gt;&lt;/a&gt;简单实例&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;反射获取类名称&quot;&gt;&lt;a href=&quot;#反射获取类名称&quot; class=&quot;headerlink&quot; title=&quot;反射获取类名称&quot;&gt;&lt;/a&gt;反射获取类名称&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; top.crosssoverjie.study;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reflect&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class&amp;lt;Reflect&amp;gt; c1 = Reflect.class;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(c1.getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Reflect r1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Reflect() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Class&amp;lt;Reflect&amp;gt; c2 = (Class&amp;lt;Reflect&amp;gt;) r1.getClass() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(c2.getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Class&amp;lt;Reflect&amp;gt; c3 = (Class&amp;lt;Reflect&amp;gt;) Class.forName(&lt;span class=&quot;string&quot;&gt;&quot;top.crosssoverjie.study.Reflect&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            System.out.println(c3.getName());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java笔记" scheme="http://crossoverJie.github.io/categories/java%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="reflect" scheme="http://crossoverJie.github.io/tags/reflect/"/>
    
  </entry>
  
  <entry>
    <title>第一次总结</title>
    <link href="http://crossoverJie.github.io/2016/05/07/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://crossoverJie.github.io/2016/05/07/第一次总结/</id>
    <published>2016-05-07T11:35:14.000Z</published>
    <updated>2016-06-15T17:56:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><hr>
<p>昨天到今天一共花了差不多两天的时间终于把博客搭好了。还买了一个域名，现在就迫不及待的想把<br>这段内容写下来。</p>
<hr>
<h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><hr>
<p>首先非常感谢 <a href="http://tengj.top/" title="嘟爷的博客" target="_blank" rel="external">嘟爷</a>的帮忙，没有这些资料我可能还得自己研究好一段时间。<br><a id="more"></a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><hr>
<p>我是前天无意间在微博上看到嘟爷的一篇博文，就仔细看了下，发现写的非常好，然后就将他所有的博文大致的浏览了一下。</p>
<p>我很早以前就打算搭一个博客，但是百度了一下发现还是挺麻烦的，加上最近也比较忙所有一直也就没有做，直到看到这篇博文才顺利的搭起了这个博客。中途遇到不少问题也都顺利解决了，真是学到了不少的东西。</p>
<ul>
<li>熟练了Markdown语法。</li>
<li>真正使用了编辑神器 <strong>Sublime</strong>。</li>
<li>使用阿里云解析了github和coding里的Pages服务。</li>
<li>hexo和常用的主题配置。</li>
</ul>
<h1 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h1><hr>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><hr>
<p><img src="http://i.imgur.com/IqaE8CF.png" alt="Hexo配置"></p>
<hr>
<h2 id="JackMan配置"><a href="#JackMan配置" class="headerlink" title="JackMan配置"></a>JackMan配置</h2><pre><code>imglogo:
  enable: true             ## display image logo true/false.
  src: img/logo.gif        ## `.svg` and `.png` are recommended,please put image into the theme folder `/jacman/source/img`.
favicon: img/favicon.ico   ## size:32px*32px,`.ico` is recommended,please put image into the theme folder `/jacman/source/img`.     
apple_icon: img/jacman.jpg ## size:114px*114px,please put image into the theme folder `/jacman/source/img`.
author_img: img/author.jpg ## size:220px*220px.display author avatar picture.if don&apos;t want to display,please don&apos;t set this.
banner_img: #img/banner.jpg ## size:1920px*200px+. Banner Picture
### Theme Color 
theme_color:
    theme: &apos;#2ca6cb&apos;    ##the defaut theme color is blue

# 代码高亮主题
# available: default | night
highlight_theme: night

#### index post is expanding or not 
index:
  expand: false           ## default is unexpanding,so you can only see the short description of each post.
  excerpt_link: Read More  

close_aside: false  #close sidebar in post page if true
mathjax: false      #enable mathjax if true

### Creative Commons License Support, see http://creativecommons.org/ 
### you can choose: by , by-nc , by-nc-nd , by-nc-sa , by-nd , by-sa , zero
creative_commons: none
</code></pre><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上。。我做这个博客的初衷一是为了记录我的整个程序猿生涯的故事，二是希望能有大神能在过程中指出我的错误，能让我的水平更进一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;昨天到今天一共花了差不多两天的时间终于把博客搭好了。还买了一个域名，现在就迫不及待的想把&lt;br&gt;这段内容写下来。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;感谢&quot;&gt;&lt;a href=&quot;#感谢&quot; class=&quot;headerlink&quot; title=&quot;感谢&quot;&gt;&lt;/a&gt;感谢&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;首先非常感谢 &lt;a href=&quot;http://tengj.top/&quot; title=&quot;嘟爷的博客&quot;&gt;嘟爷&lt;/a&gt;的帮忙，没有这些资料我可能还得自己研究好一段时间。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://crossoverJie.github.io/categories/blog/"/>
    
    
      <category term="Markdown" scheme="http://crossoverJie.github.io/tags/Markdown/"/>
    
      <category term="总结" scheme="http://crossoverJie.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Markdown小计</title>
    <link href="http://crossoverJie.github.io/2016/05/06/Markdown%E5%B0%8F%E8%AE%A1/"/>
    <id>http://crossoverJie.github.io/2016/05/06/Markdown小计/</id>
    <published>2016-05-06T08:04:09.000Z</published>
    <updated>2016-06-15T17:52:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><code># 标题</code> </p>
<h1 id="表示标题-一个-号代表一级标题，以此类推。"><a href="#表示标题-一个-号代表一级标题，以此类推。" class="headerlink" title="表示标题 一个#号代表一级标题，以此类推。"></a>表示标题 一个#号代表一级标题，以此类推。</h1><p> <code>* 无序列表</code></p>
<ul>
<li>无序列表</li>
</ul>
<p><code>&gt; 引用</code>  </p>
<blockquote>
<p>引用</p>
</blockquote>
<p><code>[http://www.baidu.com](http://www.baidu.com &quot;百度&quot;)</code></p>
<p><a href="http://www.baidu.com" title="百度" target="_blank" rel="external">百度</a><br><a id="more"></a></p>
<p><code>![艾弗森](http://i.imgur.com/TLnZ2S6.jpg)插入图片</code></p>
<p><img src="http://i.imgur.com/TLnZ2S6.jpg" alt="艾弗森"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;# 标题&lt;/code&gt; &lt;/p&gt;
&lt;h1 id=&quot;表示标题-一个-号代表一级标题，以此类推。&quot;&gt;&lt;a href=&quot;#表示标题-一个-号代表一级标题，以此类推。&quot; class=&quot;headerlink&quot; title=&quot;表示标题 一个#号代表一级标题，以此类推。&quot;&gt;&lt;/a&gt;表示标题 一个#号代表一级标题，以此类推。&lt;/h1&gt;&lt;p&gt; &lt;code&gt;* 无序列表&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; 引用&lt;/code&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;[http://www.baidu.com](http://www.baidu.com &amp;quot;百度&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.baidu.com&quot; title=&quot;百度&quot;&gt;百度&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://crossoverJie.github.io/categories/blog/"/>
    
    
      <category term="Markdown" scheme="http://crossoverJie.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Linux（一）常用命令</title>
    <link href="http://crossoverJie.github.io/2016/04/10/Linux-normal/"/>
    <id>http://crossoverJie.github.io/2016/04/10/Linux-normal/</id>
    <published>2016-04-10T13:01:36.000Z</published>
    <updated>2016-06-15T17:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>由于现在JAVA开发的很多应用都是部署到Linux系统上的，因此了解和掌握一些Linux的常用命令是非常有必要的，以下就是在Java开发过程中一些常用的命令。</p>
</blockquote>
<hr>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ol>
<li>查找文件<br><code>find / -name log.txt</code><br>根据名称查找在 /目录下的 log.txt文件。</li>
</ol>
<p><code>find .-name &quot;*.xml&quot;</code><br>递归查找所有的xml文件。</p>
<p><code>find .-name &quot;*.xml&quot;|xargs grep &quot;hello&quot;</code><br>递归查找所有包含hello的xml文件。</p>
<p><code>ls -l grep &#39;jar&#39;</code><br>查找当前目录中的所有jar文件。<br><a id="more"></a></p>
<ol>
<li><p>检查一个文件是否运行<br><code>ps –ef|grep tomecate</code><br>检查所有有关tomcat的进程。</p>
</li>
<li><p>终止线程<br><code>kill -9 19979</code><br>终止线程号为19979的线程</p>
</li>
<li><p>查看文件，包括隐藏文件。<br><code>ls -al</code></p>
</li>
<li><p>查看当前工作目录。<br><code>pwd</code></p>
</li>
<li><p>复制文件包括其子文件到指定目录<br><code>cp -r source target</code><br>复制source文件到target目录中。</p>
</li>
<li><p>创建一个目录<br><code>mkdir new</code><br>创建一个new的目录</p>
</li>
<li><p>删除目录(前提是此目录是空目录)<br><code>rmdir source</code><br>删除source目录。</p>
</li>
<li><p>删除文件 包括其子文件<br><code>rm -rf file</code><br>删除file文件和其中的子文件。<br><code>-r</code>表示向下递归，不管有多少目录一律删除<br><code>-f</code>表示强制删除，不做任何提示。</p>
</li>
<li><p>移动文件<br><code>mv /temp/movefile  /target</code></p>
</li>
<li><p>切换用户<br><code>su -username</code></p>
</li>
<li><p>查看ip<br><code>ifconfig</code><br>注意是 <code>ifconfig</code> 不是windows中的<code>ipconfig</code></p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是在Linux下开发Java应用常用的Linux命令，如有遗漏请在评论处补充，我将不定期添加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;由于现在JAVA开发的很多应用都是部署到Linux系统上的，因此了解和掌握一些Linux的常用命令是非常有必要的，以下就是在Java开发过程中一些常用的命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;查找文件&lt;br&gt;&lt;code&gt;find / -name log.txt&lt;/code&gt;&lt;br&gt;根据名称查找在 /目录下的 log.txt文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;find .-name &amp;quot;*.xml&amp;quot;&lt;/code&gt;&lt;br&gt;递归查找所有的xml文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find .-name &amp;quot;*.xml&amp;quot;|xargs grep &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;br&gt;递归查找所有包含hello的xml文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls -l grep &amp;#39;jar&amp;#39;&lt;/code&gt;&lt;br&gt;查找当前目录中的所有jar文件。&lt;br&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://crossoverJie.github.io/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://crossoverJie.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="http://crossoverJie.github.io/2016/02/08/myresume/"/>
    <id>http://crossoverJie.github.io/2016/02/08/myresume/</id>
    <published>2016-02-07T17:08:27.000Z</published>
    <updated>2016-08-24T16:34:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="陈杰个人简历"><a href="#陈杰个人简历" class="headerlink" title="陈杰个人简历"></a>陈杰个人简历</h1><hr>
<h2 id="个人简介"><a href="#个人简介" class="headerlink" title="个人简介"></a>个人简介</h2><p>22岁    男</p>
<p>所在地： 重庆</p>
<p>手机号码： 18523985794</p>
<p>github: <a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a></p>
<hr>
<h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><hr>
<h3 id="项目名称：倾城运动SAAS云平台"><a href="#项目名称：倾城运动SAAS云平台" class="headerlink" title="项目名称：倾城运动SAAS云平台"></a>项目名称：<strong><em>倾城运动SAAS云平台</em></strong></h3><p>职责： <strong>Java后端开发工程师</strong></p>
<p>使用技术：</p>
<blockquote>
<p>JavaEE、HTML5、JQuery、Maven、MySQL、Spring、SpringMVC、Hibernate、Ngix，<br>基于微信的webAPP。</p>
</blockquote>
<p>项目描述：负责为健身场馆减少操作流程，提高会员活跃度，<br>并达到吸粉的目的，为场馆提供排课、预约、打卡、营销等便捷。</p>
<p>系统分为以下几个模块：</p>
<ul>
<li>排课模块。</li>
<li>预约模块。</li>
<li>打卡模块。</li>
<li>微信会员应用模块。</li>
<li>教练模块。</li>
<li>总的大后台模块。<a id="more"></a>
主要负责：</li>
</ul>
<p>在这期间主要参与并负责了，排课、预约、打卡、应用端以及大后台的接口开发。偶尔也帮前端绑定接口</p>
<p>项目地址: <a href="http://www.51dong.cc/pc/pc/indexw.html" target="_blank" rel="external">http://www.51dong.cc/pc/pc/indexw.html</a></p>
<h3 id="项目名称：长安马自达内部审计系统"><a href="#项目名称：长安马自达内部审计系统" class="headerlink" title="项目名称：长安马自达内部审计系统"></a>项目名称：<strong><em>长安马自达内部审计系统</em></strong></h3><p>职责： <strong>java工程师  项目经理</strong></p>
<p>使用技术： </p>
<blockquote>
<p>javaEE、JQuery、Struts2、ibatis、Spring、Oracle、AD域控。</p>
</blockquote>
<p>项目描述：该项目为长安马自达财务部门内部使用的一个审计系统，用于升级整个长马公司的风险和管理工作。</p>
<p>系统分为以下几个模块：</p>
<ul>
<li>MCRP模块审计</li>
<li>CAT问题追踪</li>
<li>SA专项审计</li>
<li>RM风险管理</li>
<li>资源共享与系统指南</li>
<li>系统管理</li>
</ul>
<p>主要负责：</p>
<ul>
<li>编写项目过程中的各个里程碑文档。</li>
<li>系统数据库设计。</li>
<li>制定并分配开发任务。</li>
<li>资源共享、系统指南、系统管理、风险管理模块代码的实现。</li>
</ul>
<h3 id="项目名称：公司内部考勤运维系统"><a href="#项目名称：公司内部考勤运维系统" class="headerlink" title="项目名称：公司内部考勤运维系统"></a>项目名称：<strong><em>公司内部考勤运维系统</em></strong></h3><p>职责： <strong>java工程师  项目经理</strong></p>
<p>使用技术：</p>
<blockquote>
<p>javaEE、JQuery、EasyUI、Spring、Struts2、Mybatis、Oracle。</p>
</blockquote>
<p>项目描述：该项目主要是公司内部使用的一个运维管理系统，主要是用于维护卖出的考勤机和对数据进行统计，产出报表。</p>
<p>主要负责：</p>
<ul>
<li>需求调研、详细设计。</li>
<li>编写过程中的各种里程碑文档。</li>
<li>系统数据库设计。</li>
<li>具体功能的编码实现、以及上线维护。</li>
</ul>
<h3 id="长安汽车设计成本管控系统"><a href="#长安汽车设计成本管控系统" class="headerlink" title="长安汽车设计成本管控系统"></a>长安汽车设计成本管控系统</h3><p>职责： <strong>java工程师</strong></p>
<p>使用技术：</p>
<blockquote>
<p>javaEE、JQuery、EasyUI、Spring、Struts2、Mybatis、Oracle。</p>
</blockquote>
<p>项目描述：该项目为重庆长安公司使用成本管控系统，对整个汽车生产所产生的成本进行预估与管理</p>
<p>主要负责：</p>
<ul>
<li>零部件参数准确率、及时率的开发。</li>
</ul>
<h3 id="南京长安马自达整车发运系统"><a href="#南京长安马自达整车发运系统" class="headerlink" title="南京长安马自达整车发运系统"></a>南京长安马自达整车发运系统</h3><p>职责： <strong>java工程师  项目经理</strong></p>
<p>使用技术：</p>
<blockquote>
<p>javaEE、JSF、JQuery、Oracle、Axis2、CXF、AD域控。</p>
</blockquote>
<p>项目描述：该项目为长马公司级项目，主要为物流部使用。对商品车销售过程进行管理。</p>
<p>主要负责：</p>
<ul>
<li>项目启动和整个过程的文档编写。</li>
<li>制定和安排开发计划。</li>
<li>整车发运管理、结算管理、系统管理模块的代码编写。</li>
</ul>
<hr>
<h2 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h2><h3 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a>SSM</h3><p>地址：<a href="https://github.com/crossoverJie/SSM" title="github地址" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<h3 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h3><p>地址：<a href="https://github.com/crossoverJie/company_open.git" title="github地址" target="_blank" rel="external">https://github.com/crossoverJie/company_open.git</a></p>
<p>使用技术：</p>
<blockquote>
<p>javaEE、Spring、SpringMVC、Mybatis、JQuery、Bootstrap、CKEditor、EasyUI、Oracle。</p>
</blockquote>
<hr>
<h3 id="销售系统"><a href="#销售系统" class="headerlink" title="销售系统"></a>销售系统</h3><p>地址：<a href="https://github.com/crossoverJie/SalesStore.git" title="github地址" target="_blank" rel="external">https://github.com/crossoverJie/SalesStore.git</a><br>使用技术：</p>
<blockquote>
<p>javaEE、Spring、SpringMVC、Hibernate、JQuery、Bootstrap、EasyUI、MySQL。</p>
</blockquote>
<hr>
<h2 id="自我总结"><a href="#自我总结" class="headerlink" title="自我总结"></a>自我总结</h2><p>到目前为止在软件开发方面自认为所接触到的广度有了，但是深度还需要做更多的功夫。再接下来的时间内争取多了解一些底层数据结构方面的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;陈杰个人简历&quot;&gt;&lt;a href=&quot;#陈杰个人简历&quot; class=&quot;headerlink&quot; title=&quot;陈杰个人简历&quot;&gt;&lt;/a&gt;陈杰个人简历&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;个人简介&quot;&gt;&lt;a href=&quot;#个人简介&quot; class=&quot;headerlink&quot; title=&quot;个人简介&quot;&gt;&lt;/a&gt;个人简介&lt;/h2&gt;&lt;p&gt;22岁    男&lt;/p&gt;
&lt;p&gt;所在地： 重庆&lt;/p&gt;
&lt;p&gt;手机号码： 18523985794&lt;/p&gt;
&lt;p&gt;github: &lt;a href=&quot;https://github.com/crossoverJie&quot;&gt;https://github.com/crossoverJie&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;项目经验&quot;&gt;&lt;a href=&quot;#项目经验&quot; class=&quot;headerlink&quot; title=&quot;项目经验&quot;&gt;&lt;/a&gt;项目经验&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;项目名称：倾城运动SAAS云平台&quot;&gt;&lt;a href=&quot;#项目名称：倾城运动SAAS云平台&quot; class=&quot;headerlink&quot; title=&quot;项目名称：倾城运动SAAS云平台&quot;&gt;&lt;/a&gt;项目名称：&lt;strong&gt;&lt;em&gt;倾城运动SAAS云平台&lt;/em&gt;&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;职责： &lt;strong&gt;Java后端开发工程师&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用技术：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaEE、HTML5、JQuery、Maven、MySQL、Spring、SpringMVC、Hibernate、Ngix，&lt;br&gt;基于微信的webAPP。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;项目描述：负责为健身场馆减少操作流程，提高会员活跃度，&lt;br&gt;并达到吸粉的目的，为场馆提供排课、预约、打卡、营销等便捷。&lt;/p&gt;
&lt;p&gt;系统分为以下几个模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排课模块。&lt;/li&gt;
&lt;li&gt;预约模块。&lt;/li&gt;
&lt;li&gt;打卡模块。&lt;/li&gt;
&lt;li&gt;微信会员应用模块。&lt;/li&gt;
&lt;li&gt;教练模块。&lt;/li&gt;
&lt;li&gt;总的大后台模块。
    
    </summary>
    
      <category term="resume" scheme="http://crossoverJie.github.io/categories/resume/"/>
    
    
      <category term="总结" scheme="http://crossoverJie.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
