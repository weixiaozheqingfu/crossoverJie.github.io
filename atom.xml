<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crossoverJie&#39;s Blog</title>
  <subtitle>baller</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://crossoverjie.top/"/>
  <updated>2018-04-27T17:35:41.000Z</updated>
  <id>http://crossoverjie.top/</id>
  
  <author>
    <name>crossoverJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sbc(七)分布式限流</title>
    <link href="http://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/"/>
    <id>http://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/</id>
    <published>2018-04-27T17:03:12.000Z</published>
    <updated>2018-04-27T17:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqrle104hwj31i6104aig.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文接着上文<a href="http://crossoverjie.top/2017/08/11/sbc4/">应用限流</a>进行讨论。</p>
<p>之前谈到的限流方案只能针对于单个 JVM 有效，也就是单机应用。而对于现在普遍的分布式应用也得有一个分布式限流的方案。</p>
<p>基于此尝试写了这个组件：</p>
<p><a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a></p>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>以下采用的是</p>
<p><a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>来做演示。</p>
<p>在 Order 应用提供的接口中采取了限流。首先是配置了限流工具的 Bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimitConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.limit&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisConnectionFactory jedisConnectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLimit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisClusterConnection clusterConnection = jedisConnectionFactory.getClusterConnection();</div><div class="line">        JedisCluster jedisCluster = (JedisCluster) clusterConnection.getNativeConnection();</div><div class="line">        RedisLimit redisLimit = <span class="keyword">new</span> RedisLimit.Builder&lt;&gt;(jedisCluster)</div><div class="line">                .limit(limit)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> redisLimit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着在 Controller 使用组件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisLimit redisLimit ;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@CheckReqNo</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">    BaseResponse&lt;OrderNoResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line"></div><div class="line">    <span class="comment">//限流</span></div><div class="line">    <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line">    <span class="keyword">if</span> (!limit)&#123;</div><div class="line">        res.setCode(StatusEnum.REQUEST_LIMIT.getCode());</div><div class="line">        res.setMessage(StatusEnum.REQUEST_LIMIT.getMessage());</div><div class="line">        <span class="keyword">return</span> res ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.setReqNo(orderNoReq.getReqNo());</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == orderNoReq.getAppId())&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(StatusEnum.FAIL);</div><div class="line">    &#125;</div><div class="line">    OrderNoResVO orderNoRes = <span class="keyword">new</span> OrderNoResVO() ;</div><div class="line">    orderNoRes.setOrderId(DateUtil.getLongTime());</div><div class="line">    res.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    res.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">    res.setDataBody(orderNoRes);</div><div class="line">    <span class="keyword">return</span> res ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了方便使用，也提供了注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@ControllerLimit</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNoLimit</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">    BaseResponse&lt;OrderNoResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line">    <span class="comment">// 业务逻辑</span></div><div class="line">    <span class="keyword">return</span> res ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该注解拦截了 http 请求，会再请求达到阈值时直接返回。</p>
<p>普通方法也可使用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CommonLimit</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>会在调用达到阈值时抛出异常。</p>
<p>为了模拟并发，在 <a href="https://github.com/crossoverJie/springboot-cloud/blob/master/sbc-user/user/src/main/java/com/crossoverJie/sbcuser/controller/UserController.java#L72-L91" target="_blank" rel="external">User</a> 应用中开启了 10 个线程调用 Order(<strong>限流次数为5</strong>) 接口(也可使用专业的并发测试工具 JMeter 等)。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;UserResVO&gt; <span class="title">getUserByFeign</span><span class="params">(@RequestBody UserReqVO userReq)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用远程服务</span></div><div class="line">    OrderNoReqVO vo = <span class="keyword">new</span> OrderNoReqVO();</div><div class="line">    vo.setAppId(<span class="number">1L</span>);</div><div class="line">    vo.setReqNo(userReq.getReqNo());</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        executorService.execute(<span class="keyword">new</span> Worker(vo, orderServiceClient));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    UserRes userRes = <span class="keyword">new</span> UserRes();</div><div class="line">    userRes.setUserId(<span class="number">123</span>);</div><div class="line">    userRes.setUserName(<span class="string">"张三"</span>);</div><div class="line"></div><div class="line">    userRes.setReqNo(userReq.getReqNo());</div><div class="line">    userRes.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    userRes.setMessage(<span class="string">"成功"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> userRes;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OrderNoReqVO vo;</div><div class="line">    <span class="keyword">private</span> OrderServiceClient orderServiceClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(OrderNoReqVO vo, OrderServiceClient orderServiceClient)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.vo = vo;</div><div class="line">        <span class="keyword">this</span>.orderServiceClient = orderServiceClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        BaseResponse&lt;OrderNoResVO&gt; orderNo = orderServiceClient.getOrderNoCommonLimit(vo);</div><div class="line">        logger.info(<span class="string">"远程返回:"</span> + JSON.toJSONString(orderNo));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>为了验证分布式效果启动了两个 Order 应用。</p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fqrnxt2l8lj313x09rwfm.jpg" alt=""></p>
<p>效果如下：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fqrlvvj8cbj31kw0f1wws.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fqrlznycdnj31kw0gbh0n.jpg" alt=""></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fqrm0jpbjjj31kw04wgq9.jpg" alt=""></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>实现原理其实很简单。既然要达到分布式全局限流的效果，那自然需要一个第三方组件来记录请求的次数。</p>
<p>其中 Redis 就非常适合这样的场景。</p>
<ul>
<li>每次请求时将当前时间(精确到秒)作为 Key 写入到 Redis 中，超时时间设置为 2 秒，Redis 将该 Key 的值进行自增。</li>
<li>当达到阈值时返回错误。</li>
<li>写入 Redis 的操作用 Lua 脚本来完成，利用 Redis 的单线程机制可以保证每个 Redis 请求的原子性。</li>
</ul>
<p>Lua 脚本如下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--lua 下标从 1 开始</span></div><div class="line"><span class="comment">-- 限流 key</span></div><div class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</div><div class="line"><span class="comment">-- 限流大小</span></div><div class="line"><span class="keyword">local</span> limit = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">-- 获取当前流量大小</span></div><div class="line"><span class="keyword">local</span> curentLimit = <span class="built_in">tonumber</span>(redis.call(<span class="string">'get'</span>, key) <span class="keyword">or</span> <span class="string">"0"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> curentLimit + <span class="number">1</span> &gt; limit <span class="keyword">then</span></div><div class="line">    <span class="comment">-- 达到限流大小 返回</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="comment">-- 没有达到阈值 value + 1</span></div><div class="line">    redis.call(<span class="string">"INCRBY"</span>, key, <span class="number">1</span>)</div><div class="line">    redis.call(<span class="string">"EXPIRE"</span>, key, <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> curentLimit + <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Java 中的调用逻辑:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">    String key = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);</div><div class="line">    Object result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> Jedis) &#123;</div><div class="line">        result = ((Jedis) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> JedisCluster) &#123;</div><div class="line">        result = ((JedisCluster) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//throw new RuntimeException("instance is error") ;</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (FAIL_CODE != (Long) result) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以只需要在需要限流的地方调用该方法对返回值进行判断即可达到限流的目的。</p>
<p>当然这只是利用 Redis 做了一个粗暴的计数器，如果想实现类似于上文中的令牌桶算法可以基于 Lua 自行实现。</p>
<h3 id="Builder-构建器"><a href="#Builder-构建器" class="headerlink" title="Builder 构建器"></a>Builder 构建器</h3><p>在设计这个组件时想尽量的提供给使用者清晰、可读性、不易出错的 API。</p>
<blockquote>
<p>比如第一步，如何构建一个限流对象。</p>
</blockquote>
<p>最常用的方式自然就是构造函数，如果有多个域则可以采用重叠构造器的方式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>缺点也是显而易见的：如果参数过多会导致难以阅读，甚至如果参数类型一致的情况下客户端颠倒了顺序，但不会引起警告从而出现难以预测的结果。</p>
<p>第二种方案可以采用 JavaBean 模式，利用 <code>setter</code> 方法进行构建:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A a = <span class="keyword">new</span> A();</div><div class="line">a.setA(a);</div><div class="line">a.setB(b);</div></pre></td></tr></table></figure>
<p>这种方式清晰易读，但却容易让对象处于不一致的状态，使对象处于线程不安全的状态。</p>
<p>所以这里采用了第三种创建对象的方式，构建器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JedisCommands jedis;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAIL_CODE = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * lua script</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String script;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RedisLimit</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.limit = builder.limit ;</div><div class="line">        <span class="keyword">this</span>.jedis = builder.jedis ;</div><div class="line">        buildScript();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * limit traffic</div><div class="line">     * <span class="doctag">@return</span> if true</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        String key = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> Jedis) &#123;</div><div class="line">            result = ((Jedis) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> JedisCluster) &#123;</div><div class="line">            result = ((JedisCluster) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//throw new RuntimeException("instance is error") ;</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (FAIL_CODE != (Long) result) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * read lua script</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildScript</span><span class="params">()</span> </span>&#123;</div><div class="line">        script = ScriptUtil.getScript(<span class="string">"limit.lua"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  the builder</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">JedisCommands</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">private</span> T jedis = <span class="keyword">null</span> ;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">200</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(T jedis)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.jedis = jedis ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">limit</span><span class="params">(<span class="keyword">int</span> limit)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.limit = limit ;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> RedisLimit <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedisLimit(<span class="keyword">this</span>) ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样客户端在使用时:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RedisLimit redisLimit = <span class="keyword">new</span> RedisLimit.Builder&lt;&gt;(jedisCluster)</div><div class="line">                .limit(limit)</div><div class="line">                .build();</div></pre></td></tr></table></figure>
<p>更加的简单直接，并且避免了将创建过程分成了多个子步骤。</p>
<p>这在有多个构造参数，但又不是必选字段时很有作用。</p>
<p>因此顺便将分布式锁的构建器方式也一并更新了：</p>
<p><a href="https://github.com/crossoverJie/distributed-redis-tool#features" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool#features</a></p>
<blockquote>
<p>更多内容可以参考 Effective Java</p>
</blockquote>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>从上文可以看出，使用过程就是调用 <code>limit</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//限流</span></div><div class="line"> <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line"> <span class="keyword">if</span> (!limit)&#123;</div><div class="line">    <span class="comment">//具体限流逻辑</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>为了减少侵入性，也为了简化客户端提供了两种注解方式。</p>
<h4 id="ControllerLimit"><a href="#ControllerLimit" class="headerlink" title="@ControllerLimit"></a>@ControllerLimit</h4><p>该注解可以作用于 <code>@RequestMapping</code> 修饰的接口中，并会在限流后提供限流响应。</p>
<p>实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebIntercept</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(WebIntercept.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisLimit redisLimit;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addInterceptor(<span class="keyword">new</span> CustomInterceptor())</div><div class="line">                .addPathPatterns(<span class="string">"/**"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">                                 Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (redisLimit == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"redisLimit is null"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</div><div class="line">                HandlerMethod method = (HandlerMethod) handler;</div><div class="line"></div><div class="line">                ControllerLimit annotation = method.getMethodAnnotation(ControllerLimit.class);</div><div class="line">                <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//skip</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line">                <span class="keyword">if</span> (!limit) &#123;</div><div class="line">                    logger.warn(<span class="string">"request has bean limit"</span>);</div><div class="line">                    response.sendError(<span class="number">500</span>, <span class="string">"request limit"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是实现了 SpringMVC 中的拦截器，并在拦截过程中判断是否有使用注解，从而调用限流逻辑。</p>
<p><strong>前提是应用需要扫描到该类，让 Spring 进行管理。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.crossoverjie.distributed.intercept"</span>)</div></pre></td></tr></table></figure>
<h4 id="CommonLimit"><a href="#CommonLimit" class="headerlink" title="@CommonLimit"></a>@CommonLimit</h4><p>当然也可以在普通方法中使用。实现原理则是 Spring AOP (SpringMVC 的拦截器本质也是 AOP)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CommonAspect.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisLimit redisLimit ;</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.crossoverjie.distributed.annotation.CommonLimit)"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"check()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (redisLimit == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"redisLimit is null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line">        <span class="keyword">if</span> (!limit) &#123;</div><div class="line">            logger.warn(<span class="string">"request has bean limit"</span>);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"request has bean limit"</span>) ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，也是在拦截过程中调用限流。</p>
<p>当然使用时也得扫描到该包:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.crossoverjie.distributed.intercept"</span>)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>限流</strong>在一个高并发大流量的系统中是保护应用的一个利器，成熟的方案也很多，希望对刚了解这一块的朋友提供一些思路。</p>
<p>以上所有的源码：</p>
<ul>
<li><a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a></li>
<li><a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></li>
</ul>
<p>感兴趣的朋友可以点个 Star 或是提交 PR。</p>
<h3 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h3><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fqrle104hwj31i6104aig.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文接着上文&lt;a href=&quot;http://crossoverjie.top/2017/08/11/sbc4/&quot;&gt;应用限流&lt;/a&gt;进行讨论。&lt;/p&gt;
&lt;p&gt;之前谈到的限流方案只能针对于单个 JVM 有效，也就是单机应用。而对于现在普遍的分布式应用也得有一个分布式限流的方案。&lt;/p&gt;
&lt;p&gt;基于此尝试写了这个组件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crossoverJie/distributed-redis-tool&quot;&gt;https://github.com/crossoverJie/distributed-redis-tool&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;DEMO&quot;&gt;&lt;a href=&quot;#DEMO&quot; class=&quot;headerlink&quot; title=&quot;DEMO&quot;&gt;&lt;/a&gt;DEMO&lt;/h2&gt;&lt;p&gt;以下采用的是&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crossoverJie/springboot-cloud&quot;&gt;https://github.com/crossoverJie/springboot-cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来做演示。&lt;/p&gt;
&lt;p&gt;在 Order 应用提供的接口中采取了限流。首先是配置了限流工具的 Bean:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RedisLimitConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;redis.limit&amp;#125;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; limit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; JedisConnectionFactory jedisConnectionFactory;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RedisLimit &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        RedisClusterConnection clusterConnection = jedisConnectionFactory.getClusterConnection();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        JedisCluster jedisCluster = (JedisCluster) clusterConnection.getNativeConnection();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        RedisLimit redisLimit = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RedisLimit.Builder&amp;lt;&amp;gt;(jedisCluster)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .limit(limit)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; redisLimit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着在 Controller 使用组件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; RedisLimit redisLimit ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@CheckReqNo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BaseResponse&amp;lt;OrderNoResVO&amp;gt; &lt;span class=&quot;title&quot;&gt;getOrderNo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@RequestBody OrderNoReqVO orderNoReq)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BaseResponse&amp;lt;OrderNoResVO&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BaseResponse();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//限流&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; limit = redisLimit.limit();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!limit)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.setCode(StatusEnum.REQUEST_LIMIT.getCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.setMessage(StatusEnum.REQUEST_LIMIT.getMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setReqNo(orderNoReq.getReqNo());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == orderNoReq.getAppId())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SBCException(StatusEnum.FAIL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    OrderNoResVO orderNoRes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OrderNoResVO() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    orderNoRes.setOrderId(DateUtil.getLongTime());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setCode(StatusEnum.SUCCESS.getCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setMessage(StatusEnum.SUCCESS.getMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setDataBody(orderNoRes);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了方便使用，也提供了注解:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ControllerLimit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BaseResponse&amp;lt;OrderNoResVO&amp;gt; &lt;span class=&quot;title&quot;&gt;getOrderNoLimit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@RequestBody OrderNoReqVO orderNoReq)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BaseResponse&amp;lt;OrderNoResVO&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BaseResponse();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 业务逻辑&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该注解拦截了 http 请求，会再请求达到阈值时直接返回。&lt;/p&gt;
&lt;p&gt;普通方法也可使用:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@CommonLimit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会在调用达到阈值时抛出异常。&lt;/p&gt;
&lt;p&gt;为了模拟并发，在 &lt;a href=&quot;https://github.com/crossoverJie/springboot-cloud/blob/master/sbc-user/user/src/main/java/com/crossoverJie/sbcuser/controller/UserController.java#L72-L91&quot;&gt;User&lt;/a&gt; 应用中开启了 10 个线程调用 Order(&lt;strong&gt;限流次数为5&lt;/strong&gt;) 接口(也可使用专业的并发测试工具 JMeter 等)。&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
      <category term="Distributed Tools" scheme="http://crossoverjie.top/categories/sbc/Distributed-Tools/"/>
    
    
      <category term="Distributed Lock" scheme="http://crossoverjie.top/tags/Distributed-Lock/"/>
    
  </entry>
  
  <entry>
    <title>【译】对于初学者什么是最好的编程语言？</title>
    <link href="http://crossoverjie.top/2018/04/12/translation/translation-What%20Is%20The%20Best%20Programming%20Language%20to%20Start/"/>
    <id>http://crossoverjie.top/2018/04/12/translation/translation-What Is The Best Programming Language to Start/</id>
    <published>2018-04-11T17:02:13.000Z</published>
    <updated>2018-04-12T14:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://hackernoon.com/what-is-the-best-programming-language-to-start-8ca8fb5e9a60" target="_blank" rel="external">原文链接</a></h3><p>Python？Java？Ruby？JavaScript？有非常多的选择。选择一种编程语言开始你的编码之旅不应该是一件艰巨的任务。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fq952y5gn6j318g0p0q88.jpg" alt=""></p>
<p>事实上：你将要学习的语言并不是特别重要，更重要的是学习编程的理念。对于任何编程语言来说知识的可传递性都是至关重要的。</p>
<p>我学习的第一门语言是 Java，学习了循环，while 循环，条件，函数，面向对象编程和许多编程理念。</p>
<p>然而，选择一门能在编程领域轻松找到工作的语言是更好的选择。对于初学者来说，我这里有一份列表推荐给你：</p>
<a id="more"></a>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python 在美国大学里是最受欢迎的入门型语言。</p>
<p>就像 JavaScript 一样，Python 也非常灵活，现在被用于构建生物信息学的 web 应用。我强烈推荐你学习 Python，它是很棒的入门选择。</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Java 是企业环境中使用最多的语言，根据 TIOBE 统计 Java 长年占据编程语言榜首。同时 Java 是强类型地静态语言，可以更容易地去描述一些编程理念。</p>
<p>Java 作为最常使用的语言，你可以很轻松地在这段编程之旅中找到 Java 的相关课程和指南来获得帮助。你还可以使用 Java 构建服务端应用、Android APP 等应用程序。</p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>Ruby 是我最喜欢的编程语言，它编写简单，容易理解并且使用顺手。</p>
<p>就像 JavaScript 一样，它学起来简单但是不易掌握。Ruby 在很多公司中被广泛应用，比如 Airbnb, EBANX, Shopify, Twitter, GitHub 等等。它还有一个超赞的 7*24 小时的在线社区随时提供帮助。<br>Ruby 以  Ruby on Rails 框架著称，它可以帮你很轻松的构建整个 web 应用。</p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript 是我用过的最灵活的语言之一。</p>
<p>你能用它构建控制台程序，桌面软件，手机 APP，前端开发，后端开发等等。它是一个很不错的编程语言，简单易学但难以掌握。</p>
<p>我建议你学习并掌握 JavaScript ，但不是作为第一门语言。</p>
<p>对于初学者来说 JavaScript 很难调试并且不容易学习编程理念比如异步，原型，面向对象等等。</p>
<h3 id="不要纠结语言"><a href="#不要纠结语言" class="headerlink" title="不要纠结语言"></a>不要纠结语言</h3><p>你需要通过选择一门语言来学习编程理念，当你学完之后你将花费较小的学习曲线来学习任何其他的语言。</p>
<p>如果你想要学习如何学习一门新语言的话，可以阅读我的文章 “<a href="https://hackernoon.com/what-is-the-best-programming-language-to-start-8ca8fb5e9a60" target="_blank" rel="external">How to Learn a New Programming Language or Framework</a>”，将会非常有用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/what-is-the-best-programming-language-to-start-8ca8fb5e9a60&quot;&gt;原文链接&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python？Java？Ruby？JavaScript？有非常多的选择。选择一种编程语言开始你的编码之旅不应该是一件艰巨的任务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fq952y5gn6j318g0p0q88.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上：你将要学习的语言并不是特别重要，更重要的是学习编程的理念。对于任何编程语言来说知识的可传递性都是至关重要的。&lt;/p&gt;
&lt;p&gt;我学习的第一门语言是 Java，学习了循环，while 循环，条件，函数，面向对象编程和许多编程理念。&lt;/p&gt;
&lt;p&gt;然而，选择一门能在编程领域轻松找到工作的语言是更好的选择。对于初学者来说，我这里有一份列表推荐给你：&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://crossoverjie.top/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>动手实现一个 LRU cache</title>
    <link href="http://crossoverjie.top/2018/04/07/algorithm/LRU-cache/"/>
    <id>http://crossoverjie.top/2018/04/07/algorithm/LRU-cache/</id>
    <published>2018-04-06T17:01:36.000Z</published>
    <updated>2018-04-07T04:46:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq3fey7n97j31340o8myw.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LRU 是 <code>Least Recently Used</code> 的简写，字面意思则是<code>最近最少使用</code>。</p>
<p>通常用于缓存的淘汰策略实现，由于缓存的内存非常宝贵，所以需要根据某种规则来剔除数据保证内存不被撑满。</p>
<p>如常用的 Redis 就有以下几种策略：</p>
<table>
<thead>
<tr>
<th style="text-align:center">策略</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">volatile-lru</td>
<td style="text-align:center">从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">volatile-ttl</td>
<td style="text-align:center">从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">volatile-random</td>
<td style="text-align:center">从已设置过期时间的数据集中任意选择数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">allkeys-lru</td>
<td style="text-align:center">从所有数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">allkeys-random</td>
<td style="text-align:center">从所有数据集中任意选择数据进行淘汰</td>
</tr>
<tr>
<td style="text-align:center">no-envicition</td>
<td style="text-align:center">禁止驱逐数据</td>
</tr>
</tbody>
</table>
<blockquote>
<p>摘抄自:<a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5" target="_blank" rel="external">https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5</a></p>
</blockquote>
<a id="more"></a>
<h2 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h2><p>之前也有接触过一道面试题，大概需求是：</p>
<ul>
<li>实现一个 LRU 缓存，当缓存数据达到 N 之后需要淘汰掉最近最少使用的数据。</li>
<li>N 小时之内没有被访问的数据也需要淘汰掉。</li>
</ul>
<p>以下是我的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUAbstractMap</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">AbstractMap</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(LRUAbstractMap.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查是否超期线程</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> ExecutorService checkTimePool ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * map 最大size</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">1024</span> ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;Node&gt; QUEUE = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(MAX_SIZE) ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_ARRAY_SIZE =<span class="number">1024</span> ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数组长度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> arraySize ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数组</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Object[] arrays ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断是否停止 flag</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 超时时间</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Long EXPIRE_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span> ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 整个 Map 的大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> AtomicInteger size  ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUAbstractMap</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        arraySize = DEFAULT_ARRAY_SIZE;</div><div class="line">        arrays = <span class="keyword">new</span> Object[arraySize] ;</div><div class="line"></div><div class="line">        <span class="comment">//开启一个线程检查最先放入队列的值是否超期</span></div><div class="line">        executeCheckTime();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启一个线程检查最先放入队列的值是否超期 设置为守护线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeCheckTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</div><div class="line">                .setNameFormat(<span class="string">"check-thread-%d"</span>)</div><div class="line">                .setDaemon(<span class="keyword">true</span>)</div><div class="line">                .build();</div><div class="line">        checkTimePool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>),namedThreadFactory,<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div><div class="line">        checkTimePool.execute(<span class="keyword">new</span> CheckTimeThread()) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Entry&gt; <span class="title">entrySet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.keySet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> hash = hash(key);</div><div class="line">        <span class="keyword">int</span> index = hash % arraySize ;</div><div class="line">        Node currentNode = (Node) arrays[index] ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>)&#123;</div><div class="line">            arrays[index] = <span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>, key, value);</div><div class="line"></div><div class="line">            <span class="comment">//写入队列</span></div><div class="line">            QUEUE.offer((Node) arrays[index]) ;</div><div class="line"></div><div class="line">            sizeUp();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            Node cNode = currentNode ;</div><div class="line">            Node nNode = cNode ;</div><div class="line"></div><div class="line">            <span class="comment">//存在就覆盖</span></div><div class="line">            <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line">                cNode.val = value ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (nNode.next != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">//key 存在 就覆盖 简单判断</span></div><div class="line">                <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line">                    nNode.val = value ;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//不存在就新增链表</span></div><div class="line">                    sizeUp();</div><div class="line">                    Node node = <span class="keyword">new</span> Node(nNode,<span class="keyword">null</span>,key,value) ;</div><div class="line"></div><div class="line">                    <span class="comment">//写入队列</span></div><div class="line">                    QUEUE.offer(currentNode) ;</div><div class="line"></div><div class="line">                    cNode.next = node ;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                nNode = nNode.next ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hash = hash(key) ;</div><div class="line">        <span class="keyword">int</span> index = hash % arraySize ;</div><div class="line">        Node currentNode = (Node) arrays[index] ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (currentNode.next == <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="comment">//更新时间</span></div><div class="line">            currentNode.setUpdateTime(System.currentTimeMillis());</div><div class="line"></div><div class="line">            <span class="comment">//没有冲突</span></div><div class="line">            <span class="keyword">return</span> currentNode ;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Node nNode = currentNode ;</div><div class="line">        <span class="keyword">while</span> (nNode.next != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line"></div><div class="line">                <span class="comment">//更新时间</span></div><div class="line">                currentNode.setUpdateTime(System.currentTimeMillis());</div><div class="line"></div><div class="line">                <span class="keyword">return</span> nNode ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            nNode = nNode.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hash = hash(key) ;</div><div class="line">        <span class="keyword">int</span> index = hash % arraySize ;</div><div class="line">        Node currentNode = (Node) arrays[index] ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode.key == key)&#123;</div><div class="line">            sizeDown();</div><div class="line">            arrays[index] = <span class="keyword">null</span> ;</div><div class="line"></div><div class="line">            <span class="comment">//移除队列</span></div><div class="line">            QUEUE.poll();</div><div class="line">            <span class="keyword">return</span> currentNode ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Node nNode = currentNode ;</div><div class="line">        <span class="keyword">while</span> (nNode.next != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line">                sizeDown();</div><div class="line">                <span class="comment">//在链表中找到了 把上一个节点的 next 指向当前节点的下一个节点</span></div><div class="line">                nNode.pre.next = nNode.next ;</div><div class="line">                nNode = <span class="keyword">null</span> ;</div><div class="line"></div><div class="line">                <span class="comment">//移除队列</span></div><div class="line">                QUEUE.poll();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> nNode;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            nNode = nNode.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.remove(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加size</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sizeUp</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//在put值时候认为里边已经有数据了</span></div><div class="line">        flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size == <span class="keyword">null</span>)&#123;</div><div class="line">            size = <span class="keyword">new</span> AtomicInteger() ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> size = <span class="keyword">this</span>.size.incrementAndGet();</div><div class="line">        <span class="keyword">if</span> (size &gt;= MAX_SIZE) &#123;</div><div class="line">            <span class="comment">//找到队列头的数据</span></div><div class="line">            Node node = QUEUE.poll() ;</div><div class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"data error"</span>) ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//移除该 key</span></div><div class="line">            Object key = node.key ;</div><div class="line">            remove(key) ;</div><div class="line">            lruCallback() ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数量减小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sizeDown</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (QUEUE.size() == <span class="number">0</span>)&#123;</div><div class="line">            flag = <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.size.decrementAndGet() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size.get() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 链表</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Node next ;</div><div class="line">        <span class="keyword">private</span> Node pre ;</div><div class="line">        <span class="keyword">private</span> Object key ;</div><div class="line">        <span class="keyword">private</span> Object val ;</div><div class="line">        <span class="keyword">private</span> Long updateTime ;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node pre,Node next, Object key, Object val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.pre = pre ;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">            <span class="keyword">this</span>.updateTime = System.currentTimeMillis() ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Long updateTime)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.updateTime = updateTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> updateTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</div><div class="line">                    <span class="string">"key="</span> + key +</div><div class="line">                    <span class="string">", val="</span> + val +</div><div class="line">                    <span class="string">'&#125;'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * copy HashMap 的 hash 实现</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h;</div><div class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lruCallback</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"lruCallback"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckTimeThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (flag)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Node node = QUEUE.poll();</div><div class="line">                    <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="keyword">continue</span> ;</div><div class="line">                    &#125;</div><div class="line">                    Long updateTime = node.getUpdateTime() ;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> ((updateTime - System.currentTimeMillis()) &gt;= EXPIRE_TIME)&#123;</div><div class="line">                        remove(node.key) ;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    LOGGER.error(<span class="string">"InterruptedException"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感兴趣的朋友可以直接从:</p>
<p><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUAbstractMap.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUAbstractMap.java</a></p>
<p>下载代码本地运行。</p>
<p>代码看着比较多，其实实现的思路还是比较简单：</p>
<ul>
<li>采用了与 HashMap 一样的保存数据方式，只是自己手动实现了一个简易版。</li>
<li>内部采用了一个队列来保存每次写入的数据。</li>
<li>写入的时候判断缓存是否大于了阈值 N，如果满足则根据队列的 FIFO 特性将队列头的数据删除。因为队列头的数据肯定是最先放进去的。</li>
<li>再开启了一个守护线程用于判断最先放进去的数据是否超期（因为就算超期也是最先放进去的数据最有可能满足超期条件。）</li>
<li>设置为守护线程可以更好的表明其目的（最坏的情况下，如果是一个用户线程最终有可能导致程序不能正常退出，因为该线程一直在运行，守护线程则不会有这个情况。）</li>
</ul>
<p>以上代码大体功能满足了，但是有一个致命问题。</p>
<p>就是最近<strong>最少使用</strong>没有满足，删除的数据都是最先放入的数据。</p>
<blockquote>
<p>不过其中的 <code>put get</code> 流程算是一个简易的 HashMap 实现，可以对 HashMap 加深一些理解。</p>
</blockquote>
<h2 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h2><p>因此如何来实现一个完整的 LRU 缓存呢，这次不考虑过期时间的问题。</p>
<p>其实从上一个实现也能想到一些思路：</p>
<ul>
<li>要记录最近最少使用，那至少需要一个有序的集合来保证写入的顺序。</li>
<li>在使用了数据之后能够更新它的顺序。</li>
</ul>
<p>基于以上两点很容易想到一个常用的数据结构：<strong>链表</strong>。</p>
<ol>
<li>每次写入数据时将数据放入链表头结点。</li>
<li>使用数据时候将数据<strong>移动到头结点</strong>。</li>
<li>缓存数量超过阈值时移除链表尾部数据。</li>
</ol>
<p>因此有了以下实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 节点大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nodeCount;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 头结点</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; header;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 尾结点</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; tailer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUMap</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</div><div class="line">        <span class="comment">//头结点的下一个结点为空</span></div><div class="line">        header = <span class="keyword">new</span> Node&lt;&gt;();</div><div class="line">        header.next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//尾结点的上一个结点为空</span></div><div class="line">        tailer = <span class="keyword">new</span> Node&lt;&gt;();</div><div class="line">        tailer.tail = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//双向链表 头结点的上结点指向尾结点</span></div><div class="line">        header.tail = tailer;</div><div class="line"></div><div class="line">        <span class="comment">//尾结点的下结点指向头结点</span></div><div class="line">        tailer.next = header;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        cacheMap.put(key, value);</div><div class="line"></div><div class="line">        <span class="comment">//双向链表中添加结点</span></div><div class="line">        addNode(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</div><div class="line"></div><div class="line">        Node&lt;K, V&gt; node = getNode(key);</div><div class="line"></div><div class="line">        <span class="comment">//移动到头结点</span></div><div class="line">        moveToHead(node) ;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> cacheMap.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(Node&lt;K,V&gt; node)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//如果是最后的一个节点</span></div><div class="line">        <span class="keyword">if</span> (node.tail == <span class="keyword">null</span>)&#123;</div><div class="line">            node.next.tail = <span class="keyword">null</span> ;</div><div class="line">            tailer = node.next ;</div><div class="line">            nodeCount -- ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果是本来就是头节点 不作处理</span></div><div class="line">        <span class="keyword">if</span> (node.next == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果处于中间节点</span></div><div class="line">        <span class="keyword">if</span> (node.tail != <span class="keyword">null</span> &amp;&amp; node.next != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//它的上一节点指向它的下一节点 也就删除当前节点</span></div><div class="line">            node.tail.next = node.next ;</div><div class="line">            nodeCount -- ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//最后在头部增加当前节点</span></div><div class="line">        <span class="comment">//注意这里需要重新 new 一个对象，不然原本的node 还有着下面的引用，会造成内存溢出。</span></div><div class="line">        node = <span class="keyword">new</span> Node&lt;&gt;(node.getKey(),node.getValue()) ;</div><div class="line">        addHead(node) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 链表查询 效率较低</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(K key)</span></span>&#123;</div><div class="line">        Node&lt;K,V&gt; node = tailer ;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (node.getKey().equals(key))&#123;</div><div class="line">                <span class="keyword">return</span> node ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            node = node.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 写入头结点</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line"></div><div class="line">        Node&lt;K, V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key, value);</div><div class="line"></div><div class="line">        <span class="comment">//容量满了删除最后一个</span></div><div class="line">        <span class="keyword">if</span> (cacheSize == nodeCount) &#123;</div><div class="line">            <span class="comment">//删除尾结点</span></div><div class="line">            delTail();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//写入头结点</span></div><div class="line">        addHead(node);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加头结点</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> node</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;K, V&gt; node)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//写入头结点</span></div><div class="line">        header.next = node;</div><div class="line">        node.tail = header;</div><div class="line">        header = node;</div><div class="line">        nodeCount++;</div><div class="line"></div><div class="line">        <span class="comment">//如果写入的数据大于2个 就将初始化的头尾结点删除</span></div><div class="line">        <span class="keyword">if</span> (nodeCount == <span class="number">2</span>) &#123;</div><div class="line">            tailer.next.next.tail = <span class="keyword">null</span>;</div><div class="line">            tailer = tailer.next.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delTail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//把尾结点从缓存中删除</span></div><div class="line">        cacheMap.remove(tailer.getKey());</div><div class="line"></div><div class="line">        <span class="comment">//删除尾结点</span></div><div class="line">        tailer.next.tail = <span class="keyword">null</span>;</div><div class="line">        tailer = tailer.next;</div><div class="line"></div><div class="line">        nodeCount--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> K key;</div><div class="line">        <span class="keyword">private</span> V value;</div><div class="line">        Node&lt;K, V&gt; tail;</div><div class="line">        Node&lt;K, V&gt; next;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder() ;</div><div class="line">        Node&lt;K,V&gt; node = tailer ;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            sb.append(node.getKey()).append(<span class="string">":"</span>)</div><div class="line">                    .append(node.getValue())</div><div class="line">                    .append(<span class="string">"--&gt;"</span>) ;</div><div class="line"></div><div class="line">            node = node.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码：<br><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUMap.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUMap.java</a></p>
<p>实际效果，写入时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRUMap&lt;String,Integer&gt; lruMap = <span class="keyword">new</span> LRUMap(<span class="number">3</span>) ;</div><div class="line">        lruMap.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div><div class="line">        lruMap.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div><div class="line">        lruMap.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div><div class="line"></div><div class="line">        System.out.println(lruMap.toString());</div><div class="line"></div><div class="line">        lruMap.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</div><div class="line">        System.out.println(lruMap.toString());</div><div class="line"></div><div class="line">        lruMap.put(<span class="string">"5"</span>,<span class="number">5</span>) ;</div><div class="line">        System.out.println(lruMap.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="number">1</span>:<span class="number">1</span>--&gt;<span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;</div><div class="line"><span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;<span class="number">4</span>:<span class="number">4</span>--&gt;</div><div class="line"><span class="number">3</span>:<span class="number">3</span>--&gt;<span class="number">4</span>:<span class="number">4</span>--&gt;<span class="number">5</span>:<span class="number">5</span>--&gt;</div></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRUMap&lt;String,Integer&gt; lruMap = <span class="keyword">new</span> LRUMap(<span class="number">3</span>) ;</div><div class="line">        lruMap.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div><div class="line">        lruMap.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div><div class="line">        lruMap.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div><div class="line"></div><div class="line">        System.out.println(lruMap.toString());</div><div class="line">        System.out.println(<span class="string">"=============="</span>);</div><div class="line"></div><div class="line">        Integer integer = lruMap.get(<span class="string">"1"</span>);</div><div class="line">        System.out.println(integer);</div><div class="line">        System.out.println(<span class="string">"=============="</span>);</div><div class="line">        System.out.println(lruMap.toString());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span>:<span class="number">1</span>--&gt;<span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;</div><div class="line">==============</div><div class="line"><span class="number">1</span></div><div class="line">==============</div><div class="line"><span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;<span class="number">1</span>:<span class="number">1</span>--&gt;</div></pre></td></tr></table></figure>
<p>实现思路和上文提到的一致，说下重点：</p>
<ul>
<li>数据是直接利用 HashMap 来存放的。</li>
<li>内部使用了一个双向链表来存放数据，所以有一个头结点 header，以及尾结点 tailer。</li>
<li>每次写入头结点，删除尾结点时都是依赖于 header tailer，如果看着比较懵建议自己实现一个链表熟悉下，或结合下文的对象关系图一起理解。</li>
<li>使用数据移动到链表头时，第一步是需要在双向链表中找到该节点。这里就体现出链表的问题了。查找效率很低，最差需要 <code>O(N)</code>。之后依赖于当前节点进行移动。</li>
<li>在写入头结点时有判断链表大小等于 2 时需要删除初始化的头尾结点。这是因为初始化时候生成了两个双向节点，没有数据只是为了形成一个数据结构。当真实数据进来之后需要删除以方便后续的操作（这点可以继续优化）。</li>
<li>以上的所有操作都是线程不安全的，需要使用者自行控制。</li>
</ul>
<p>下面是对象关系图：</p>
<h3 id="初始化时"><a href="#初始化时" class="headerlink" title="初始化时"></a>初始化时</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq3h4xsf4cj30dh09hglr.jpg" alt=""></p>
<h3 id="写入数据时"><a href="#写入数据时" class="headerlink" title="写入数据时"></a>写入数据时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LRUMap&lt;String,Integer&gt; lruMap = <span class="keyword">new</span> LRUMap(<span class="number">3</span>) ;</div><div class="line">lruMap.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fq3h892nalj30ef09jdg2.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lruMap.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fq3hayffy1j30jr0b6q3a.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lruMap.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fq3hcfq95pj30gp0bot93.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lruMap.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq3hfl5r8ij30kn0b374s.jpg" alt=""></p>
<h3 id="获取数据时"><a href="#获取数据时" class="headerlink" title="获取数据时"></a>获取数据时</h3><p>数据和上文一样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer integer = lruMap.get(<span class="string">"2"</span>);</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fq3hjbou5pj30k70aj3yy.jpg" alt=""></p>
<p>通过以上几张图应该是很好理解数据是如何存放的了。</p>
<h2 id="实现三"><a href="#实现三" class="headerlink" title="实现三"></a>实现三</h2><p>其实如果对 Java 的集合比较熟悉的话，会发现上文的结构和 LinkedHashMap 非常类似。</p>
<p>对此不太熟悉的朋友可以先了解下 <a href="http://crossoverjie.top/2018/02/06/LinkedHashMap/">LinkedHashMap 底层分析</a> 。</p>
<p>所以我们完全可以借助于它来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRULinkedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinkedHashMap&lt;K,V&gt; cacheMap ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRULinkedMap</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</div><div class="line"></div><div class="line">        cacheMap = <span class="keyword">new</span> LinkedHashMap(<span class="number">16</span>,<span class="number">0.75F</span>,<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (cacheSize + <span class="number">1</span> == cacheMap.size())&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key,V value)</span></span>&#123;</div><div class="line">        cacheMap.put(key,value) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> cacheMap.get(key) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> Collection&lt;Map.Entry&lt;K, V&gt;&gt; getAll() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;K, V&gt;&gt;(cacheMap.entrySet());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码：<br><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRULinkedMap.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRULinkedMap.java</a></p>
<p>这次就比较简洁了，也就几行代码（具体的逻辑 LinkedHashMap 已经帮我们实现好了）</p>
<p>实际效果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRULinkedMap&lt;String,Integer&gt; map = <span class="keyword">new</span> LRULinkedMap(<span class="number">3</span>) ;</div><div class="line">        map.put(<span class="string">"1"</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">"2"</span>,<span class="number">2</span>);</div><div class="line">        map.put(<span class="string">"3"</span>,<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">""</span>);</div><div class="line">        map.put(<span class="string">"4"</span>,<span class="number">4</span>);</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span> : <span class="number">1</span>	<span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	</div><div class="line"><span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	<span class="number">4</span> : <span class="number">4</span></div></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRULinkedMap&lt;String,Integer&gt; map = <span class="keyword">new</span> LRULinkedMap(<span class="number">4</span>) ;</div><div class="line">        map.put(<span class="string">"1"</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">"2"</span>,<span class="number">2</span>);</div><div class="line">        map.put(<span class="string">"3"</span>,<span class="number">3</span>);</div><div class="line">        map.put(<span class="string">"4"</span>,<span class="number">4</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">""</span>);</div><div class="line">        map.get(<span class="string">"1"</span>) ;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span> : <span class="number">1</span>	<span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	<span class="number">4</span> : <span class="number">4</span>	</div><div class="line"><span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	<span class="number">4</span> : <span class="number">4</span>	<span class="number">1</span> : <span class="number">1</span></div></pre></td></tr></table></figure>
<p>LinkedHashMap 内部也有维护一个双向队列，在初始化时也会给定一个缓存大小的阈值。初始化时自定义是否需要删除最近不常使用的数据，如果是则会按照实现二中的方式管理数据。</p>
<p>其实主要代码就是重写了 LinkedHashMap 的 removeEldestEntry 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它默认是返回 false，也就是不会管有没有超过阈值。</p>
<p>所以我们自定义大于了阈值时返回 true，这样 LinkedHashMap 就会帮我们删除最近最少使用的数据。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是对 LRU 缓存的实现，了解了这些至少在平时使用时可以知其所以然。</p>
<p>当然业界使用较多的还有 <a href="https://github.com/google/guava" target="_blank" rel="external">guava</a> 的实现，并且它还支持多种过期策略。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fq3fey7n97j31340o8myw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;LRU 是 &lt;code&gt;Least Recently Used&lt;/code&gt; 的简写，字面意思则是&lt;code&gt;最近最少使用&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通常用于缓存的淘汰策略实现，由于缓存的内存非常宝贵，所以需要根据某种规则来剔除数据保证内存不被撑满。&lt;/p&gt;
&lt;p&gt;如常用的 Redis 就有以下几种策略：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;策略&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volatile-lru&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从已设置过期时间的数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volatile-ttl&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从已设置过期时间的数据集中挑选将要过期的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volatile-random&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从已设置过期时间的数据集中任意选择数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;allkeys-lru&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从所有数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;allkeys-random&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从所有数据集中任意选择数据进行淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no-envicition&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;禁止驱逐数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;摘抄自:&lt;a href=&quot;https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5&quot;&gt;https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://crossoverjie.top/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LRU cache" scheme="http://crossoverjie.top/categories/%E7%AE%97%E6%B3%95/LRU-cache/"/>
    
    
  </entry>
  
  <entry>
    <title>基于 Redis 的分布式锁</title>
    <link href="http://crossoverjie.top/2018/03/29/distributed-lock/distributed-lock-redis/"/>
    <id>http://crossoverjie.top/2018/03/29/distributed-lock/distributed-lock-redis/</id>
    <published>2018-03-29T12:10:36.000Z</published>
    <updated>2018-04-27T14:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpvathnbf6j31kw11xwl3.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分布式锁在分布式应用中应用广泛，想要搞懂一个新事物首先得了解它的由来，这样才能更加的理解甚至可以举一反三。</p>
<p>首先谈到分布式锁自然也就联想到分布式应用。</p>
<p>在我们将应用拆分为分布式应用之前的单机系统中，对一些并发场景读取公共资源时如扣库存，卖车票之类的需求可以简单的使用<a href="http://crossoverjie.top/2018/01/14/Synchronize/">同步</a>或者是<a href="http://crossoverjie.top/2018/01/25/ReentrantLock/">加锁</a>就可以实现。</p>
<p>但是应用分布式了之后系统由以前的单进程多线程的程序变为了多进程多线程，这时使用以上的解决方案明显就不够了。</p>
<p>因此业界常用的解决方案通常是借助于一个第三方组件并利用它自身的排他性来达到多进程的互斥。如：</p>
<ul>
<li>基于 DB 的唯一索引。</li>
<li>基于 ZK 的临时有序节点。</li>
<li>基于 Redis 的 <code>NX EX</code> 参数。</li>
</ul>
<p>这里主要基于 Redis 进行讨论。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>既然是选用了 Redis，那么它就得具有排他性才行。同时它最好也有锁的一些基本特性：</p>
<ul>
<li>高性能(加、解锁时高性能)</li>
<li>可以使用阻塞锁与非阻塞锁。</li>
<li>不能出现死锁。</li>
<li>可用性(不能出现节点 down 掉后加锁失败)。</li>
</ul>
<p>这里利用 <code>Redis set key</code> 时的一个 NX 参数可以保证在这个 key 不存在的情况下写入成功。并且再加上 EX 参数可以让该 key 在超时之后自动删除。</p>
<p>所以利用以上两个特性可以保证在同一时刻只会有一个进程获得锁，并且不会出现死锁(最坏的情况就是超时自动删除 key)。</p>
<h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, String request)</span> </span>&#123;</div><div class="line">    String result = <span class="keyword">this</span>.jedis.set(LOCK_PREFIX + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (LOCK_MSG.equals(result))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里使用的 jedis 的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">set</span><span class="params">(String key, String value, String nxxx, String expx, <span class="keyword">long</span> time)</span></span>;</div></pre></td></tr></table></figure>
<p>api。</p>
<p>该命令可以保证 NX EX 的原子性。</p>
<p>一定不要把两个命令(NX EX)分开执行，如果在 NX 之后程序出现问题就有可能产生死锁。</p>
<h4 id="阻塞锁"><a href="#阻塞锁" class="headerlink" title="阻塞锁"></a>阻塞锁</h4><p>同时也可以实现一个阻塞锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一直阻塞</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">(String key, String request)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;)&#123;</div><div class="line">        String result = <span class="keyword">this</span>.jedis.set(LOCK_PREFIX + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line">        <span class="keyword">if</span> (LOCK_MSG.equals(result))&#123;</div><div class="line">            <span class="keyword">break</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"> <span class="comment">//防止一直消耗 CPU 	</span></div><div class="line">        Thread.sleep(DEFAULT_SLEEP_TIME) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//自定义阻塞时间</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String request,<span class="keyword">int</span> blockTime)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (blockTime &gt;= <span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">        String result = <span class="keyword">this</span>.jedis.set(LOCK_PREFIX + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line">        <span class="keyword">if</span> (LOCK_MSG.equals(result))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        blockTime -= DEFAULT_SLEEP_TIME ;</div><div class="line"></div><div class="line">        Thread.sleep(DEFAULT_SLEEP_TIME) ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>解锁也很简单，其实就是把这个 key 删掉就万事大吉了，比如使用 <code>del key</code> 命令。</p>
<p>但现实往往没有那么 easy。</p>
<p>如果进程 A 获取了锁设置了超时时间，但是由于执行周期较长导致到了超时时间之后锁就自动释放了。这时进程 B 获取了该锁执行很快就释放锁。这样就会出现进程 B 将进程 A 的锁释放了。</p>
<p>所以最好的方式是在每次解锁时都需要判断锁<strong>是否是自己</strong>的。</p>
<p>这时就需要结合加锁机制一起实现了。</p>
<p>加锁时需要传递一个参数，将该参数作为这个 key 的 value，这样每次解锁时判断 value 是否相等即可。</p>
<p>所以解锁代码就不能是简单的 <code>del</code>了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(String key,String request)</span></span>&#123;</div><div class="line">    <span class="comment">//lua script</span></div><div class="line">    String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</div><div class="line"></div><div class="line">    Object result = <span class="keyword">null</span> ;</div><div class="line">    <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> Jedis)&#123;</div><div class="line">        result = ((Jedis)<span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(LOCK_PREFIX + key), Collections.singletonList(request));</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> JedisCluster)&#123;</div><div class="line">        result = ((JedisCluster)<span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(LOCK_PREFIX + key), Collections.singletonList(request));</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//throw new RuntimeException("instance is error") ;</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (UNLOCK_MSG.equals(result))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了一个 <code>lua</code> 脚本来判断 value 是否相等，相等才执行 del 命令。</p>
<p>使用 <code>lua</code> 也可以保证这里两个操作的原子性。</p>
<p>因此上文提到的四个基本特性也能满足了：</p>
<ul>
<li>使用 Redis 可以保证性能。</li>
<li>阻塞锁与非阻塞锁见上文。</li>
<li>利用超时机制解决了死锁。</li>
<li>Redis 支持集群部署提高了可用性。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我自己有撸了一个完整的实现，并且已经用于了生产，有兴趣的朋友可以开箱使用:</p>
<p>maven 依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.crossoverjie.opensource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>distributed-redis-lock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置 bean :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">        RedisLock redisLock = <span class="keyword">new</span> RedisLock() ;</div><div class="line">        HostAndPort hostAndPort = <span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7000</span>) ;</div><div class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(hostAndPort) ;</div><div class="line">        <span class="comment">// Jedis 或 JedisCluster 都可以</span></div><div class="line">        redisLock.setJedisCluster(jedisCluster) ;</div><div class="line">        <span class="keyword">return</span> redisLock ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisLock redisLock ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">    String key = <span class="string">"key"</span>;</div><div class="line">    String request = UUID.randomUUID().toString();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">boolean</span> locktest = redisLock.tryLock(key, request);</div><div class="line">        <span class="keyword">if</span> (!locktest) &#123;</div><div class="line">            System.out.println(<span class="string">"locked error"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//do something</span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        redisLock.unlock(key,request) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用很简单。这里主要是想利用 Spring 来帮我们管理 RedisLock 这个单例的 bean，所以在释放锁的时候需要手动(因为整个上下文只有一个 RedisLock 实例)的传入 key 以及 request(api 看起来不是特别优雅)。</p>
<p>也可以在每次使用锁的时候 new 一个 RedisLock 传入 key 以及 request，这样倒是在解锁时很方便。但是需要自行管理 RedisLock 的实例。各有优劣吧。</p>
<p>项目源码在：</p>
<p><a href="https://github.com/crossoverJie/distributed-lock-redis" target="_blank" rel="external">https://github.com/crossoverJie/distributed-lock-redis</a></p>
<p>欢迎讨论。</p>
<h2 id="单测"><a href="#单测" class="headerlink" title="单测"></a>单测</h2><p>在做这个项目的时候让我不得不想提一下<strong>单测</strong>。</p>
<p>因为这个应用是强依赖于第三方组件的(Redis)，但是在单测中我们需要排除掉这种依赖。比如其他伙伴 fork 了该项目想在本地跑一遍单测，结果运行不起来：</p>
<ol>
<li>有可能是 Redis 的 ip、端口和单测里的不一致。</li>
<li>Redis 自身可能也有问题。</li>
<li>也有可能是该同学的环境中并没有 Redis。</li>
</ol>
<p>所以最好是要把这些外部不稳定的因素排除掉，单测只测我们写好的代码。</p>
<p>于是就可以引入单测利器 <code>Mock</code> 了。</p>
<p>它的想法很简答，就是要把你所依赖的外部资源统统屏蔽掉。如：数据库、外部接口、外部文件等等。</p>
<p>使用方式也挺简单，可以参考该项目的单测：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String key = <span class="string">"test"</span>;</div><div class="line">    String request = UUID.randomUUID().toString();</div><div class="line">    Mockito.when(jedisCluster.set(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),</div><div class="line">            Mockito.anyString(), Mockito.anyLong())).thenReturn(<span class="string">"OK"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> locktest = redisLock.tryLock(key, request);</div><div class="line">    System.out.println(<span class="string">"locktest="</span> + locktest);</div><div class="line"></div><div class="line">    Assert.assertTrue(locktest);</div><div class="line"></div><div class="line">    <span class="comment">//check</span></div><div class="line">    Mockito.verify(jedisCluster).set(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),</div><div class="line">            Mockito.anyString(), Mockito.anyLong());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是简单演示下，可以的话下次仔细分析分析。</p>
<p>它的原理其实也挺简单，debug 的话可以很直接的看出来：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpxho866hbj311u0ej42f.jpg" alt=""></p>
<p>这里我们所依赖的 JedisCluster 其实是一个 <code>cglib 代理对象</code>。所以也不难想到它是如何工作的。</p>
<p>比如这里我们需要用到 JedisCluster 的 set 函数并需要它的返回值。</p>
<p>Mock 就将该对象代理了，并在实际执行 set 方法后给你返回了一个你自定义的值。</p>
<p>这样我们就可以随心所欲的测试了，<strong>完全把外部依赖所屏蔽了</strong>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此一个基于 Redis 的分布式锁完成，但是依然有些问题。</p>
<ul>
<li>如在 key 超时之后业务并没有执行完毕但却自动释放锁了，这样就会导致并发问题。</li>
<li>就算 Redis 是集群部署的，如果每个节点都只是 master 没有 slave，那么 master 宕机时该节点上的所有 key 在那一时刻都相当于是释放锁了，这样也会出现并发问题。就算是有 slave 节点，但如果在数据同步到 salve 之前 master 宕机也是会出现上面的问题。</li>
</ul>
<p>感兴趣的朋友还可以参考 <a href="https://github.com/redisson/redisson" target="_blank" rel="external">Redisson</a> 的实现。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fpvathnbf6j31kw11xwl3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;分布式锁在分布式应用中应用广泛，想要搞懂一个新事物首先得了解它的由来，这样才能更加的理解甚至可以举一反三。&lt;/p&gt;
&lt;p&gt;首先谈到分布式锁自然也就联想到分布式应用。&lt;/p&gt;
&lt;p&gt;在我们将应用拆分为分布式应用之前的单机系统中，对一些并发场景读取公共资源时如扣库存，卖车票之类的需求可以简单的使用&lt;a href=&quot;http://crossoverjie.top/2018/01/14/Synchronize/&quot;&gt;同步&lt;/a&gt;或者是&lt;a href=&quot;http://crossoverjie.top/2018/01/25/ReentrantLock/&quot;&gt;加锁&lt;/a&gt;就可以实现。&lt;/p&gt;
&lt;p&gt;但是应用分布式了之后系统由以前的单进程多线程的程序变为了多进程多线程，这时使用以上的解决方案明显就不够了。&lt;/p&gt;
&lt;p&gt;因此业界常用的解决方案通常是借助于一个第三方组件并利用它自身的排他性来达到多进程的互斥。如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 DB 的唯一索引。&lt;/li&gt;
&lt;li&gt;基于 ZK 的临时有序节点。&lt;/li&gt;
&lt;li&gt;基于 Redis 的 &lt;code&gt;NX EX&lt;/code&gt; 参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里主要基于 Redis 进行讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="Distributed Tools" scheme="http://crossoverjie.top/categories/Distributed-Tools/"/>
    
    
      <category term="Distributed Lock" scheme="http://crossoverjie.top/tags/Distributed-Lock/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean 生命周期</title>
    <link href="http://crossoverjie.top/2018/03/21/spring/spring-bean-lifecycle/"/>
    <id>http://crossoverjie.top/2018/03/21/spring/spring-bean-lifecycle/</id>
    <published>2018-03-20T18:10:36.000Z</published>
    <updated>2018-03-21T14:21:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpjstgeir9j30v90kujyq.jpg" alt=""></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring Bean 的生命周期在整个 Spring 中占有很重要的位置，掌握这些可以加深对 Spring 的理解。</p>
<p>首先看下生命周期图：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fpjsamy6uoj30nt0cqq4i.jpg" alt=""></p>
<p>再谈生命周期之前有一点需要先明确：</p>
<blockquote>
<p>Spring 只帮我们管理单例模式 Bean 的<strong>完整</strong>生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。</p>
</blockquote>
<a id="more"></a>
<h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>在 bean 初始化时会经历几个阶段，首先可以使用注解 <code>@PostConstruct</code>, <code>@PreDestroy</code> 来在 bean 的创建和销毁阶段进行调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationBean</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(AnnotationBean.class);</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"AnnotationBean start"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PreDestroy</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"AnnotationBean destroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="InitializingBean-DisposableBean-接口"><a href="#InitializingBean-DisposableBean-接口" class="headerlink" title="InitializingBean, DisposableBean 接口"></a>InitializingBean, DisposableBean 接口</h3><p>还可以实现 <code>InitializingBean,DisposableBean</code> 这两个接口，也是在初始化以及销毁阶段调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">DisposableBean</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycleService.class);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycleService start"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycleService destroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义初始化和销毁方法"><a href="#自定义初始化和销毁方法" class="headerlink" title="自定义初始化和销毁方法"></a>自定义初始化和销毁方法</h3><p>也可以自定义方法用于在初始化、销毁阶段调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"start"</span>, destroyMethod = <span class="string">"destroy"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SpringLifeCycle <span class="title">create</span><span class="params">()</span></span>&#123;</div><div class="line">        SpringLifeCycle springLifeCycle = <span class="keyword">new</span> SpringLifeCycle() ;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> springLifeCycle ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycle</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycle.class);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycle start"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycle destroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是在 SpringBoot 中可以这样配置，如果是原始的基于 XML 也是可以使用:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.crossoverjie.spring.SpringLifeCycle"</span> <span class="attr">init-method</span>=<span class="string">"start"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>来达到同样的效果。</p>
<h3 id="实现-Aware-接口"><a href="#实现-Aware-接口" class="headerlink" title="实现 *Aware 接口"></a>实现 *Aware 接口</h3><p><code>*Aware</code> 接口可以用于在初始化 bean 时获得 Spring 中的一些对象，如获取 <code>Spring 上下文</code>等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleAware</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycleAware.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationContext applicationContext ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.applicationContext = applicationContext ;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycleAware start"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在 <code>springLifeCycleAware</code> 这个 bean 初始化会就会调用 <code>setApplicationContext</code> 方法，并可以获得 <code>applicationContext</code> 对象。</p>
<h3 id="BeanPostProcessor-增强处理器"><a href="#BeanPostProcessor-增强处理器" class="headerlink" title="BeanPostProcessor 增强处理器"></a>BeanPostProcessor 增强处理器</h3><p>实现 BeanPostProcessor 接口，Spring 中所有 bean 在做初始化时都会调用该接口中的两个方法，可以用于对一些特殊的 bean 进行处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycleProcessor.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 预初始化 初始化之前调用</div><div class="line">     * <span class="doctag">@param</span> bean</div><div class="line">     * <span class="doctag">@param</span> beanName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> BeansException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"annotationBean"</span>.equals(beanName))&#123;</div><div class="line">            LOGGER.info(<span class="string">"SpringLifeCycleProcessor start beanName=&#123;&#125;"</span>,beanName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 后初始化  bean 初始化完成调用</div><div class="line">     * <span class="doctag">@param</span> bean</div><div class="line">     * <span class="doctag">@param</span> beanName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> BeansException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"annotationBean"</span>.equals(beanName))&#123;</div><div class="line">            LOGGER.info(<span class="string">"SpringLifeCycleProcessor end beanName=&#123;&#125;"</span>,beanName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行之后观察结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">018-03-21 00:40:24.856 [restartedMain] INFO  c.c.s.p.SpringLifeCycleProcessor - SpringLifeCycleProcessor start beanName=annotationBean</div><div class="line">2018-03-21 00:40:24.860 [restartedMain] INFO  c.c.spring.annotation.AnnotationBean - AnnotationBean start</div><div class="line">2018-03-21 00:40:24.861 [restartedMain] INFO  c.c.s.p.SpringLifeCycleProcessor - SpringLifeCycleProcessor end beanName=annotationBean</div><div class="line">2018-03-21 00:40:24.864 [restartedMain] INFO  c.c.s.aware.SpringLifeCycleAware - SpringLifeCycleAware start</div><div class="line">2018-03-21 00:40:24.867 [restartedMain] INFO  c.c.s.service.SpringLifeCycleService - SpringLifeCycleService start</div><div class="line">2018-03-21 00:40:24.887 [restartedMain] INFO  c.c.spring.SpringLifeCycle - SpringLifeCycle start</div><div class="line">2018-03-21 00:40:25.062 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729</div><div class="line">2018-03-21 00:40:25.122 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup</div><div class="line">2018-03-21 00:40:25.140 [restartedMain] INFO  com.crossoverjie.Application - Started Application in 2.309 seconds (JVM running for 3.681)</div><div class="line">2018-03-21 00:40:25.143 [restartedMain] INFO  com.crossoverjie.Application - start ok!</div><div class="line">2018-03-21 00:40:25.153 [Thread-8] INFO  o.s.c.a.AnnotationConfigApplicationContext - Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@3913adad: startup date [Wed Mar 21 00:40:23 CST 2018]; root of context hierarchy</div><div class="line">2018-03-21 00:40:25.155 [Thread-8] INFO  o.s.j.e.a.AnnotationMBeanExporter - Unregistering JMX-exposed beans on shutdown</div><div class="line">2018-03-21 00:40:25.156 [Thread-8] INFO  c.c.spring.SpringLifeCycle - SpringLifeCycle destroy</div><div class="line">2018-03-21 00:40:25.156 [Thread-8] INFO  c.c.s.service.SpringLifeCycleService - SpringLifeCycleService destroy</div><div class="line">2018-03-21 00:40:25.156 [Thread-8] INFO  c.c.spring.annotation.AnnotationBean - AnnotationBean destroy</div></pre></td></tr></table></figure>
<p>直到 Spring 上下文销毁时则会调用自定义的销毁方法以及实现了 <code>DisposableBean</code> 的 <code>destroy()</code> 方法。</p>
<h3 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h3><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fpjstgeir9j30v90kujyq.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Spring Bean 的生命周期在整个 Spring 中占有很重要的位置，掌握这些可以加深对 Spring 的理解。&lt;/p&gt;
&lt;p&gt;首先看下生命周期图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fpjsamy6uoj30nt0cqq4i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;再谈生命周期之前有一点需要先明确：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring 只帮我们管理单例模式 Bean 的&lt;strong&gt;完整&lt;/strong&gt;生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://crossoverjie.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://crossoverjie.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>深入理解线程通信</title>
    <link href="http://crossoverjie.top/2018/03/16/java-senior/thread-communication/"/>
    <id>http://crossoverjie.top/2018/03/16/java-senior/thread-communication/</id>
    <published>2018-03-16T12:10:36.000Z</published>
    <updated>2018-03-18T16:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fpey91u1opj30z00aogo6.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发中不免会遇到需要所有子线程执行完毕通知主线程处理某些逻辑的场景。</p>
<p>或者是线程 A 在执行到某个条件通知线程 B 执行某个操作。</p>
<p>可以通过以下几种方式实现：</p>
<h2 id="等待通知机制"><a href="#等待通知机制" class="headerlink" title="等待通知机制"></a>等待通知机制</h2><blockquote>
<p>等待通知模式是 Java 中比较经典的线程通信方式。</p>
</blockquote>
<p>两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。</p>
<p>如两个线程交替打印奇偶数：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoThreadWaitNotify</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TwoThreadWaitNotify twoThread = <span class="keyword">new</span> TwoThreadWaitNotify();</div><div class="line"></div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> OuNum(twoThread));</div><div class="line">        t1.setName(<span class="string">"A"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> JiNum(twoThread));</div><div class="line">        t2.setName(<span class="string">"B"</span>);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 偶数线程</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OuNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.number = number;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</div><div class="line">                    System.out.println(<span class="string">"偶数线程抢到锁了"</span>);</div><div class="line">                    <span class="keyword">if</span> (number.flag) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"+-+偶数"</span> + number.start);</div><div class="line">                        number.start++;</div><div class="line"></div><div class="line">                        number.flag = <span class="keyword">false</span>;</div><div class="line">                        TwoThreadWaitNotify.class.notify();</div><div class="line"></div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            TwoThreadWaitNotify.class.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 奇数线程</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JiNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JiNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.number = number;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</div><div class="line">                    System.out.println(<span class="string">"奇数线程抢到锁了"</span>);</div><div class="line">                    <span class="keyword">if</span> (!number.flag) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"+-+奇数"</span> + number.start);</div><div class="line">                        number.start++;</div><div class="line"></div><div class="line">                        number.flag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">                        TwoThreadWaitNotify.class.notify();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            TwoThreadWaitNotify.class.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">t2+-+奇数93</div><div class="line">t1+-+偶数94</div><div class="line">t2+-+奇数95</div><div class="line">t1+-+偶数96</div><div class="line">t2+-+奇数97</div><div class="line">t1+-+偶数98</div><div class="line">t2+-+奇数99</div><div class="line">t1+-+偶数100</div></pre></td></tr></table></figure>
<p>这里的线程 A 和线程 B 都对同一个对象 <code>TwoThreadWaitNotify.class</code> 获取锁，A 线程调用了同步对象的 wait() 方法释放了锁并进入 <code>WAITING</code> 状态。</p>
<p>B 线程调用了 notify() 方法，这样 A 线程收到通知之后就可以从 wait() 方法中返回。</p>
<p>这里利用了 <code>TwoThreadWaitNotify.class</code> 对象完成了通信。</p>
<p>有一些需要注意:</p>
<ul>
<li>wait() 、nofify() 、nofityAll() 调用的前提都是获得了对象的锁(也可称为对象监视器)。</li>
<li>调用 wait() 方法后线程会释放锁，进入 <code>WAITING</code> 状态，该线程也会被移动到<strong>等待队列</strong>中。</li>
<li>调用 notify() 方法会将<strong>等待队列</strong>中的线程移动到<strong>同步队列</strong>中，线程状态也会更新为 <code>BLOCKED</code></li>
<li>从 wait() 方法返回的前提是调用 notify() 方法的线程释放锁，wait() 方法的线程获得锁。</li>
</ul>
<p>等待通知有着一个经典范式：</p>
<p>线程 A 作为消费者：</p>
<ol>
<li>获取对象的锁。</li>
<li>进入 while(判断条件)，并调用 wait() 方法。</li>
<li>当条件满足跳出循环执行具体处理逻辑。</li>
</ol>
<p>线程 B 作为生产者:</p>
<ol>
<li>获取对象锁。</li>
<li>更改与线程 A 共用的判断条件。</li>
<li>调用 notify() 方法。</li>
</ol>
<p>伪代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//Thread A</div><div class="line"></div><div class="line">synchronized(Object)&#123;</div><div class="line">    while(条件)&#123;</div><div class="line">        Object.wait();</div><div class="line">    &#125;</div><div class="line">    //do something</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Thread B</div><div class="line">synchronized(Object)&#123;</div><div class="line">    条件=false;//改变条件</div><div class="line">    Object.notify();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join() 方法"></a>join() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;) ;</div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running2"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">4000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;) ;</div><div class="line"></div><div class="line">    t1.start();</div><div class="line">    t2.start();</div><div class="line"></div><div class="line">    <span class="comment">//等待线程1终止</span></div><div class="line">    t1.join();</div><div class="line"></div><div class="line">    <span class="comment">//等待线程2终止</span></div><div class="line">    t2.join();</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"main over"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2018-03-16 20:21:30.967 [Thread-1] INFO  c.c.actual.ThreadCommunication - running2</div><div class="line">2018-03-16 20:21:30.967 [Thread-0] INFO  c.c.actual.ThreadCommunication - running</div><div class="line">2018-03-16 20:21:34.972 [main] INFO  c.c.actual.ThreadCommunication - main over</div></pre></td></tr></table></figure>
<p>在  <code>t1.join()</code> 时会一直阻塞到 t1 执行完毕，所以最终主线程会等待 t1 和 t2 线程执行完毕。</p>
<p>其实从源码可以看出，join() 也是利用的等待通知机制：</p>
<p>核心逻辑:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (isAlive()) &#123;</div><div class="line">    wait(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 join 线程完成后会调用 notifyAll() 方法，是在 JVM 实现中调用，所以这里看不出来。</p>
<h2 id="volatile-共享内存"><a href="#volatile-共享内存" class="headerlink" title="volatile 共享内存"></a>volatile 共享内存</h2><p>因为 Java 是采用共享内存的方式进行线程通信的，所以可以采用以下方式用主线程关闭 A 线程:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volatile</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (flag)&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"正在运行。。。"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Volatile aVolatile = <span class="keyword">new</span> Volatile();</div><div class="line">        <span class="keyword">new</span> Thread(aVolatile,<span class="string">"thread A"</span>).start();</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"main 线程正在运行"</span>) ;</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>) ;</div><div class="line"></div><div class="line">        aVolatile.stopThread();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span></span>&#123;</div><div class="line">        flag = <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">thread A正在运行。。。</div><div class="line">thread A正在运行。。。</div><div class="line">thread A正在运行。。。</div><div class="line">thread A正在运行。。。</div><div class="line">thread A执行完毕</div></pre></td></tr></table></figure></p>
<p>这里的 flag 存放于主内存中，所以主线程和线程 A 都可以看到。</p>
<p>flag 采用 volatile 修饰主要是为了内存可见性，更多内容可以查看<a href="http://crossoverjie.top/2018/03/09/volatile/">这里</a>。</p>
<h2 id="CountDownLatch-并发工具"><a href="#CountDownLatch-并发工具" class="headerlink" title="CountDownLatch 并发工具"></a>CountDownLatch 并发工具</h2><p>CountDownLatch 可以实现 join 相同的功能，但是更加的灵活。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countDownLatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    <span class="keyword">int</span> thread = <span class="number">3</span> ;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="keyword">final</span> CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(thread);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span> ;i&lt;thread ; i++)&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">2000</span>);</div><div class="line">                    countDown.countDown();</div><div class="line"></div><div class="line">                    LOGGER.info(<span class="string">"thread end"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    countDown.await();</div><div class="line">    <span class="keyword">long</span> stop = System.currentTimeMillis();</div><div class="line">    LOGGER.info(<span class="string">"main over total time=&#123;&#125;"</span>,stop-start);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2018-03-16 20:19:44.126 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-16 20:19:44.126 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-16 20:19:44.126 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-16 20:19:46.136 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread end</div><div class="line">2018-03-16 20:19:46.136 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread end</div><div class="line">2018-03-16 20:19:46.136 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread end</div><div class="line">2018-03-16 20:19:46.136 [main] INFO  c.c.actual.ThreadCommunication - main over total time=2012</div></pre></td></tr></table></figure>
<p>CountDownLatch 也是基于 AQS(AbstractQueuedSynchronizer) 实现的，更多实现参考 <a href="http://crossoverjie.top/2018/01/25/ReentrantLock/">ReentrantLock 实现原理</a></p>
<ul>
<li>初始化一个 CountDownLatch 时告诉并发的线程，然后在每个线程处理完毕之后调用 countDown() 方法。</li>
<li>该方法会将 AQS 内置的一个 state 状态 -1 。</li>
<li>最终在主线程调用 await() 方法，它会阻塞直到 <code>state == 0</code> 的时候返回。</li>
</ul>
<h2 id="CyclicBarrier-并发工具"><a href="#CyclicBarrier-并发工具" class="headerlink" title="CyclicBarrier 并发工具"></a>CyclicBarrier 并发工具</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cyclicBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                cyclicBarrier.await() ;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"thread end do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                cyclicBarrier.await() ;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"thread end do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">5000</span>);</div><div class="line">                cyclicBarrier.await() ;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"thread end do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"main thread"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CyclicBarrier 中文名叫做屏障或者是栅栏，也可以用于线程间通信。</p>
<p>它可以等待 N 个线程都达到某个状态后继续运行的效果。</p>
<ol>
<li>首先初始化线程参与者。</li>
<li>调用 <code>await()</code> 将会在所有参与者线程都调用之前等待。</li>
<li>直到所有参与者都调用了 <code>await()</code> 后，所有线程从 <code>await()</code> 返回继续后续逻辑。</li>
</ol>
<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2018-03-18 22:40:00.731 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-18 22:40:00.731 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-18 22:40:00.731 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-18 22:40:00.731 [main] INFO  c.c.actual.ThreadCommunication - main thread</div><div class="line">2018-03-18 22:40:05.741 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread end do something</div><div class="line">2018-03-18 22:40:05.741 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread end do something</div><div class="line">2018-03-18 22:40:05.741 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread end do something</div></pre></td></tr></table></figure>
<p>可以看出由于其中一个线程休眠了五秒，所有其余所有的线程都得等待这个线程调用 <code>await()</code> 。</p>
<p>该工具可以实现 CountDownLatch 同样的功能，但是要更加灵活。甚至可以调用 <code>reset()</code> 方法重置 CyclicBarrier (需要自行捕获 BrokenBarrierException 处理) 然后重新执行。</p>
<h2 id="线程响应中断"><a href="#线程响应中断" class="headerlink" title="线程响应中断"></a>线程响应中断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> ( !Thread.currentThread().isInterrupted()) &#123;</div><div class="line">            <span class="comment">// 线程执行具体逻辑</span></div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"运行中。。"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"退出。。"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> StopThread(), <span class="string">"thread A"</span>);</div><div class="line">        thread.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"main 线程正在运行"</span>) ;</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>) ;</div><div class="line">        thread.interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">thread A运行中。。</div><div class="line">thread A运行中。。</div><div class="line">thread A退出。。</div></pre></td></tr></table></figure>
<p>可以采用中断线程的方式来通信，调用了 <code>thread.interrupt()</code> 方法其实就是将 thread 中的一个标志属性置为了 true。</p>
<p>并不是说调用了该方法就可以中断线程，如果不对这个标志进行响应其实是没有什么作用(这里对这个标志进行了判断)。</p>
<p><strong>但是如果抛出了 InterruptedException 异常，该标志就会被 JVM 重置为 false。</strong></p>
<h2 id="线程池-awaitTermination-方法"><a href="#线程池-awaitTermination-方法" class="headerlink" title="线程池 awaitTermination() 方法"></a>线程池 awaitTermination() 方法</h2><p>如果是用线程池来管理线程，可以使用以下方式来让主线程等待线程池中所有任务执行完毕:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executorService</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    BlockingQueue&lt;Runnable&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>) ;</div><div class="line">    ThreadPoolExecutor poolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>, TimeUnit.MILLISECONDS,queue) ;</div><div class="line">    poolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    poolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running2"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    poolExecutor.shutdown();</div><div class="line">    <span class="keyword">while</span> (!poolExecutor.awaitTermination(<span class="number">1</span>,TimeUnit.SECONDS))&#123;</div><div class="line">        LOGGER.info(<span class="string">"线程还在执行。。。"</span>);</div><div class="line">    &#125;</div><div class="line">    LOGGER.info(<span class="string">"main over"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2018-03-16 20:18:01.273 [pool-1-thread-2] INFO  c.c.actual.ThreadCommunication - running2</div><div class="line">2018-03-16 20:18:01.273 [pool-1-thread-1] INFO  c.c.actual.ThreadCommunication - running</div><div class="line">2018-03-16 20:18:02.273 [main] INFO  c.c.actual.ThreadCommunication - 线程还在执行。。。</div><div class="line">2018-03-16 20:18:03.278 [main] INFO  c.c.actual.ThreadCommunication - 线程还在执行。。。</div><div class="line">2018-03-16 20:18:04.278 [main] INFO  c.c.actual.ThreadCommunication - main over</div></pre></td></tr></table></figure>
<p>使用这个 <code>awaitTermination()</code> 方法的前提需要关闭线程池，如调用了 <code>shutdown()</code> 方法。</p>
<p>调用了 <code>shutdown()</code> 之后线程池会停止接受新任务，并且会平滑的关闭线程池中现有的任务。</p>
<h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">piped</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">//面向于字符 PipedInputStream 面向于字节</span></div><div class="line">    PipedWriter writer = <span class="keyword">new</span> PipedWriter();</div><div class="line">    PipedReader reader = <span class="keyword">new</span> PipedReader();</div><div class="line"></div><div class="line">    <span class="comment">//输入输出流建立连接</span></div><div class="line">    writer.connect(reader);</div><div class="line"></div><div class="line"></div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">                    writer.write(i+<span class="string">""</span>);</div><div class="line">                    Thread.sleep(<span class="number">10</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    writer.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running2"</span>);</div><div class="line">            <span class="keyword">int</span> msg = <span class="number">0</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> ((msg = reader.read()) != -<span class="number">1</span>) &#123;</div><div class="line">                    LOGGER.info(<span class="string">"msg=&#123;&#125;"</span>, (<span class="keyword">char</span>) msg);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    t1.start();</div><div class="line">    t2.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2018-03-16 19:56:43.014 [Thread-0] INFO  c.c.actual.ThreadCommunication - running</div><div class="line">2018-03-16 19:56:43.014 [Thread-1] INFO  c.c.actual.ThreadCommunication - running2</div><div class="line">2018-03-16 19:56:43.130 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=0</div><div class="line">2018-03-16 19:56:43.132 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=1</div><div class="line">2018-03-16 19:56:43.132 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=2</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=3</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=4</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=5</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=6</div><div class="line">2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=7</div><div class="line">2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=8</div><div class="line">2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=9</div></pre></td></tr></table></figure>
<p>Java 虽说是基于内存通信的，但也可以使用管道通信。</p>
<p>需要注意的是，输入流和输出流需要首先建立连接。这样线程 B 就可以收到线程 A 发出的消息了。</p>
<p>实际开发中可以灵活根据需求选择最适合的线程通信方式。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fpey91u1opj30z00aogo6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发中不免会遇到需要所有子线程执行完毕通知主线程处理某些逻辑的场景。&lt;/p&gt;
&lt;p&gt;或者是线程 A 在执行到某个条件通知线程 B 执行某个操作。&lt;/p&gt;
&lt;p&gt;可以通过以下几种方式实现：&lt;/p&gt;
&lt;h2 id=&quot;等待通知机制&quot;&gt;&lt;a href=&quot;#等待通知机制&quot; class=&quot;headerlink&quot; title=&quot;等待通知机制&quot;&gt;&lt;/a&gt;等待通知机制&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;等待通知模式是 Java 中比较经典的线程通信方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。&lt;/p&gt;
&lt;p&gt;如两个线程交替打印奇偶数：&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="Thread" scheme="http://crossoverjie.top/tags/Thread/"/>
    
      <category term="concurrent" scheme="http://crossoverjie.top/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>你应该知道的 volatile 关键字</title>
    <link href="http://crossoverjie.top/2018/03/09/volatile/"/>
    <id>http://crossoverjie.top/2018/03/09/volatile/</id>
    <published>2018-03-08T18:00:36.000Z</published>
    <updated>2018-03-08T17:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fp5xm7uykoj30v90kugng.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不管是在面试还是实际开发中 <code>volatile</code> 都是一个应该掌握的技能。</p>
<p>首先来看看为什么会出现这个关键字。</p>
<h2 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h2><p>由于 <code>Java</code> 内存模型(<code>JMM</code>)规定，所有的变量都存放在主内存中，而每个线程都有着自己的工作内存(高速缓存)。</p>
<p>线程在工作时，需要将主内存中的数据拷贝到工作内存中。这样对数据的任何操作都是基于工作内存(效率提高)，并且不能直接操作主内存以及其他线程工作内存中的数据，之后再将更新之后的数据刷新到主内存中。</p>
<blockquote>
<p>这里所提到的主内存可以简单认为是<strong>堆内存</strong>，而工作内存则可以认为是<strong>栈内存</strong>。</p>
</blockquote>
<p>如下图所示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fmouu3fpokj31ae0osjt1.jpg" alt=""></p>
<p>所以在并发运行时可能会出现线程 B 所读取到的数据是线程 A 更新之前的数据。</p>
<p>显然这肯定是会出问题的，因此 <code>volatile</code> 的作用出现了：</p>
<blockquote>
<p>当一个变量被 <code>volatile</code> 修饰时，任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了该变量的线程中的数据清空，必须从主内存重新读取最新数据。</p>
</blockquote>
<a id="more"></a>
<p><em><code>volatile</code> 修饰之后并不是让线程直接从主内存中获取数据，依然需要将变量拷贝到工作内存中</em>。</p>
<h3 id="内存可见性的应用"><a href="#内存可见性的应用" class="headerlink" title="内存可见性的应用"></a>内存可见性的应用</h3><p>当我们需要在两个线程间依据主内存通信时，通信的那个变量就必须的用 <code>volatile</code> 来修饰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volatile</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (flag)&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"正在运行。。。"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Volatile aVolatile = <span class="keyword">new</span> Volatile();</div><div class="line">        <span class="keyword">new</span> Thread(aVolatile,<span class="string">"thread A"</span>).start();</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"main 线程正在运行"</span>) ;</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>) ;</div><div class="line"></div><div class="line">        aVolatile.stopThread();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span></span>&#123;</div><div class="line">        flag = <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程在修改了标志位使得线程 A 立即停止，如果没有用 <code>volatile</code> 修饰，就有可能出现延迟。</p>
<p>但这里有个误区，这样的使用方式容易给人的感觉是：</p>
<blockquote>
<p>对 <code>volatile</code> 修饰的变量进行并发操作是线程安全的。</p>
</blockquote>
<p>这里要重点强调，<code>volatile</code> 并<strong>不能</strong>保证线程安全性！</p>
<p>如下程序:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileInc</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span> ; <span class="comment">//使用 volatile 修饰基本数据内存不能保证原子性</span></div><div class="line"></div><div class="line">    <span class="comment">//private static AtomicInteger count = new AtomicInteger() ;</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span> ;i++)&#123;</div><div class="line">            count ++ ;</div><div class="line">            <span class="comment">//count.incrementAndGet() ;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        VolatileInc volatileInc = <span class="keyword">new</span> VolatileInc() ;</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(volatileInc,<span class="string">"t1"</span>) ;</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(volatileInc,<span class="string">"t2"</span>) ;</div><div class="line">        t1.start();</div><div class="line">        <span class="comment">//t1.join();</span></div><div class="line"></div><div class="line">        t2.start();</div><div class="line">        <span class="comment">//t2.join();</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span> ;i++)&#123;</div><div class="line">            count ++ ;</div><div class="line">            <span class="comment">//count.incrementAndGet();</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"最终Count="</span>+count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们三个线程(t1,t2,main)同时对一个 <code>int</code> 进行累加时会发现最终的值都会小于 30000。</p>
<blockquote>
<p>这是因为虽然 <code>volatile</code> 保证了内存可见性，每个线程拿到的值都是最新值，但 <code>count ++</code> 这个操作并不是原子的，这里面涉及到获取值、自增、赋值的操作并不能同时完成。</p>
</blockquote>
<ul>
<li><p>所以想到达到线程安全可以使这三个线程串行执行(其实就是单线程，没有发挥多线程的优势)。</p>
</li>
<li><p>也可以使用 <code>synchronize</code> 或者是锁的方式来保证原子性。</p>
</li>
<li><p>还可以用 <code>Atomic</code> 包中 <code>AtomicInteger</code> 来替换 <code>int</code>，它利用了 <code>CAS</code> 算法来保证了原子性。</p>
</li>
</ul>
<h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>内存可见性只是 <code>volatile</code> 的其中一个语义，它还可以防止 <code>JVM</code> 进行指令重排优化。</p>
<p>举一个伪代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a=<span class="number">10</span> ;<span class="comment">//1</span></div><div class="line"><span class="keyword">int</span> b=<span class="number">20</span> ;<span class="comment">//2</span></div><div class="line"><span class="keyword">int</span> c= a+b ;<span class="comment">//3</span></div></pre></td></tr></table></figure>
<p>一段特别简单的代码，理想情况下它的执行顺序是：<code>1&gt;2&gt;3</code>。但有可能经过 JVM 优化之后的执行顺序变为了 <code>2&gt;1&gt;3</code>。</p>
<p>可以发现不管 JVM 怎么优化，前提都是保证单线程中最终结果不变的情况下进行的。</p>
<p>可能这里还看不出有什么问题，那看下一段伪代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; value ;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = fasle ;</div><div class="line"></div><div class="line"><span class="comment">//以下方法发生在线程 A 中 初始化 Map</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//耗时操作</span></div><div class="line">	value = getMapValue() ;<span class="comment">//1</span></div><div class="line">	flag = <span class="keyword">true</span> ;<span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//发生在线程 B中 等到 Map 初始化成功进行其他操作</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span>(!flag)&#123;</div><div class="line">		sleep() ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//dosomething</span></div><div class="line">	doSomeThing(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就能看出问题了，当 <code>flag</code> 没有被 <code>volatile</code> 修饰时，<code>JVM</code> 对 1 和 2 进行重排，导致 <code>value</code> 都还没有被初始化就有可能被线程 B 使用了。</p>
<p>所以加上 <code>volatile</code> 之后可以防止这样的重排优化，保证业务的正确性。</p>
<h3 id="指令重排的的应用"><a href="#指令重排的的应用" class="headerlink" title="指令重排的的应用"></a>指令重排的的应用</h3><p>一个经典的使用场景就是双重懒加载的单例模式了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//防止指令重排</span></div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 <code>volatile</code> 关键字主要是为了防止指令重排。 </p>
<p>如果不用 ，<code>singleton = new Singleton();</code>，这段代码其实是分为三步：</p>
<ul>
<li>分配内存空间。(1)</li>
<li>初始化对象。(2)</li>
<li>将 <code>singleton</code> 对象指向分配的内存地址。(3)</li>
</ul>
<p>加上 <code>volatile</code> 是为了让以上的三步操作顺序执行，反之有可能第二步在第三步之前被执行就有可能某个线程拿到的单例对象是还没有初始化的，以致于报错。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>volatile</code> 在 <code>Java</code> 并发中用的很多，比如像 <code>Atomic</code> 包中的 <code>value</code>、以及 <code>AbstractQueuedLongSynchronizer</code> 中的 <code>state</code> 都是被定义为 <code>volatile</code> 来用于保证内存可见性。</p>
<p>将这块理解透彻对我们编写并发程序时可以提供很大帮助。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fp5xm7uykoj30v90kugng.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不管是在面试还是实际开发中 &lt;code&gt;volatile&lt;/code&gt; 都是一个应该掌握的技能。&lt;/p&gt;
&lt;p&gt;首先来看看为什么会出现这个关键字。&lt;/p&gt;
&lt;h2 id=&quot;内存可见性&quot;&gt;&lt;a href=&quot;#内存可见性&quot; class=&quot;headerlink&quot; title=&quot;内存可见性&quot;&gt;&lt;/a&gt;内存可见性&lt;/h2&gt;&lt;p&gt;由于 &lt;code&gt;Java&lt;/code&gt; 内存模型(&lt;code&gt;JMM&lt;/code&gt;)规定，所有的变量都存放在主内存中，而每个线程都有着自己的工作内存(高速缓存)。&lt;/p&gt;
&lt;p&gt;线程在工作时，需要将主内存中的数据拷贝到工作内存中。这样对数据的任何操作都是基于工作内存(效率提高)，并且不能直接操作主内存以及其他线程工作内存中的数据，之后再将更新之后的数据刷新到主内存中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里所提到的主内存可以简单认为是&lt;strong&gt;堆内存&lt;/strong&gt;，而工作内存则可以认为是&lt;strong&gt;栈内存&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fmouu3fpokj31ae0osjt1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以在并发运行时可能会出现线程 B 所读取到的数据是线程 A 更新之前的数据。&lt;/p&gt;
&lt;p&gt;显然这肯定是会出问题的，因此 &lt;code&gt;volatile&lt;/code&gt; 的作用出现了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个变量被 &lt;code&gt;volatile&lt;/code&gt; 修饰时，任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了该变量的线程中的数据清空，必须从主内存重新读取最新数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="volatile" scheme="http://crossoverjie.top/tags/volatile/"/>
    
      <category term="concurrent" scheme="http://crossoverjie.top/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap 底层分析</title>
    <link href="http://crossoverjie.top/2018/02/06/LinkedHashMap/"/>
    <id>http://crossoverjie.top/2018/02/06/LinkedHashMap/</id>
    <published>2018-02-06T15:01:36.000Z</published>
    <updated>2018-03-19T05:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fo6w785brkj31g80ytjx5.jpg" alt=""></p>
<p>众所周知 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/HashMap.md" target="_blank" rel="external">HashMap</a> 是一个无序的 <code>Map</code>，因为每次根据 <code>key</code> 的 <code>hashcode</code> 映射到 <code>Entry</code> 数组上，所以遍历出来的顺序并不是写入的顺序。</p>
<p>因此 JDK 推出一个基于 <code>HashMap</code> 但具有顺序的 <code>LinkedHashMap</code> 来解决有排序需求的场景。</p>
<p>它的底层是继承于 <code>HashMap</code> 实现的，由一个双向链表所构成。</p>
<p><code>LinkedHashMap</code> 的排序方式有两种：</p>
<ul>
<li>根据写入顺序排序。</li>
<li>根据访问顺序排序。</li>
</ul>
<p>其中根据访问顺序排序时，每次 <code>get</code> 都会将访问的值移动到链表末尾，这样重复操作就能的到一个按照访问顺序排序的链表。</p>
<a id="more"></a>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	Map&lt;String, Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</div><div class="line">	map.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div><div class="line">	map.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div><div class="line">	map.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div><div class="line">	map.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</div><div class="line">	map.put(<span class="string">"5"</span>,<span class="number">5</span>) ;</div><div class="line">	System.out.println(map.toString());</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调试可以看到 <code>map</code> 的组成：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo6l9xp91lj319m0s4tgi.jpg" alt=""></p>
<p>打开源码可以看到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The head of the doubly linked list.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</div><div class="line"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@serial</span></div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></div><div class="line">    Entry&lt;K,V&gt; before, after;</div><div class="line"></div><div class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 <code>Entry</code> 继承于 <code>HashMap</code> 的 <code>Entry</code>，并新增了上下节点的指针，也就形成了双向链表。</p>
<p>还有一个 <code>header</code> 的成员变量，是这个双向链表的头结点。 </p>
<p>上边的 demo 总结成一张图如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fodggwc523j30za0n4wgj.jpg" alt=""></p>
<p>第一个类似于 <code>HashMap</code> 的结构，利用 <code>Entry</code> 中的 <code>next</code> 指针进行关联。</p>
<p>下边则是 <code>LinkedHashMap</code> 如何达到有序的关键。</p>
<p>就是利用了头节点和其余的各个节点之间通过 <code>Entry</code> 中的 <code>after</code> 和 <code>before</code> 指针进行关联。</p>
<p>其中还有一个 <code>accessOrder</code> 成员变量，默认是 <code>false</code>，默认按照插入顺序排序，为 <code>true</code> 时按照访问顺序排序，也可以调用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public LinkedHashMap(int initialCapacity,</div><div class="line">                     float loadFactor,</div><div class="line">                     boolean accessOrder) &#123;</div><div class="line">    super(initialCapacity, loadFactor);</div><div class="line">    this.accessOrder = accessOrder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个构造方法可以显示的传入 <code>accessOrder</code>。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><code>LinkedHashMap</code> 的构造方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    accessOrder = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是调用的 <code>HashMap</code> 的构造方法:</p>
<p><code>HashMap</code> 实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                           loadFactor);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    threshold = initialCapacity;</div><div class="line">    <span class="comment">//HashMap 只是定义了改方法，具体实现交给了 LinkedHashMap</span></div><div class="line">    init();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到里面有一个空的 <code>init()</code>，具体是由 <code>LinkedHashMap</code> 来实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    header = <span class="keyword">new</span> Entry&lt;&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    header.before = header.after = header;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实也就是对 <code>header</code> 进行了初始化。</p>
<h2 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h2><p>看 <code>LinkedHashMap</code> 的 <code>put()</code> 方法之前先看看 <code>HashMap</code> 的 <code>put</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public V put(K key, V value) &#123;</div><div class="line">    if (table == EMPTY_TABLE) &#123;</div><div class="line">        inflateTable(threshold);</div><div class="line">    &#125;</div><div class="line">    if (key == null)</div><div class="line">        return putForNullKey(value);</div><div class="line">    int hash = hash(key);</div><div class="line">    int i = indexFor(hash, table.length);</div><div class="line">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            //空实现，交给 LinkedHashMap 自己实现</div><div class="line">            e.recordAccess(this);</div><div class="line">            return oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    // LinkedHashMap 对其重写</div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// LinkedHashMap 对其重写</div><div class="line">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class="line">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class="line">        resize(2 * table.length);</div><div class="line">        hash = (null != key) ? hash(key) : 0;</div><div class="line">        bucketIndex = indexFor(hash, table.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createEntry(hash, key, value, bucketIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// LinkedHashMap 对其重写</div><div class="line">void createEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主体的实现都是借助于 <code>HashMap</code> 来完成的，只是对其中的 <code>recordAccess(), addEntry(), createEntry()</code> 进行了重写。</p>
<p><code>LinkedHashMap</code> 的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//就是判断是否是根据访问顺序排序，如果是则需要将当前这个 Entry 移动到链表的末尾</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">        LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</div><div class="line">        <span class="keyword">if</span> (lm.accessOrder) &#123;</div><div class="line">            lm.modCount++;</div><div class="line">            remove();</div><div class="line">            addBefore(lm.header);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">//调用了 HashMap 的实现，并判断是否需要删除最少使用的 Entry(默认不删除)    </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.addEntry(hash, key, value, bucketIndex);</div><div class="line"></div><div class="line">    <span class="comment">// Remove eldest entry if instructed</span></div><div class="line">    Entry&lt;K,V&gt; eldest = header.after;</div><div class="line">    <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;</div><div class="line">        removeEntryForKey(eldest.key);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];</div><div class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, old);</div><div class="line">    <span class="comment">//就多了这一步，将新增的 Entry 加入到 header 双向链表中</span></div><div class="line">    table[bucketIndex] = e;</div><div class="line">    e.addBefore(header);</div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">//写入到双向链表中</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;</div><div class="line">        after  = existingEntry;</div><div class="line">        before = existingEntry.before;</div><div class="line">        before.after = <span class="keyword">this</span>;</div><div class="line">        after.before = <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h2><p>LinkedHashMap 的 <code>get()</code> 方法也重写了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//多了一个判断是否是按照访问顺序排序，是则将当前的 Entry 移动到链表头部。</span></div><div class="line">    e.recordAccess(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">    LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</div><div class="line">    <span class="keyword">if</span> (lm.accessOrder) &#123;</div><div class="line">        lm.modCount++;</div><div class="line">        </div><div class="line">        <span class="comment">//删除</span></div><div class="line">        remove();</div><div class="line">        <span class="comment">//添加到头部</span></div><div class="line">        addBefore(lm.header);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>clear()</code> 清空就要比较简单了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只需要把指针都指向自己即可，原本那些 Entry 没有引用之后就会被 JVM 自动回收。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.clear();</div><div class="line">    header.before = header.after = header;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说 <code>LinkedHashMap</code> 其实就是对 <code>HashMap</code> 进行了拓展，使用了双向链表来保证了顺序性。</p>
<p>因为是继承与 <code>HashMap</code> 的，所以一些 <code>HashMap</code> 存在的问题 <code>LinkedHashMap</code> 也会存在，比如不支持并发等。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fo6w785brkj31g80ytjx5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;众所周知 &lt;a href=&quot;https://github.com/crossoverJie/Java-Interview/blob/master/MD/HashMap.md&quot;&gt;HashMap&lt;/a&gt; 是一个无序的 &lt;code&gt;Map&lt;/code&gt;，因为每次根据 &lt;code&gt;key&lt;/code&gt; 的 &lt;code&gt;hashcode&lt;/code&gt; 映射到 &lt;code&gt;Entry&lt;/code&gt; 数组上，所以遍历出来的顺序并不是写入的顺序。&lt;/p&gt;
&lt;p&gt;因此 JDK 推出一个基于 &lt;code&gt;HashMap&lt;/code&gt; 但具有顺序的 &lt;code&gt;LinkedHashMap&lt;/code&gt; 来解决有排序需求的场景。&lt;/p&gt;
&lt;p&gt;它的底层是继承于 &lt;code&gt;HashMap&lt;/code&gt; 实现的，由一个双向链表所构成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt; 的排序方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据写入顺序排序。&lt;/li&gt;
&lt;li&gt;根据访问顺序排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中根据访问顺序排序时，每次 &lt;code&gt;get&lt;/code&gt; 都会将访问的值移动到链表末尾，这样重复操作就能的到一个按照访问顺序排序的链表。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="LinkedHashMap" scheme="http://crossoverjie.top/tags/LinkedHashMap/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock 实现原理</title>
    <link href="http://crossoverjie.top/2018/01/25/ReentrantLock/"/>
    <id>http://crossoverjie.top/2018/01/25/ReentrantLock/</id>
    <published>2018-01-25T15:01:36.000Z</published>
    <updated>2018-01-26T07:38:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fnt9p6qc88j31g80yu41d.jpg" alt=""></p>
<p>使用 <code>synchronize</code> 来做同步处理时，锁的获取和释放都是隐式的，实现的原理是通过编译后加上不同的机器指令来实现。</p>
<p>而 <code>ReentrantLock</code> 就是一个普通的类，它是基于 <code>AQS(AbstractQueuedSynchronizer)</code>来实现的。</p>
<p>是一个<strong>重入锁</strong>：一个线程获得了锁之后仍然可以<strong>反复</strong>的加锁，不会出现自己阻塞自己的情况。</p>
<blockquote>
<p><code>AQS</code> 是 <code>Java</code> 并发包里实现锁、同步的一个重要的基础框架。</p>
</blockquote>
<h2 id="锁类型"><a href="#锁类型" class="headerlink" title="锁类型"></a>锁类型</h2><p>ReentrantLock 分为<strong>公平锁</strong>和<strong>非公平锁</strong>，可以通过构造方法来指定具体类型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认非公平锁</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync = <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//公平锁</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认一般使用<strong>非公平锁</strong>，它的效率和吞吐量都比公平锁高的多(后面会分析具体原因)。</p>
<a id="more"></a>
<h2 id="获取锁"><a href="#获取锁" class="headerlink" title="获取锁"></a>获取锁</h2><p>通常的使用方式如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    lock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="comment">//do bussiness</span></div><div class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="公平锁获取锁"><a href="#公平锁获取锁" class="headerlink" title="公平锁获取锁"></a>公平锁获取锁</h3><p>首先看下获取锁的过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.lock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到是使用 <code>sync</code>的方法，而这个方法是一个抽象方法，具体是由其子类(<code>FairSync</code>)来实现的，以下是公平锁的实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">       acquire(<span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">//AbstractQueuedSynchronizer 中的 acquire()</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</div><div class="line">       acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</div><div class="line">       selfInterrupt();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一步是尝试获取锁(<code>tryAcquire(arg)</code>),这个也是由其子类实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">        <span class="keyword">int</span> c = getState();</div><div class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</div><div class="line">                compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">                setExclusiveOwnerThread(current);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">            <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">            setState(nextc);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先会判断 <code>AQS</code> 中的 <code>state</code> 是否等于 0，0 表示目前没有其他线程获得锁，当前线程就可以尝试获取锁。</p>
<p><strong>注意</strong>:尝试之前会利用 <code>hasQueuedPredecessors()</code> 方法来判断 AQS 的队列中中是否有其他线程，如果有则不会尝试获取锁(<strong>这是公平锁特有的情况</strong>)。</p>
<p>如果队列中没有线程就利用 CAS 来将 AQS 中的 state 修改为1，也就是获取锁，获取成功则将当前线程置为获得锁的独占线程(<code>setExclusiveOwnerThread(current)</code>)。</p>
<p>如果 <code>state</code> 大于 0 时，说明锁已经被获取了，则需要判断获取锁的线程是否为当前线程(<code>ReentrantLock</code> 支持重入)，是则需要将 <code>state + 1</code>，并将值更新。</p>
<h4 id="写入队列"><a href="#写入队列" class="headerlink" title="写入队列"></a>写入队列</h4><p>如果 <code>tryAcquire(arg)</code> 获取锁失败，则需要用 <code>addWaiter(Node.EXCLUSIVE)</code> 将当前线程写入队列中。</p>
<p>写入之前需要将当前线程包装为一个 <code>Node</code> 对象(<code>addWaiter(Node.EXCLUSIVE)</code>)。</p>
<blockquote>
<p>AQS 中的队列是由 Node 节点组成的双向链表实现的。</p>
</blockquote>
<p>包装代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</div><div class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</div><div class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></div><div class="line">    Node pred = tail;</div><div class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</div><div class="line">        node.prev = pred;</div><div class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</div><div class="line">            pred.next = node;</div><div class="line">            <span class="keyword">return</span> node;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    enq(node);</div><div class="line">    <span class="keyword">return</span> node;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先判断队列是否为空，不为空时则将封装好的 <code>Node</code> 利用 <code>CAS</code> 写入队尾，如果出现并发写入失败就需要调用 <code>enq(node);</code> 来写入了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        Node t = tail;</div><div class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></div><div class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</div><div class="line">                tail = head;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            node.prev = t;</div><div class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</div><div class="line">                t.next = node;</div><div class="line">                <span class="keyword">return</span> t;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个处理逻辑就相当于<code>自旋</code>加上 <code>CAS</code> 保证一定能写入队列。</p>
<h4 id="挂起等待线程"><a href="#挂起等待线程" class="headerlink" title="挂起等待线程"></a>挂起等待线程</h4><p>写入队列之后需要将当前线程挂起(利用<code>acquireQueued(addWaiter(Node.EXCLUSIVE), arg)</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">final</span> Node p = node.predecessor();</div><div class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</div><div class="line">                setHead(node);</div><div class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></div><div class="line">                failed = <span class="keyword">false</span>;</div><div class="line">                <span class="keyword">return</span> interrupted;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</div><div class="line">                parkAndCheckInterrupt())</div><div class="line">                interrupted = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (failed)</div><div class="line">            cancelAcquire(node);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先会根据 <code>node.predecessor()</code> 获取到上一个节点是否为头节点，如果是则尝试获取一次锁，获取成功就万事大吉了。</p>
<p>如果不是头节点，或者获取锁失败，则会根据上一个节点的 <code>waitStatus</code> 状态来处理(<code>shouldParkAfterFailedAcquire(p, node)</code>)。</p>
<p><code>waitStatus</code> 用于记录当前节点的状态，如节点取消、节点等待等。</p>
<p><code>shouldParkAfterFailedAcquire(p, node)</code> 返回当前线程是否需要挂起，如果需要则调用 <code>parkAndCheckInterrupt()</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</div><div class="line">    LockSupport.park(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> Thread.interrupted();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>他是利用 <code>LockSupport</code> 的 <code>part</code> 方法来挂起当前线程的，直到被唤醒。</p>
<h3 id="非公平锁获取锁"><a href="#非公平锁获取锁" class="headerlink" title="非公平锁获取锁"></a>非公平锁获取锁</h3><p>公平锁与非公平锁的差异主要在获取锁：</p>
<p>公平锁就相当于买票，后来的人需要排到队尾依次买票，<strong>不能插队</strong>。</p>
<p>而非公平锁则没有这些规则，是<strong>抢占模式</strong>，每来一个人不会去管队列如何，直接尝试获取锁。</p>
<p>非公平锁:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//直接尝试获取锁</span></div><div class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</div><div class="line">        setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">    <span class="keyword">else</span></div><div class="line">        acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>公平锁:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</div><div class="line">    acquire(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还要一个重要的区别是在尝试获取锁时<code>tryAcquire(arg)</code>，非公平锁是不需要判断队列中是否还有其他线程，也是直接尝试获取锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</div><div class="line">    <span class="keyword">int</span> c = getState();</div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">//没有 !hasQueuedPredecessors() 判断</span></div><div class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</div><div class="line">            setExclusiveOwnerThread(current);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</div><div class="line">        <span class="keyword">int</span> nextc = c + acquires;</div><div class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</div><div class="line">        setState(nextc);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><p>公平锁和非公平锁的释放流程都是一样的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</div><div class="line">    sync.release(<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</div><div class="line">        Node h = head;</div><div class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</div><div class="line">        	   <span class="comment">//唤醒被挂起的线程</span></div><div class="line">            unparkSuccessor(h);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//尝试释放锁</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> c = getState() - releases;</div><div class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</div><div class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</div><div class="line">        free = <span class="keyword">true</span>;</div><div class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    setState(c);</div><div class="line">    <span class="keyword">return</span> free;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先会判断当前线程是否为获得锁的线程，由于是重入锁所以需要将 <code>state</code> 减到 0 才认为完全释放锁。</p>
<p>释放之后需要调用 <code>unparkSuccessor(h)</code> 来唤醒被挂起的线程。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于公平锁需要关心队列的情况，得按照队列里的先后顺序来获取锁(会造成大量的线程上下文切换)，而非公平锁则没有这个限制。</p>
<p>所以也就能解释非公平锁的效率会被公平锁更高。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1fnt9p6qc88j31g80yu41d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;synchronize&lt;/code&gt; 来做同步处理时，锁的获取和释放都是隐式的，实现的原理是通过编译后加上不同的机器指令来实现。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;ReentrantLock&lt;/code&gt; 就是一个普通的类，它是基于 &lt;code&gt;AQS(AbstractQueuedSynchronizer)&lt;/code&gt;来实现的。&lt;/p&gt;
&lt;p&gt;是一个&lt;strong&gt;重入锁&lt;/strong&gt;：一个线程获得了锁之后仍然可以&lt;strong&gt;反复&lt;/strong&gt;的加锁，不会出现自己阻塞自己的情况。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;AQS&lt;/code&gt; 是 &lt;code&gt;Java&lt;/code&gt; 并发包里实现锁、同步的一个重要的基础框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;锁类型&quot;&gt;&lt;a href=&quot;#锁类型&quot; class=&quot;headerlink&quot; title=&quot;锁类型&quot;&gt;&lt;/a&gt;锁类型&lt;/h2&gt;&lt;p&gt;ReentrantLock 分为&lt;strong&gt;公平锁&lt;/strong&gt;和&lt;strong&gt;非公平锁&lt;/strong&gt;，可以通过构造方法来指定具体类型：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//默认非公平锁&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sync = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NonfairSync();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//公平锁&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; fair)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sync = fair ? &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; FairSync() : &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NonfairSync();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;默认一般使用&lt;strong&gt;非公平锁&lt;/strong&gt;，它的效率和吞吐量都比公平锁高的多(后面会分析具体原因)。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="ReentrantLock" scheme="http://crossoverjie.top/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>对象的创建与内存分配</title>
    <link href="http://crossoverjie.top/2018/01/18/newObject/"/>
    <id>http://crossoverjie.top/2018/01/18/newObject/</id>
    <published>2018-01-17T18:01:36.000Z</published>
    <updated>2018-01-19T16:43:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnkuy01igij31g80tetfy.jpg" alt=""></p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><p>当 <code>JVM</code> 收到一个 <code>new</code> 指令时，会检查指令中的参数在常量池是否有这个符号的引用，还会检查该类是否已经被<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/ClassLoad.md" target="_blank" rel="external">加载</a>过了，如果没有的话则要进行一次类加载。</p>
<p>接着就是分配内存了，通常有两种方式：</p>
<ul>
<li>指针碰撞</li>
<li>空闲列表</li>
</ul>
<p>使用指针碰撞的前提是堆内存是<strong>完全工整</strong>的，用过的内存和没用的内存各在一边每次分配的时候只需要将指针向空闲内存一方移动一段和内存大小相等区域即可。</p>
<p>当堆中已经使用的内存和未使用的内存<strong>互相交错</strong>时，指针碰撞的方式就行不通了，这时就需要采用空闲列表的方式。虚拟机会维护一个空闲的列表，用于记录哪些内存是可以进行分配的，分配时直接从可用内存中直接分配即可。</p>
<p>堆中的内存是否工整是有<strong>垃圾收集器</strong>来决定的，如果带有压缩功能的垃圾收集器就是采用指针碰撞的方式来进行内存分配的。</p>
<a id="more"></a>
<p>分配内存时也会出现并发问题:</p>
<p>这样可以在创建对象的时候使用 <code>CAS</code> 这样的乐观锁来保证。</p>
<p>也可以将内存分配安排在每个线程独有的空间进行，每个线程首先在堆内存中分配一小块内存，称为本地分配缓存(<code>TLAB : Thread Local Allocation Buffer</code>)。</p>
<p>分配内存时，只需要在自己的分配缓存中分配即可，由于这个内存区域是线程私有的，所以不会出现并发问题。</p>
<p>可以使用 <code>-XX:+/-UseTLAB</code> 参数来设定 JVM 是否开启 <code>TLAB</code> 。</p>
<p>内存分配之后需要对该对象进行设置，如对象头。对象头的一些应用可以查看 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/Synchronize.md" target="_blank" rel="external">Synchronize 关键字原理</a>。</p>
<h3 id="对象访问"><a href="#对象访问" class="headerlink" title="对象访问"></a>对象访问</h3><p>一个对象被创建之后自然是为了使用，在 Java 中是通过栈来引用堆内存中的对象来进行操作的。</p>
<p>对于我们常用的 <code>HotSpot</code> 虚拟机来说，这样引用关系是通过直接指针来关联的。</p>
<p>如图:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fnkmy0bvu3j30o60heaaq.jpg" alt=""></p>
<p>这样的好处就是：在 Java 里进行频繁的对象访问可以提升访问速度(相对于使用句柄池来说)。</p>
<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h3 id="Eden-区分配"><a href="#Eden-区分配" class="headerlink" title="Eden 区分配"></a>Eden 区分配</h3><p>简单的来说对象都是在堆内存中分配的，往细一点看则是优先在 <code>Eden</code> 区分配。</p>
<p>这里就涉及到堆内存的划分了，为了方便垃圾回收，JVM 将对内存分为新生代和老年代。</p>
<p>而新生代中又会划分为 <code>Eden</code> 区，<code>from Survivor、to Survivor</code> 区。</p>
<p>其中 <code>Eden</code> 和 <code>Survivor</code> 区的比例默认是 <code>8:1:1</code>，当然也支持参数调整 <code>-XX:SurvivorRatio=8</code>。</p>
<p>当在 <code>Eden</code> 区分配内存不足时，则会发生 <code>minorGC</code> ，由于 <code>Java</code> 对象多数是<strong>朝生夕灭</strong>的特性，所以 <code>minorGC</code> 通常会比较频繁，效率也比较高。</p>
<p>当发生 <code>minorGC</code> 时，JVM 会根据<a href="https://github.com/crossoverJie/Java-Interview/blob/145064ecf867e898ad025f3467b7ada9086fc8dd/MD/GarbageCollection.md#%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95" target="_blank" rel="external">复制算法</a>将存活的对象拷贝到另一个未使用的 <code>Survivor</code> 区，如果 <code>Survivor</code> 区内存不足时，则会使用分配担保策略将对象移动到老年代中。</p>
<p>谈到 <code>minorGC</code> 时，就不得不提到 <code>fullGC(majorGC)</code> ，这是指发生在老年代的 <code>GC</code> ，不论是效率还是速度都比 <code>minorGC</code> 慢的多，回收时还会发生 <code>stop the world</code> 使程序发生停顿，所以应当尽量避免发生 <code>fullGC</code> 。</p>
<h3 id="老年代分配"><a href="#老年代分配" class="headerlink" title="老年代分配"></a>老年代分配</h3><p>也有一些情况会导致对象直接在老年代分配，比如当分配一个大对象时(大的数组，很长的字符串)，由于 <code>Eden</code> 区没有足够大的连续空间来分配时，会导致提前触发一次 <code>GC</code>，所以尽量别频繁的创建大对象。</p>
<p>因此 <code>JVM</code> 会根据一个阈值来判断大于该阈值对象直接分配到老年代，这样可以避免在新生代频繁的发生 <code>GC</code>。</p>
<p>对于一些在新生代的老对象 <code>JVM</code> 也会根据某种机制移动到老年代中。</p>
<p>JVM 是根据记录对象年龄的方式来判断该对象是否应该移动到老年代，根据新生代的复制算法，当一个对象被移动到 <code>Survivor</code> 区之后 JVM 就给该对象的年龄记为1，每当熬过一次 <code>minorGC</code> 后对象的年龄就 +1 ，直到达到阈值(默认为15)就移动到老年代中。</p>
<blockquote>
<p>可以使用 <code>-XX:MaxTenuringThreshold=15</code> 来配置这个阈值。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽说这些内容略显枯燥，但当应用发生不正常的 <code>GC</code> 时，可以方便更快的定位问题。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fnkuy01igij31g80tetfy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h2&gt;&lt;p&gt;当 &lt;code&gt;JVM&lt;/code&gt; 收到一个 &lt;code&gt;new&lt;/code&gt; 指令时，会检查指令中的参数在常量池是否有这个符号的引用，还会检查该类是否已经被&lt;a href=&quot;https://github.com/crossoverJie/Java-Interview/blob/master/MD/ClassLoad.md&quot;&gt;加载&lt;/a&gt;过了，如果没有的话则要进行一次类加载。&lt;/p&gt;
&lt;p&gt;接着就是分配内存了，通常有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指针碰撞&lt;/li&gt;
&lt;li&gt;空闲列表&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用指针碰撞的前提是堆内存是&lt;strong&gt;完全工整&lt;/strong&gt;的，用过的内存和没用的内存各在一边每次分配的时候只需要将指针向空闲内存一方移动一段和内存大小相等区域即可。&lt;/p&gt;
&lt;p&gt;当堆中已经使用的内存和未使用的内存&lt;strong&gt;互相交错&lt;/strong&gt;时，指针碰撞的方式就行不通了，这时就需要采用空闲列表的方式。虚拟机会维护一个空闲的列表，用于记录哪些内存是可以进行分配的，分配时直接从可用内存中直接分配即可。&lt;/p&gt;
&lt;p&gt;堆中的内存是否工整是有&lt;strong&gt;垃圾收集器&lt;/strong&gt;来决定的，如果带有压缩功能的垃圾收集器就是采用指针碰撞的方式来进行内存分配的。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Synchronize 关键字原理</title>
    <link href="http://crossoverjie.top/2018/01/14/Synchronize/"/>
    <id>http://crossoverjie.top/2018/01/14/Synchronize/</id>
    <published>2018-01-14T14:13:22.000Z</published>
    <updated>2018-04-28T13:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fngjnyotvcj30z00jpn0d.jpg" alt=""></p>
<p>众所周知 <code>Synchronize</code> 关键字是解决并发问题常用解决方案，有以下三种使用方式:</p>
<ul>
<li>同步普通方法，锁的是当前对象。</li>
<li>同步静态方法，锁的是当前 <code>Class</code> 对象。</li>
<li>同步块，锁的是 <code>{}</code> 中的对象。</li>
</ul>
<p>实现原理：<br><code>JVM</code> 是通过进入、退出对象监视器( <code>Monitor</code> )来实现对方法、同步块的同步的。</p>
<p>具体实现是在编译之后在同步方法调用前加入一个 <code>monitor.enter</code> 指令，在退出方法和异常处插入 <code>monitor.exit</code> 的指令。</p>
<p>其本质就是对一个对象监视器( <code>Monitor</code> )进行获取，而这个获取过程具有排他性从而达到了同一时刻只能一个线程访问的目的。</p>
<p>而对于没有获取到锁的线程将会阻塞到方法入口处，直到获取锁的线程 <code>monitor.exit</code> 之后才能尝试继续获取锁。</p>
<p>流程图如下:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fn27fkl07jj31e80hyn0n.jpg" alt=""></p>
<a id="more"></a>
<p>通过一段代码来演示:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">synchronized</span> (Synchronize.class)&#123;</div><div class="line">        System.out.println(<span class="string">"Synchronize"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <code>javap -c Synchronize</code> 可以查看编译之后的具体信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class com.crossoverjie.synchronize.Synchronize &#123;</div><div class="line">  public com.crossoverjie.synchronize.Synchronize();</div><div class="line">    Code:</div><div class="line">       0: aload_0</div><div class="line">       1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</div><div class="line">       4: return</div><div class="line"></div><div class="line">  public static void main(java.lang.String[]);</div><div class="line">    Code:</div><div class="line">       0: ldc           #2                  // class com/crossoverjie/synchronize/Synchronize</div><div class="line">       2: dup</div><div class="line">       3: astore_1</div><div class="line">       **4: monitorenter**</div><div class="line">       5: getstatic     #3                  // Field java/lang/System.out:Ljava/io/PrintStream;</div><div class="line">       8: ldc           #4                  // String Synchronize</div><div class="line">      10: invokevirtual #5                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</div><div class="line">      13: aload_1</div><div class="line">      **14: monitorexit**</div><div class="line">      15: goto          23</div><div class="line">      18: astore_2</div><div class="line">      19: aload_1</div><div class="line">      20: monitorexit</div><div class="line">      21: aload_2</div><div class="line">      22: athrow</div><div class="line">      23: return</div><div class="line">    Exception table:</div><div class="line">       from    to  target type</div><div class="line">           5    15    18   any</div><div class="line">          18    21    18   any</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到在同步块的入口和出口分别有 <code>monitorenter,monitorexit</code><br>指令。</p>
<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><p><code>synchronize</code>  很多都称之为重量锁，<code>JDK1.6</code> 中对 <code>synchronize</code> 进行了各种优化，为了能减少获取和释放锁带来的消耗引入了<code>偏向锁</code>和<code>轻量锁</code>。</p>
<h3 id="轻量锁"><a href="#轻量锁" class="headerlink" title="轻量锁"></a>轻量锁</h3><p>当代码进入同步块时，如果同步对象为无锁状态时，当前线程会在栈帧中创建一个锁记录(<code>Lock Record</code>)区域，同时将锁对象的对象头中 <code>Mark Word</code> 拷贝到锁记录中，再尝试使用 <code>CAS</code> 将 <code>Mark Word</code> 更新为指向锁记录的指针。</p>
<p>如果更新<strong>成功</strong>，当前线程就获得了锁。</p>
<p>如果更新<strong>失败</strong> <code>JVM</code> 会先检查锁对象的 <code>Mark Word</code> 是否指向当前线程的锁记录。</p>
<p>如果是则说明当前线程拥有锁对象的锁，可以直接进入同步块。</p>
<p>不是则说明有其他线程抢占了锁，如果存在多个线程同时竞争一把锁，<strong>轻量锁就会膨胀为重量锁</strong>。</p>
<h4 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h4><p>轻量锁的解锁过程也是利用 <code>CAS</code> 来实现的，会尝试锁记录替换回锁对象的 <code>Mark Word</code> 。如果替换成功则说明整个同步操作完成，失败则说明有其他线程尝试获取锁，这时就会唤醒被挂起的线程(此时已经膨胀为<code>重量锁</code>)</p>
<p>轻量锁能提升性能的原因：</p>
<p>认为大多数锁在整个同步周期都不存在竞争，所以使用 <code>CAS</code> 比使用互斥开销更少。但如果锁竞争激烈，轻量锁就不但有互斥的开销，还有 <code>CAS</code> 的开销，甚至比重量锁更慢。</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>为了进一步的降低获取锁的代价，<code>JDK1.6</code> 之后还引入了偏向锁。</p>
<p>偏向锁的特征是:锁不存在多线程竞争，并且应由一个线程多次获得锁。</p>
<p>当线程访问同步块时，会使用 <code>CAS</code> 将线程 ID 更新到锁对象的 <code>Mark Word</code> 中，如果更新成功则获得偏向锁，并且之后每次进入这个对象锁相关的同步块时都不需要再次获取锁了。</p>
<h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><p>当有另外一个线程获取这个锁时，持有偏向锁的线程就会释放锁，释放时会等待全局安全点(这一时刻没有字节码运行)，接着会暂停拥有偏向锁的线程，根据锁对象目前是否被锁来判定将对象头中的 <code>Mark Word</code> 设置为无锁或者是轻量锁状态。</p>
<p>偏向锁可以提高带有同步却没有竞争的程序性能，但如果程序中大多数锁都存在竞争时，那偏向锁就起不到太大作用。可以使用 <code>-XX:-userBiasedLocking=false</code> 来关闭偏向锁，并默认进入轻量锁。</p>
<h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><h4 id="适应性自旋"><a href="#适应性自旋" class="headerlink" title="适应性自旋"></a>适应性自旋</h4><p>在使用 <code>CAS</code> 时，如果操作失败，<code>CAS</code> 会自旋再次尝试。由于自旋是需要消耗 <code>CPU</code> 资源的，所以如果长期自旋就白白浪费了 <code>CPU</code>。<code>JDK1.6</code>加入了适应性自旋:</p>
<blockquote>
<p>如果某个锁自旋很少成功获得，那么下一次就会减少自旋。</p>
</blockquote>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1fngjnyotvcj30z00jpn0d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;众所周知 &lt;code&gt;Synchronize&lt;/code&gt; 关键字是解决并发问题常用解决方案，有以下三种使用方式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同步普通方法，锁的是当前对象。&lt;/li&gt;
&lt;li&gt;同步静态方法，锁的是当前 &lt;code&gt;Class&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;同步块，锁的是 &lt;code&gt;{}&lt;/code&gt; 中的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现原理：&lt;br&gt;&lt;code&gt;JVM&lt;/code&gt; 是通过进入、退出对象监视器( &lt;code&gt;Monitor&lt;/code&gt; )来实现对方法、同步块的同步的。&lt;/p&gt;
&lt;p&gt;具体实现是在编译之后在同步方法调用前加入一个 &lt;code&gt;monitor.enter&lt;/code&gt; 指令，在退出方法和异常处插入 &lt;code&gt;monitor.exit&lt;/code&gt; 的指令。&lt;/p&gt;
&lt;p&gt;其本质就是对一个对象监视器( &lt;code&gt;Monitor&lt;/code&gt; )进行获取，而这个获取过程具有排他性从而达到了同一时刻只能一个线程访问的目的。&lt;/p&gt;
&lt;p&gt;而对于没有获取到锁的线程将会阻塞到方法入口处，直到获取锁的线程 &lt;code&gt;monitor.exit&lt;/code&gt; 之后才能尝试继续获取锁。&lt;/p&gt;
&lt;p&gt;流程图如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fn27fkl07jj31e80hyn0n.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="synchronize" scheme="http://crossoverjie.top/tags/synchronize/"/>
    
  </entry>
  
  <entry>
    <title>一致 Hash 算法分析</title>
    <link href="http://crossoverjie.top/2018/01/08/Consistent-Hash/"/>
    <id>http://crossoverjie.top/2018/01/08/Consistent-Hash/</id>
    <published>2018-01-07T18:01:36.000Z</published>
    <updated>2018-01-07T18:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8l7h65v6j30v90kujsd.jpg" alt=""></p>
<p>当我们在做数据库分库分表或者是分布式缓存时，不可避免的都会遇到一个问题:</p>
<p>如何将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少。</p>
<h2 id="Hash-取模"><a href="#Hash-取模" class="headerlink" title="Hash 取模"></a>Hash 取模</h2><p>随机放置就不说了，会带来很多问题。通常最容易想到的方案就是 <code>hash 取模</code>了。</p>
<p>可以将传入的 Key 按照 <code>index = hash(key) % N</code> 这样来计算出需要存放的节点。其中 hash 函数是一个将字符串转换为正整数的哈希映射方法，N 就是节点的数量。</p>
<p>这样可以满足数据的均匀分配，但是这个算法的容错性和扩展性都较差。</p>
<p>比如增加或删除了一个节点时，所有的 Key 都需要重新计算，显然这样成本较高，为此需要一个算法满足分布均匀同时也要有良好的容错性和拓展性。</p>
<a id="more"></a>
<h2 id="一致-Hash-算法"><a href="#一致-Hash-算法" class="headerlink" title="一致 Hash 算法"></a>一致 Hash 算法</h2><p>一致 Hash 算法是将所有的哈希值构成了一个环，其范围在 <code>0 ~ 2^32-1</code>。如下图：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn8kbmd4ncj30ad08y3yn.jpg" alt=""></p>
<p>之后将各个节点散列到这个环上，可以用节点的 IP、hostname 这样的唯一性字段作为 Key 进行 <code>hash(key)</code>，散列之后如下：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8kf72uwuj30a40a70t5.jpg" alt=""></p>
<p>之后需要将数据定位到对应的节点上，使用同样的 <code>hash 函数</code> 将 Key 也映射到这个环上。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8kj9kd4oj30ax0aomxq.jpg" alt=""></p>
<p>这样按照顺时针方向就可以把 k1 定位到 <code>N1节点</code>，k2 定位到 <code>N3节点</code>，k3 定位到 <code>N2节点</code>。</p>
<h3 id="容错性"><a href="#容错性" class="headerlink" title="容错性"></a>容错性</h3><p>这时假设 N1 宕机了：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fn8kl9pp06j30a409waaj.jpg" alt=""></p>
<p>依然根据顺时针方向，k2 和 k3 保持不变，只有 k1 被重新映射到了 N3。这样就很好的保证了容错性，当一个节点宕机时只会影响到少少部分的数据。</p>
<h3 id="拓展性"><a href="#拓展性" class="headerlink" title="拓展性"></a>拓展性</h3><p>当新增一个节点时:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fn8kp1fc9xj30ca0abt9c.jpg" alt=""></p>
<p>在 N2 和 N3 之间新增了一个节点 N4 ，这时会发现受印象的数据只有 k3，其余数据也是保持不变，所以这样也很好的保证了拓展性。</p>
<h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>到目前为止该算法依然也有点问题:</p>
<p>当节点较少时会出现数据分布不均匀的情况：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn8krttekbj30c10a5dg5.jpg" alt=""></p>
<p>这样会导致大部分数据都在 N1 节点，只有少量的数据在 N2 节点。</p>
<p>为了解决这个问题，一致哈希算法引入了虚拟节点。将每一个节点都进行多次 hash，生成多个节点放置在环上称为虚拟节点:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fn8ktzuswkj30ae0abdgb.jpg" alt=""></p>
<p>计算时可以在 IP 后加上编号来生成哈希值。</p>
<p>这样只需要在原有的基础上多一步由虚拟节点映射到实际节点的步骤即可让少量节点也能满足均匀性。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fn8l7h65v6j30v90kujsd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我们在做数据库分库分表或者是分布式缓存时，不可避免的都会遇到一个问题:&lt;/p&gt;
&lt;p&gt;如何将数据均匀的分散到各个节点中，并且尽量的在加减节点时能使受影响的数据最少。&lt;/p&gt;
&lt;h2 id=&quot;Hash-取模&quot;&gt;&lt;a href=&quot;#Hash-取模&quot; class=&quot;headerlink&quot; title=&quot;Hash 取模&quot;&gt;&lt;/a&gt;Hash 取模&lt;/h2&gt;&lt;p&gt;随机放置就不说了，会带来很多问题。通常最容易想到的方案就是 &lt;code&gt;hash 取模&lt;/code&gt;了。&lt;/p&gt;
&lt;p&gt;可以将传入的 Key 按照 &lt;code&gt;index = hash(key) % N&lt;/code&gt; 这样来计算出需要存放的节点。其中 hash 函数是一个将字符串转换为正整数的哈希映射方法，N 就是节点的数量。&lt;/p&gt;
&lt;p&gt;这样可以满足数据的均匀分配，但是这个算法的容错性和扩展性都较差。&lt;/p&gt;
&lt;p&gt;比如增加或删除了一个节点时，所有的 Key 都需要重新计算，显然这样成本较高，为此需要一个算法满足分布均匀同时也要有良好的容错性和拓展性。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://crossoverjie.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>sbc(六) Zuul GateWay 网关应用</title>
    <link href="http://crossoverjie.top/2017/11/28/sbc6/"/>
    <id>http://crossoverjie.top/2017/11/28/sbc6/</id>
    <published>2017-11-27T17:13:22.000Z</published>
    <updated>2017-11-28T05:14:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1flrejb4pbpj30qo0cuq5s.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看过之前<a href="https://crossoverjie.top/categories/sbc/">SBC</a>系列的小伙伴应该都可以搭建一个高可用、分布式的微服务了。 目前的结构图应该如下所示:<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flvyjrv2unj30dc0gwaaw.jpg" alt=""></p>
<p>各个微服务之间都不存在单点，并且都注册于 <code>Eureka</code> ，基于此进行服务的注册于发现，再通过 <code>Ribbon</code> 进行服务调用，并具有客户端负载功能。</p>
<p>一切看起来都比较美好，但这里却忘了一个重要的细节：</p>
<blockquote>
<p>当我们需要对外提供服务时怎么处理？</p>
</blockquote>
<p>这当然也能实现，无非就是将我们具体的微服务地址加端口暴露出去即可。</p>
<p>那又如何来实现负载呢？</p>
<p>简单！可以通过 <code>Nginx F5</code> 之类的工具进行负载。</p>
<p>但是如果系统庞大，服务拆分的足够多那又有谁来维护这些路由关系呢？</p>
<p>当然这是运维的活，不过这时候运维可能就要发飙了！</p>
<p>并且还有一系列的问题:</p>
<ul>
<li>服务调用之间的一些鉴权、签名校验怎么做？</li>
<li>由于服务端地址较多，客户端请求难以维护。</li>
</ul>
<p>针对于这一些问题 <code>SpringCloud</code> 全家桶自然也有对应的解决方案: <code>Zuul</code>。<br>当我们系统整合 Zuul 网关之后架构图应该如下所示:</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flw0fbfukxj30mp0icdgk.jpg" alt=""></p>
<a id="more"></a>
<p>我们在所有的请求进来之前抽出一层网关应用，将服务提供的所有细节都进行了包装，这样所有的客户端都是和网关进行交互，简化了客户端开发。</p>
<p>同时具有如下功能:</p>
<ul>
<li>Zuul 注册于 <code>Eureka</code> 并集成了 <code>Ribbon</code> 所以自然也是可以从注册中心获取到服务列表进行客户端负载。</li>
<li>功能丰富的路由功能，解放运维。</li>
<li>具有过滤器，所以鉴权、验签都可以集成。</li>
</ul>
<p>基于此我们来看看之前的架构中如何集成 <code>Zuul</code> 。</p>
<h1 id="集成-Zuul"><a href="#集成-Zuul" class="headerlink" title="集成 Zuul"></a>集成 Zuul</h1><p>为此我新建了一个项目 <code>sbc-gateway-zuul</code> 就是一个基础的 <code>SpringBoot</code> 结构。其中加入了 Zuul 的依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>由于需要将网关也注册到 <code>Eureka</code> 中，所以自然也需要:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>紧接着配置一些项目基本信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 项目配置</div><div class="line">spring.application.name=sbc-gateway-zuul</div><div class="line">server.context-path=/</div><div class="line">server.port=8383</div><div class="line"></div><div class="line"># eureka地址</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/</div><div class="line">eureka.instance.prefer-ip-address=true</div></pre></td></tr></table></figure>
<p>在启动类中加入开启 <code>Zuul</code> 的注解，一个网关应用就算是搭好了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"></div><div class="line"><span class="comment">//开启zuul代理</span></div><div class="line"><span class="meta">@EnableZuulProxy</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SbcGateWayZuulApplication</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动 <code>Eureka</code> 和网关看到已经注册成功那就大功告成了:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1flx2fwc3v2j314y085dgp.jpg" alt=""></p>
<h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由是网关的核心功能之一，可以使系统有一个统一的对外接口，下面来看看具体的应用。</p>
<h2 id="传统路由"><a href="#传统路由" class="headerlink" title="传统路由"></a>传统路由</h2><p>传统路由非常简单，和 <code>Nginx</code> 类似，由开发、运维人员来维护请求地址和对应服务的映射关系，类似于:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zuul.routes.user-service.path=/user-service/**</div><div class="line">zuul.routes.user-sercice.url=http://localhost:8080/</div></pre></td></tr></table></figure>
<p>这样当我们访问 <code>http://localhost:8383/user-service/getUserInfo/1</code> 网关就会自动给我们路由到 <code>http://localhost:8080/getUserInfo/1</code> 上。</p>
<p>可见只要我们维护好这个映射关系即可自由的配置路由信息(<code>user-sercice 可自定义</code>)，但是很明显这种方式不管是对运维还是开发都不友好。由于实际这种方式用的不多就再过多展开。</p>
<h2 id="服务路由"><a href="#服务路由" class="headerlink" title="服务路由"></a>服务路由</h2><p>对此 <code>Zuul</code> 提供了一种基于服务的路由方式。我们只需要维护请求地址与服务 ID 之间的映射关系即可，并且由于集成了 <code>Ribbon</code> , Zuul 还可以在路由的时候通过 Eureka 实现负载调用。</p>
<p>具体配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zuul.routes.sbc-user.path=/api/user/**</div><div class="line">zuul.routes.sbc-user.serviceId=sbc-user</div></pre></td></tr></table></figure>
<p>这样当输入 <code>http://localhost:8383/api/user/getUserInfo/1</code> 时就会路由到注册到 <code>Eureka</code> 中服务 ID 为 <code>sbc-user</code> 的服务节点，如果有多节点就会按照 Ribbon 的负载算法路由到其中一台上。</p>
<p>以上配置还可以简写为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 服务路由 简化配置</div><div class="line">zuul.routes.sbc-user=/api/user/**</div></pre></td></tr></table></figure>
<p>这样让我们访问 <code>http://127.0.0.1:8383/api/user/userService/getUserByHystrix</code> 时候就会根据负载算法帮我们路由到 sbc-user 应用上，如下图所示:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flx4pbe3nsj31ga0e5gnq.jpg" alt=""><br>启动了两个 sbc-user 服务。</p>
<p>请求结果:<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1flx4q2zktbj30yd0ll79b.jpg" alt=""></p>
<p>一次路由就算完成了。</p>
<p>在上面的配置中有看到 <code>/api/user/**</code> 这样的通配符配置，具体有以下三种配置需要了解:</p>
<ul>
<li><code>?</code> 只能匹配任意的单个字符，如 <code>/api/user/?</code> 就只能匹配 <code>/api/user/x  /api/user/y /api/user/z</code> 这样的路径。</li>
<li><code>*</code> 只能匹配任意字符，如 <code>/api/user/*</code> 就只能匹配 <code>/api/user/x /api/user/xy /api/user/xyz</code>。</li>
<li><code>**</code> 可以匹配任意字符、任意层级。结合了以上两种通配符的特点，如 <code>/api/user/**</code> 则可以匹配 <code>/api/user/x /api/user/x/y /api/user/x/y/zzz</code>这样的路径，最简单粗暴！</li>
</ul>
<p>谈到通配符匹配就不得不提到一个问题，如上面的 <code>sbc-user</code> 服务由于后期迭代更新，将 sbc-user 中的一部分逻辑抽成了另一个服务 <code>sbc-user-pro</code>。新应用的路由规则是 <code>/api/user/pro/**</code>,如果我们按照:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">zuul.routes.sbc-user=/api/user/**</div><div class="line">zuul.routes.sbc-user-pro=/api/user/pro/**</div></pre></td></tr></table></figure>
<p>进行配置的话，我们想通过 <code>/api/user/pro/</code> 来访问 <code>sbc-user-pro</code> 应用，却由于满足第一个路由规则，所以会被 Zuul 路由到 <code>sbc-user</code> 这个应用上，这显然是不对的。该怎么解决这个问题呢？</p>
<p>翻看路由源码 <code>org.springframework.cloud.netflix.zuul.filters.SimpleRouteLocator</code> 中的 <code>locateRoutes()</code> 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Compute a map of path pattern to route. The default is just a static map from the</div><div class="line"> * &#123;<span class="doctag">@link</span> ZuulProperties&#125;, but subclasses can add dynamic calculations.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> Map&lt;String, ZuulRoute&gt; <span class="title">locateRoutes</span><span class="params">()</span> </span>&#123;</div><div class="line">	LinkedHashMap&lt;String, ZuulRoute&gt; routesMap = <span class="keyword">new</span> LinkedHashMap&lt;String, ZuulRoute&gt;();</div><div class="line">	<span class="keyword">for</span> (ZuulRoute route : <span class="keyword">this</span>.properties.getRoutes().values()) &#123;</div><div class="line">		routesMap.put(route.getPath(), route);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> routesMap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>发现路由规则是遍历配置文件并放入 <strong><code>LinkedHashMap</code></strong> 中，由于 <code>LinkedHashMap</code> 是有序的，所以为了达到上文的效果，配置文件的加载顺序非常重要，因此我们只需要将优先匹配的路由规则放前即可解决。</p>
<h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>过滤器可以说是整个 Zuul 最核心的功能，包括上文提到路由功能也是由过滤器来实现的。</p>
<p>摘抄官方的解释: Zuul 的核心就是一系列的过滤器，他能够在整个 <code>HTTP</code> 请求、响应过程中执行各样的操作。</p>
<p>其实总结下来就是四个特征:</p>
<ul>
<li>过滤类型</li>
<li>过滤顺序</li>
<li>执行条件</li>
<li>具体实现</li>
</ul>
<p>其实就是 <code>ZuulFilter</code> 接口中所定义的四个接口:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String filterType();</div><div class="line"></div><div class="line">int filterOrder();</div><div class="line"></div><div class="line">boolean shouldFilter();</div><div class="line"></div><div class="line">Object run();</div></pre></td></tr></table></figure>
<p>官方流程图(生命周期):</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1flx65zw2qpj30qo0k0tae.jpg" alt=""></p>
<p>简单理解下就是:</p>
<p>当一个请求进来时，首先是进入 <code>pre</code> 过滤器，可以做一些鉴权，记录调试日志等操作。之后进入 <code>routing</code> 过滤器进行路由转发，转发可以使用 <code>Apache HttpClient</code> 或者是 <code>Ribbon</code> 。<br><code>post</code> 过滤器呢则是处理服务响应之后的数据，可以进行一些包装来返回客户端。 <code>error</code> 则是在有异常发生时才会调用，相当于是全局异常拦截器。</p>
<h2 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h2><p>接下来实现一个文初所提到的鉴权操作:</p>
<p>新建一个 <code>RequestFilter</code> 类继承与 <code>ZuulFilter</code> 接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function: 请求拦截</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> *         Date: 2017/11/20 00:33</div><div class="line"> * <span class="doctag">@since</span> JDK 1.8</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(RequestFilter.class) ;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 请求路由之前被拦截 实现 pre 拦截器</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = currentContext.getRequest();</div><div class="line">        String token = request.getParameter(<span class="string">"token"</span>);</div><div class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(token))&#123;</div><div class="line">            logger.warn(<span class="string">"need token"</span>);</div><div class="line">            <span class="comment">//过滤请求</span></div><div class="line">            currentContext.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            currentContext.setResponseStatusCode(<span class="number">400</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">        logger.info(<span class="string">"token =&#123;&#125;"</span>,token) ;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常 easy，就简单校验下请求中是否包含 <code>token</code>，不包含就返回 401 code。</p>
<p>不但如此，还需要将该类加入到 Spring 进行管理:</p>
<p>新建了 <code>FilterConf</code> 类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterConf</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RequestFilter <span class="title">filter</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> RequestFilter() ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样重启之后就可以看到效果了:</p>
<p>不传 token 时：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1flx6pypmzqj30pt0f1jsq.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flx6qeu2nfj310l03jjtc.jpg" alt=""></p>
<p>传入 token 时：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flx6rad3ffj30q00bpjsn.jpg" alt=""></p>
<p>可见一些鉴权操作是可以放到这里来进行统一处理的。</p>
<p>其余几个过滤器也是大同小异，可以根据实际场景来自定义。</p>
<h1 id="Zuul-高可用"><a href="#Zuul-高可用" class="headerlink" title="Zuul 高可用"></a>Zuul 高可用</h1><p>Zuul 现在既然作为了对外的第一入口，那肯定不能是单节点，对于 Zuul 的高可用有以下两种方式实现。</p>
<h2 id="Eureka-高可用"><a href="#Eureka-高可用" class="headerlink" title="Eureka 高可用"></a>Eureka 高可用</h2><p>第一种最容易想到和实现:<br>我们可以部署多个 Zuul 节点，并且都注册于 Eureka ，如下图：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1flx73gaco0j30o80jgq3p.jpg" alt=""></p>
<p>这样虽然简单易维护，但是有一个严重的缺点：那就是客户端也得注册到 Eureka 上才能对 Zuul 的调用做到负载，这显然是不现实的。</p>
<p>所以下面这种做法更为常见。</p>
<h2 id="基于-Nginx-高可用"><a href="#基于-Nginx-高可用" class="headerlink" title="基于 Nginx 高可用"></a>基于 Nginx 高可用</h2><p>在调用 Zuul 之前使用 Nginx 之类的负载均衡工具进行负载，这样 Zuul 既能注册到 Eureka ，客户端也能实现对 Zuul 的负载，如下图：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1flx79q95c0j30o80m8757.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样在原有的微服务架构的基础上加上网关之后另整个系统更加完善了，从网关的设计来看：大多数系统架构都有分层的概念，不能解决问题那就多分几层🤓。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1flrejb4pbpj30qo0cuq5s.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看过之前&lt;a href=&quot;https://crossoverjie.top/categories/sbc/&quot;&gt;SBC&lt;/a&gt;系列的小伙伴应该都可以搭建一个高可用、分布式的微服务了。 目前的结构图应该如下所示:&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcly1flvyjrv2unj30dc0gwaaw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;各个微服务之间都不存在单点，并且都注册于 &lt;code&gt;Eureka&lt;/code&gt; ，基于此进行服务的注册于发现，再通过 &lt;code&gt;Ribbon&lt;/code&gt; 进行服务调用，并具有客户端负载功能。&lt;/p&gt;
&lt;p&gt;一切看起来都比较美好，但这里却忘了一个重要的细节：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们需要对外提供服务时怎么处理？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这当然也能实现，无非就是将我们具体的微服务地址加端口暴露出去即可。&lt;/p&gt;
&lt;p&gt;那又如何来实现负载呢？&lt;/p&gt;
&lt;p&gt;简单！可以通过 &lt;code&gt;Nginx F5&lt;/code&gt; 之类的工具进行负载。&lt;/p&gt;
&lt;p&gt;但是如果系统庞大，服务拆分的足够多那又有谁来维护这些路由关系呢？&lt;/p&gt;
&lt;p&gt;当然这是运维的活，不过这时候运维可能就要发飙了！&lt;/p&gt;
&lt;p&gt;并且还有一系列的问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务调用之间的一些鉴权、签名校验怎么做？&lt;/li&gt;
&lt;li&gt;由于服务端地址较多，客户端请求难以维护。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;针对于这一些问题 &lt;code&gt;SpringCloud&lt;/code&gt; 全家桶自然也有对应的解决方案: &lt;code&gt;Zuul&lt;/code&gt;。&lt;br&gt;当我们系统整合 Zuul 网关之后架构图应该如下所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1flw0fbfukxj30mp0icdgk.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverjie.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="http://crossoverjie.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>【译】你可以用GitHub做的12件 Cool 事情</title>
    <link href="http://crossoverjie.top/2017/11/05/translation1-12%20cool%20things%20you%20can%20do%20with%20GitHub/"/>
    <id>http://crossoverjie.top/2017/11/05/translation1-12 cool things you can do with GitHub/</id>
    <published>2017-11-04T17:01:54.000Z</published>
    <updated>2017-11-28T12:45:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1flef224anmj31kw0ebgnt.jpg" alt=""></p>
<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://hackernoon.com/12-cool-things-you-can-do-with-github-f3e0424cf2f0" target="_blank" rel="external">原文链接</a></h3><h2 id="1-在-GitHub-com-编辑代码"><a href="#1-在-GitHub-com-编辑代码" class="headerlink" title="1 在 GitHub.com 编辑代码"></a>1 在 GitHub.com 编辑代码</h2><p>我将从我认为大家都知道的一件事情开始(尽管我是直到一周前才知道)。</p>
<p>当你在 GitHub 查看文件时(任何文本文件，任何仓库中)，右上角会有一个小铅笔图标，点击它就可以编辑文件了。完成之后点击 <strong>Propose file change</strong> 按钮 GitHub 将会自动帮你 fork 该项目并且创建一个 <code>pull request</code> 。</p>
<p>很厉害吧！他自动帮你 <code>fork</code> 了该 repo。</p>
<p>不再需要 <code>fork</code> , <code>pull</code> ,本地编辑再 <code>push</code> 以及创建一个 <code>PR</code> 这样的流程了。<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fl5eo3789hj30m80mjwhy.jpg" alt=""></p>
<p>这非常适合修复编写代码中出现的拼写错误和修正一个不太理想的想法。</p>
<h2 id="2-粘贴图片"><a href="#2-粘贴图片" class="headerlink" title="2 粘贴图片"></a>2 粘贴图片</h2><p>你不仅仅受限于输入文本和描述问题，你知道你可以直接从粘贴板中粘贴图片吗？当你粘贴时，你会看到图片已经被上传了(毫无疑问被上传到云端)之后会变成 <code>Markdown</code> 语法来显示图片。</p>
<h2 id="3-格式化代码"><a href="#3-格式化代码" class="headerlink" title="3 格式化代码"></a>3 格式化代码</h2><p>如果你想写一段代码，你可以三个反引号开始 —— 就像你在<a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="external">研究<code>MarkDown</code></a>时所学到的 —— 之后 GitHub 会试着猜测你写的语言。</p>
<p>但如果你写了一些类似于 Vue, Typescript, JSX 这样的语言，你可以明确指定得到正确的高亮。</p>
<p>注意第一行中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">```jsx</div></pre></td></tr></table></figure></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fl5fe2vu3rj30b607kq39.jpg" alt=""></p>
<a id="more"></a>
<p>这意味着代码段将会呈现出:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1fl5ffl8q7sj30bz06gq36.jpg" alt=""></p>
<p>(这个扩展于 <code>gists</code> 。顺便说一句，如果你使用 <code>.jsx</code> 后缀，就会得到JSX的语法高亮)</p>
<p>这是一个所有受支持的<a href="https://github.com/github/linguist/blob/fc1404985abb95d5bc33a0eba518724f1c3c252e/vendor/README.md" target="_blank" rel="external">语法列表</a>。</p>
<h2 id="4-在-PR-中用关键词关闭-Issues"><a href="#4-在-PR-中用关键词关闭-Issues" class="headerlink" title="4 在 PR 中用关键词关闭 Issues"></a>4 在 PR 中用关键词关闭 Issues</h2><p>假设你创建了一个用于修复 <code>Issues #234</code> 的 PR ,你可以在你 PR 的描述中填写 <code>fixes #234</code> (或是在你 PR 任意评论中填写都是可以的)。<br>之后合并这个 <code>PR</code> 时将会自动关闭填写的 <code>Issues</code>。怎么样,很 cool 吧。</p>
<p>了解是更多相关的<a href="https://help.github.com/articles/closing-issues-using-keywords/" target="_blank" rel="external">内容</a>。</p>
<h2 id="5-链接到评论"><a href="#5-链接到评论" class="headerlink" title="5 链接到评论"></a>5 链接到评论</h2><p>你是否有过想要链接到特殊 <code>comment</code> 的想法但却无法实现？那是因为你不知道怎么做。朋友那都是过去式了，现在我就告诉你，点击用户名旁边的日期/时间即可链接到该 <code>comment</code> 。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fl69xkm5rtj30d003zq37.jpg" alt=""></p>
<h2 id="6-链接到代码"><a href="#6-链接到代码" class="headerlink" title="6 链接到代码"></a>6 链接到代码</h2><p>我知道你想链接到具体的代码行上。</p>
<p>尝试:查看文件时，点击代码旁边的行号。</p>
<p>看到了吧，浏览器的 <code>URL</code> 已经被更新为行号了。如果你按住 <code>shift</code>,同时点击其他行号，<code>URL</code> 再次被更新，并且你也高亮显示页面中的一段代码。</p>
<p>分享这个 URL ，访问时将会链接到该文件已经选中的那些代码段。</p>
<p>但等一下，那指向的是当前的分支，如果文件发生了改变呢？也许一个在当前状态连接到文件的永久连接正是你想要的。</p>
<p>我很懒，所以用一张截图展示以上的所有操作。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fl6lw7ji6uj30m80a6mym.jpg" alt=""></p>
<p>谈到网址。。。</p>
<h2 id="7-像命令行一样使用-GitHub-链接"><a href="#7-像命令行一样使用-GitHub-链接" class="headerlink" title="7 像命令行一样使用 GitHub 链接"></a>7 像命令行一样使用 GitHub 链接</h2><p>使用 GitHub 自带的 UI 浏览也还不错，但有时直接在 URL 中输入是最快的方法。比如，我想跳转到我正在编辑的分支并和 <code>master</code> 进行对比，就可以在项目名称后面接上 <code>/compare/branch-name</code> 。</p>
<p>与选中分支的对比页将会显示出来:<br><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fl8rqb8egpj30u50pbaea.jpg" alt=""></p>
<p>以上就是和 master 分支的差异，如果想要合并分支的话，只需要输入 <code>/compare/integration-branch...my-branch</code> 即可。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fl8s3yraqrj30u50pbgpx.jpg" alt=""></p>
<p>你还可以利用快捷键达到同样的效果，使用 <code>ctrl + L</code> 或者 <code>cmd + L</code> 可以将光标移动到 <code>URL</code> 上(至少在 Chrome 中可以)。 加上浏览器的自动补全 —— 你就可以在两个分支之间轻松切换了。</p>
<h2 id="8-在Issues创建列表"><a href="#8-在Issues创建列表" class="headerlink" title="8 在Issues创建列表"></a>8 在Issues创建列表</h2><p>你想在你的 issue 中看到复选框列表吗?</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fl8snpyb0jj30e708sdgl.jpg" alt=""></p>
<p>你想在查看 issue 列表是它们以好看的 <code>2 of 5</code> 进度条呈现吗？</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fl8u3bn88hj30dn06jdg9.jpg" alt=""></p>
<p>太好了！你可以用以下语法来创建一个交互性的复选框:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- [ ] Screen width (integer)</div><div class="line">- [x] Service worker support</div><div class="line">- [x] Fetch support</div><div class="line">- [ ] CSS flexbox support</div><div class="line">- [ ] Custom elements</div></pre></td></tr></table></figure>
<p>是由一个空格、中横线、空格、左括号、空格(或者是 X )、右括号、空格以及一些文本组成。</p>
<p>你甚至可以真正的 选中/取消 这些复选框！基于某些原因，对于我来说你看起来像是技术魔力。是真的能够选中这些复选框！甚至它还更新了底层源码。</p>
<blockquote>
<p>ps：以下包括第九点 基于GitHub的项目面板 由于用的不多就没有翻译。</p>
</blockquote>
<h2 id="10-GitHub-wiki"><a href="#10-GitHub-wiki" class="headerlink" title="10 GitHub wiki"></a>10 GitHub wiki</h2><p>作为一个像维基百科那样的非结构化的页面集合， <code>GitHub Wiki</code>的供给(我把它称之为 <code>Gwiki</code> ) 是一个非常棒的功能。</p>
<p>对于结构化的页面来说 —— 例如你的文档：不能说这个页面是其他页面的子页面，或则是有 “下一节”，“上一节” 这样的便捷按钮。并且 <code>Hansel</code> 和 <code>Gretel</code> 也没有，因为结构化页面并没有 <code>breadcrumbs</code> 这样的设计。</p>
<p>我们继续，让 Gwiki 动起来，我从 <code>NodeJS</code> 的文档中复制了几页来作为 wiki 页面。然后创建了一个自定义侧边栏，帮助我更好地模拟一些实际的目录结构。尽管它不会突出显示你当前的页面位置，但侧边栏会一直存在。</p>
<p>这些链接需要你手动维护，但总的来说，我认为它可以做得很好。 如果需要的话可以<a href="https://github.com/davidgilbertson/about-github/wiki" target="_blank" rel="external">看看</a>。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fl9yl6mhlzj30rw0dqwgn.jpg" alt=""></p>
<p>虽然它与 <code>GitBook</code> ( <a href="http://redux.js.org/" target="_blank" rel="external">Redux 文档</a>所使用的)或者是定制网站相比仍有差距。但在你的 repo 中它有 80% 完全值得信赖的。</p>
<p>我的建议是: 如果你已经有多个 <code>README.md</code> 文件，并且想要一些关于用户指南或更详细的文档的不同的页面，那么你应该选择 <code>Gwiki</code>。</p>
<p>如果缺乏结构化/导航开始让你不爽的话，那就试试其他的吧。</p>
<h2 id="11-GitHub-Pages"><a href="#11-GitHub-Pages" class="headerlink" title="11 GitHub Pages"></a>11 GitHub Pages</h2><p>你可能已经知道使用 <code>GitHub Pages</code> 来托管一个静态网站。如果你不知道，现在就来学习，这一节是专门用于讨论使用 <code>Jekyll</code> 来构建一个站点的。</p>
<p>最简单的就是： <code>GitHub Pages + Jekyll</code>会通过一个漂亮的主题来渲染你的 <code>README.md</code> 文件。例如:通过 <a href="https://github.com/davidgilbertson/about-github" target="_blank" rel="external">about-github</a>  来查看的我的 <code>README</code> 页面。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fle60d5j7hj311l0np78i.jpg" alt=""></p>
<p>如果我在 GitHub 中点击了 <code>settings</code>选项，切换到 <code>Github Pages</code> 设置，然后选择一个 <code>Jekyll theme</code>。。。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fle73empc8j30l30bcdh1.jpg" alt=""></p>
<p>我就可以得到 <a href="https://davidgilbertson.github.io/about-github/" target="_blank" rel="external">Jekyll-themed 页面</a>。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fle74nogxlj311l0npgos.jpg" alt=""></p>
<p>从这点上我可以主要依据易编辑的 <code>Markdown</code> 文件来构建一个完整的静态站点。本质上是把 GitHub 变成了 <code>CMS</code>。</p>
<p>虽然我没有实际使用过，但是 <code>React Bootstrap</code> 的网站都是使用它来构建的。所以它不会糟糕。</p>
<p>注意:它要求 <code>Ruby</code> 运行本地环境( Windows 自行安装， macOS 自带)。</p>
<h2 id="12-把-GitHub-当做-CRM-使用"><a href="#12-把-GitHub-当做-CRM-使用" class="headerlink" title="12 把 GitHub 当做 CRM 使用"></a>12 把 GitHub 当做 CRM 使用</h2><p>假设你有一个存有一些文本内容的网站，你不想将文本内容存储于真正的 <code>HTML</code> 源码中。</p>
<p>相反的，你想要将这些文本块存储于非开发人员能轻松的进行编辑的地方。可能是一个版本控制系统，甚至是一个审核流程。</p>
<p>我的建议是:使用 GitHub 厂库中的 Markdown 文件来存储这些文本内容，然后使用前端组件来拉取这些文本块并展示在页面上。</p>
<p>我是搞 <code>React</code> 的，所以这有一个 解析 <code>Markdown</code> 的组件例子，给定一些 <code>Markdown</code> 文件路径，它将会自动拉取并作为 <code>HTML</code> 显示出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class Markdown extends React.Component &#123;</div><div class="line">    constructor(props) &#123;</div><div class="line">      super(props);</div><div class="line">      </div><div class="line">      // replace with your URL, obviously</div><div class="line">      this.baseUrl = &apos;https://raw.githubusercontent.com/davidgilbertson/about-github/master/text-snippets&apos;;</div><div class="line">      </div><div class="line">      this.state = &#123;</div><div class="line">        markdown: &apos;&apos;,</div><div class="line">      &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentDidMount() &#123;</div><div class="line">      fetch(`$&#123;this.baseUrl&#125;/$&#123;this.props.url&#125;`)</div><div class="line">        .then(response =&gt; response.text())</div><div class="line">        .then((markdown) =&gt; &#123;</div><div class="line">          this.setState(&#123;markdown&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">      return (</div><div class="line">        &lt;div dangerouslySetInnerHTML=&#123;&#123;__html: marked(this.state.markdown)&#125;&#125; /&gt;</div><div class="line">      );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="奖励环节-——-GitHub-工具"><a href="#奖励环节-——-GitHub-工具" class="headerlink" title="奖励环节 —— GitHub 工具"></a>奖励环节 —— GitHub 工具</h3><p>我已经使用了 <a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US" target="_blank" rel="external">Octotree Chrome extension</a> 有段时间了，现在我向大家推荐它！<br>无论你是在查看哪个 repo 它都会在左侧给你一个树状面板。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1flee4cevv3j30rs0hygnv.jpg" alt=""></p>
<p>通过这个<a href="https://www.youtube.com/watch?v=NhlzMcSyQek&amp;index=2&amp;list=PLNYkxOF6rcIB3ci6nwNyLYNU6RDOU3YyL" target="_blank" rel="external">视频</a>我了解到了 octobox，它是用于管理你的 <code>GitHub Issues</code> 收件箱，看起来相当不错！<br>以上就是我针对于<code>octobox</code>的全部想法。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>就是这样了！我希望这里至少有三件事是你还不知道的。</p>
<p>最后: hava a nice day！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1flef224anmj31kw0ebgnt.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/12-cool-things-you-can-do-with-github-f3e0424cf2f0&quot;&gt;原文链接&lt;/a&gt;&lt;/h3&gt;&lt;h2 id=&quot;1-在-GitHub-com-编辑代码&quot;&gt;&lt;a href=&quot;#1-在-GitHub-com-编辑代码&quot; class=&quot;headerlink&quot; title=&quot;1 在 GitHub.com 编辑代码&quot;&gt;&lt;/a&gt;1 在 GitHub.com 编辑代码&lt;/h2&gt;&lt;p&gt;我将从我认为大家都知道的一件事情开始(尽管我是直到一周前才知道)。&lt;/p&gt;
&lt;p&gt;当你在 GitHub 查看文件时(任何文本文件，任何仓库中)，右上角会有一个小铅笔图标，点击它就可以编辑文件了。完成之后点击 &lt;strong&gt;Propose file change&lt;/strong&gt; 按钮 GitHub 将会自动帮你 fork 该项目并且创建一个 &lt;code&gt;pull request&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;很厉害吧！他自动帮你 &lt;code&gt;fork&lt;/code&gt; 了该 repo。&lt;/p&gt;
&lt;p&gt;不再需要 &lt;code&gt;fork&lt;/code&gt; , &lt;code&gt;pull&lt;/code&gt; ,本地编辑再 &lt;code&gt;push&lt;/code&gt; 以及创建一个 &lt;code&gt;PR&lt;/code&gt; 这样的流程了。&lt;br&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fl5eo3789hj30m80mjwhy.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这非常适合修复编写代码中出现的拼写错误和修正一个不太理想的想法。&lt;/p&gt;
&lt;h2 id=&quot;2-粘贴图片&quot;&gt;&lt;a href=&quot;#2-粘贴图片&quot; class=&quot;headerlink&quot; title=&quot;2 粘贴图片&quot;&gt;&lt;/a&gt;2 粘贴图片&lt;/h2&gt;&lt;p&gt;你不仅仅受限于输入文本和描述问题，你知道你可以直接从粘贴板中粘贴图片吗？当你粘贴时，你会看到图片已经被上传了(毫无疑问被上传到云端)之后会变成 &lt;code&gt;Markdown&lt;/code&gt; 语法来显示图片。&lt;/p&gt;
&lt;h2 id=&quot;3-格式化代码&quot;&gt;&lt;a href=&quot;#3-格式化代码&quot; class=&quot;headerlink&quot; title=&quot;3 格式化代码&quot;&gt;&lt;/a&gt;3 格式化代码&lt;/h2&gt;&lt;p&gt;如果你想写一段代码，你可以三个反引号开始 —— 就像你在&lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;研究&lt;code&gt;MarkDown&lt;/code&gt;&lt;/a&gt;时所学到的 —— 之后 GitHub 会试着猜测你写的语言。&lt;/p&gt;
&lt;p&gt;但如果你写了一些类似于 Vue, Typescript, JSX 这样的语言，你可以明确指定得到正确的高亮。&lt;/p&gt;
&lt;p&gt;注意第一行中的&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;```jsx&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1fl5fe2vu3rj30b607kq39.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://crossoverjie.top/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="GitHub" scheme="http://crossoverjie.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十七) MQ应用</title>
    <link href="http://crossoverjie.top/2017/10/20/SSM17/"/>
    <id>http://crossoverjie.top/2017/10/20/SSM17/</id>
    <published>2017-10-19T17:01:54.000Z</published>
    <updated>2017-11-01T18:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fkpzk7hcz4j31kw11xhbz.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写这篇文章的起因是由于之前的一篇关于<code>Kafka</code><a href="http://crossoverjie.top/2017/09/05/SSM16/">异常消费</a>，当时为了解决问题不得不使用临时的方案。</p>
<p>总结起来归根结底还是对Kafka不熟悉导致的，加上平时工作的需要，之后就花些时间看了<code>Kafka</code>相关的资料。</p>
<h1 id="何时使用MQ"><a href="#何时使用MQ" class="headerlink" title="何时使用MQ"></a>何时使用MQ</h1><p>谈到<code>Kafka</code>就不得不提到MQ，是属于消息队列的一种。作为一种基础中间件在互联网项目中有着大量的使用。</p>
<p>一种技术的产生自然是为了解决某种需求，通常来说是以下场景：</p>
<blockquote>
<ul>
<li>需要跨进程通信：B系统需要A系统的输出作为输入参数。</li>
<li>当A系统的输出能力远远大于B系统的处理能力。</li>
</ul>
</blockquote>
<p>针对于第一种情况有两种方案:</p>
<ul>
<li>使用<code>RPC</code>远程调用,A直接调用B。</li>
<li>使用<code>MQ</code>,A发布消息到<code>MQ</code>,B订阅该消息。</li>
</ul>
<p>当我们的需求是:A调用B实时响应，并且实时关心响应结果则使用<code>RPC</code>，这种情况就得使用同步调用。</p>
<a id="more"></a>
<p>反之当我们并不关心调用之后的执行结果，并且有可能被调用方的执行非常耗时，这种情况就非常适合用<code>MQ</code>来达到异步调用目的。</p>
<p>比如常见的登录场景就只能用同步调用的方式，因为这个过程需要实时的响应结果，总不能在用户点了登录之后排除网络原因之外再额外的等几秒吧。</p>
<p>但类似于用户登录需要奖励积分的情况则使用<code>MQ</code>会更好，因为登录并不关系积分的情况，只需要发个消息到<code>MQ</code>,处理积分的服务订阅处理即可，这样还可以解决积分系统故障带来的雪崩效应。</p>
<p><code>MQ</code>还有一个基础功能则是<strong>限流削峰</strong>，这对于大流量的场景如果将请求直接调用到B系统则非常有可能使B系统出现不可用的情况。这种场景就非常适合将请求放入<code>MQ</code>，不但可以利用<code>MQ</code>削峰还尽可能的保证系统的高可用。</p>
<h1 id="Kafka简介"><a href="#Kafka简介" class="headerlink" title="Kafka简介"></a>Kafka简介</h1><p>本次重点讨论下<code>Kafka</code>。<br>简单来说<code>Kafka</code>是一个支持水平扩展，高吞吐率的分布式消息系统。</p>
<p><code>Kafka</code>的常用知识:</p>
<ul>
<li><p><code>Topic</code>:生产者和消费者的交互都是围绕着一个<code>Topic</code>进行的，通常来说是由业务来进行区分，由生产消费者协商之后进行创建。</p>
</li>
<li><p><code>Partition</code>(分区):是<code>Topic</code>下的组成，通常一个<code>Topic</code>下有一个或多个分区，消息生产之后会按照一定的算法负载到每个分区，所以分区也是<code>Kafka</code>性能的关键。当发现性能不高时便可考虑新增分区。</p>
</li>
</ul>
<p>结构图如下:<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fl314m0pe7j30bi086dge.jpg" alt=""></p>
<h1 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建<code>Topic</code></h1><p><code>Kafka</code>的安装官网有非常详细的讲解。这里谈一下在日常开发中常见的一些操作，比如创建<code>Topic</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic `test`</div></pre></td></tr></table></figure>
<p>创建了三个分区的<code>test</code>主题。</p>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh bin/kafka-topics.sh --list --zookeeper localhost:2181</div></pre></td></tr></table></figure>
<p>可以列出所有的<code>Topic</code>。</p>
<h1 id="Kafka生产者"><a href="#Kafka生产者" class="headerlink" title="Kafka生产者"></a>Kafka生产者</h1><p>使用<code>kafka</code>官方所提供的<code>Java API</code>来进行消息生产，实际使用中编码实现更为常用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Kafka生产者</span></div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(Producer.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 消费配置文件</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String consumerProPath;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">// set up the producer</span></div><div class="line">        consumerProPath = System.getProperty(<span class="string">"product_path"</span>);</div><div class="line">        KafkaProducer&lt;String, String&gt; producer = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(consumerProPath));</div><div class="line">            Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">            properties.load(inputStream);</div><div class="line">            producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"load config error"</span>, e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// send lots of messages</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">100</span> ; i++)&#123;</div><div class="line">                producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(</div><div class="line">                        <span class="string">"topic_optimization"</span>, i+<span class="string">""</span>, i+<span class="string">""</span>));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">            System.out.printf(<span class="string">"%s"</span>, throwable.getStackTrace());</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            producer.close();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再配合以下启动参数即可发送消息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dproduct_path=/xxx/producer.properties</div></pre></td></tr></table></figure></p>
<p>以及生产者的配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#集群地址，可以多个</div><div class="line">bootstrap.servers=10.19.13.51:9094</div><div class="line">acks=all</div><div class="line">retries=0</div><div class="line">batch.size=16384</div><div class="line">auto.commit.interval.ms=1000</div><div class="line">linger.ms=0</div><div class="line">key.serializer=org.apache.kafka.common.serialization.StringSerializer</div><div class="line">value.serializer=org.apache.kafka.common.serialization.StringSerializer</div><div class="line">block.on.buffer.full=true</div></pre></td></tr></table></figure></p>
<p>具体的配置说明详见此处:<a href="https://kafka.apache.org/0100/documentation.html#theproducer" target="_blank" rel="external">https://kafka.apache.org/0100/documentation.html#theproducer</a></p>
<p>流程非常简单，其实就是一些<code>API</code>的调用。</p>
<p>消息发完之后可以通过以下命令查看队列内的情况:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh kafka-consumer-groups.sh --bootstrap-server localhost:9094 --describe --group group1</div></pre></td></tr></table></figure></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fl305wgpuej310z0e744u.jpg" alt=""><br>其中的<code>lag</code>便是队列里的消息数量。</p>
<h1 id="Kafka消费者"><a href="#Kafka消费者" class="headerlink" title="Kafka消费者"></a>Kafka消费者</h1><p>有了生产者自然也少不了消费者，这里首先针对单线程消费:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:kafka官方消费</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> *         Date: 2017/10/19 01:11</div><div class="line"> * <span class="doctag">@since</span> JDK 1.8</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaOfficialConsumer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(KafkaOfficialConsumer.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 日志文件地址</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String logPath;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 主题名称</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String topic;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 消费配置文件</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String consumerProPath ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化参数校验</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">initCheck</span><span class="params">()</span> </span>&#123;</div><div class="line">        topic = System.getProperty(<span class="string">"topic"</span>) ;</div><div class="line">        logPath = System.getProperty(<span class="string">"log_path"</span>) ;</div><div class="line">        consumerProPath = System.getProperty(<span class="string">"consumer_pro_path"</span>) ;</div><div class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(topic) || logPath.isEmpty()) &#123;</div><div class="line">            LOGGER.error(<span class="string">"system property topic ,consumer_pro_path, log_path is required !"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化kafka配置</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KafkaConsumer&lt;String, String&gt; <span class="title">initKafkaConsumer</span><span class="params">()</span> </span>&#123;</div><div class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(consumerProPath)) ;</div><div class="line">            Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">            properties.load(inputStream);</div><div class="line">            consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(properties);</div><div class="line">            consumer.subscribe(Arrays.asList(topic));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"加载consumer.props文件出错"</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> consumer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initCheck())&#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> totalCount = <span class="number">0</span> ;</div><div class="line">        <span class="keyword">long</span> totalMin = <span class="number">0L</span> ;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        KafkaConsumer&lt;String, String&gt; consumer = initKafkaConsumer();</div><div class="line"></div><div class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis() ;</div><div class="line">        <span class="comment">//消费消息</span></div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">200</span>);</div><div class="line">            <span class="keyword">if</span> (records.count() &lt;= <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">continue</span> ;</div><div class="line">            &#125;</div><div class="line">            LOGGER.debug(<span class="string">"本次获取:"</span>+records.count());</div><div class="line">            count += records.count() ;</div><div class="line"></div><div class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis() ;</div><div class="line">            LOGGER.debug(<span class="string">"count="</span> +count) ;</div><div class="line">            <span class="keyword">if</span> (count &gt;= <span class="number">10000</span> )&#123;</div><div class="line">                totalCount += count ;</div><div class="line">                LOGGER.info(<span class="string">"this consumer &#123;&#125; record，use &#123;&#125; milliseconds"</span>,count,endTime-startTime);</div><div class="line">                totalMin += (endTime-startTime) ;</div><div class="line">                startTime = System.currentTimeMillis() ;</div><div class="line">                count = <span class="number">0</span> ;</div><div class="line">            &#125;</div><div class="line">            LOGGER.debug(<span class="string">"end totalCount=&#123;&#125;,min=&#123;&#125;"</span>,totalCount,totalMin);</div><div class="line"></div><div class="line">            <span class="comment">/*for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span></div><div class="line">                record.value() ;</div><div class="line">                JsonNode msg = null;</div><div class="line">                try &#123;</div><div class="line">                    msg = mapper.readTree(record.value());</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    LOGGER.error("消费消息出错", e);</div><div class="line">                &#125;</div><div class="line">                LOGGER.info("kafka receive = "+msg.toString());</div><div class="line">            &#125;*/</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配合以下启动参数:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-Dlog_path=/log/consumer.log -Dtopic=test -Dconsumer_pro_path=consumer.properties</div></pre></td></tr></table></figure></p>
<p>其中采用了轮询的方式获取消息，并且记录了消费过程中的数据。</p>
<p>消费者采用的配置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">bootstrap.servers=192.168.1.2:9094</div><div class="line">group.id=group1</div><div class="line"></div><div class="line"># 自动提交</div><div class="line">enable.auto.commit=true</div><div class="line">key.deserializer=org.apache.kafka.common.serialization.StringDeserializer</div><div class="line">value.deserializer=org.apache.kafka.common.serialization.StringDeserializer</div><div class="line"></div><div class="line"># fast session timeout makes it more fun to play with failover</div><div class="line">session.timeout.ms=10000</div><div class="line"></div><div class="line"># These buffer sizes seem to be needed to avoid consumer switching to</div><div class="line"># a mode where it processes one bufferful every 5 seconds with multiple</div><div class="line"># timeouts along the way.  No idea why this happens.</div><div class="line">fetch.min.bytes=50000</div><div class="line">receive.buffer.bytes=262144</div><div class="line">max.partition.fetch.bytes=2097152</div></pre></td></tr></table></figure></p>
<p>为了简便我采用的是自动提交<code>offset</code>。</p>
<h2 id="消息存放机制"><a href="#消息存放机制" class="headerlink" title="消息存放机制"></a>消息存放机制</h2><p>谈到<code>offset</code>就必须得谈谈Kafka的消息存放机制.</p>
<p><code>Kafka</code>的消息不会因为消费了就会立即删除，所有的消息都会持久化到日志文件，并配置有过期时间，到了时间会自动删除过期数据，<em>并且不会管其中的数据是否被消费过。</em></p>
<p>由于这样的机制就必须的有一个标志来表明哪些数据已经被消费过了，<code>offset(偏移量)</code>就是这样的作用，它类似于指针指向某个数据，当消费之后<code>offset</code>就会线性的向前移动，这样一来的话消息是可以被任意消费的，只要我们修改<code>offset</code>的值即可。</p>
<p>消费过程中还有一个值得注意的是:</p>
<blockquote>
<p>同一个consumer group(group.id相等)下只能有一个消费者可以消费，这个刚开始确实会让很多人踩坑。</p>
</blockquote>
<h1 id="多线程消费"><a href="#多线程消费" class="headerlink" title="多线程消费"></a>多线程消费</h1><p>针对于单线程消费实现起来自然是比较简单，但是效率也是要大打折扣的。</p>
<p>为此我做了一个测试，使用之前的单线程消费120009条数据的结果如下:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fl31iq6v9mj30t608479f.jpg" alt=""><br>总共花了12450毫秒。</p>
<p>那么换成多线程消费怎么实现呢？</p>
<p>我们可以利用<code>partition</code>的分区特性来提高消费能力，单线程的时候等于是一个线程要把所有分区里的数据都消费一遍，如果换成多线程就可以让一个线程只消费一个分区,这样效率自然就提高了，所以线程数<code>coreSize&lt;=partition</code>。</p>
<p>首先来看下入口:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class ConsumerThreadMain &#123;</div><div class="line">    private static String brokerList = &quot;localhost:9094&quot;;</div><div class="line">    private static String groupId = &quot;group1&quot;;</div><div class="line">    private static String topic = &quot;test&quot;;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 线程数量</div><div class="line">     */</div><div class="line">    private static int threadNum = 3;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line"></div><div class="line"></div><div class="line">        ConsumerGroup consumerGroup = new ConsumerGroup(threadNum, groupId, topic, brokerList);</div><div class="line">        consumerGroup.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的<code>ConsumerGroup</code>类:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class ConsumerGroup &#123;</div><div class="line">    private static Logger LOGGER = LoggerFactory.getLogger(ConsumerGroup.class);</div><div class="line">    /**</div><div class="line">     * 线程池</div><div class="line">     */</div><div class="line">    private ExecutorService threadPool;</div><div class="line"></div><div class="line">    private List&lt;ConsumerCallable&gt; consumers ;</div><div class="line"></div><div class="line">    public ConsumerGroup(int threadNum, String groupId, String topic, String brokerList) &#123;</div><div class="line">        ThreadFactory namedThreadFactory = new ThreadFactoryBuilder()</div><div class="line">                .setNameFormat(&quot;consumer-pool-%d&quot;).build();</div><div class="line"></div><div class="line">        threadPool = new ThreadPoolExecutor(threadNum, threadNum,</div><div class="line">                0L, TimeUnit.MILLISECONDS,</div><div class="line">                new LinkedBlockingQueue&lt;Runnable&gt;(1024), namedThreadFactory, new ThreadPoolExecutor.AbortPolicy());</div><div class="line"></div><div class="line"></div><div class="line">        consumers = new ArrayList&lt;ConsumerCallable&gt;(threadNum);</div><div class="line">        for (int i = 0; i &lt; threadNum; i++) &#123;</div><div class="line">            ConsumerCallable consumerThread = new ConsumerCallable(brokerList, groupId, topic);</div><div class="line">            consumers.add(consumerThread);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 执行任务</div><div class="line">     */</div><div class="line">    public void execute() &#123;</div><div class="line">        long startTime = System.currentTimeMillis() ;</div><div class="line">        for (ConsumerCallable runnable : consumers) &#123;</div><div class="line">            Future&lt;ConsumerFuture&gt; future = threadPool.submit(runnable) ;</div><div class="line">        &#125;</div><div class="line">        if (threadPool.isShutdown())&#123;</div><div class="line">            long endTime = System.currentTimeMillis() ;</div><div class="line">            LOGGER.info(&quot;main thread use &#123;&#125; Millis&quot; ,endTime -startTime) ;</div><div class="line">        &#125;</div><div class="line">        threadPool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后真正的执行逻辑<code>ConsumerCallable</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">public class ConsumerCallable implements Callable&lt;ConsumerFuture&gt; &#123;</div><div class="line">    private static Logger LOGGER = LoggerFactory.getLogger(ConsumerCallable.class);</div><div class="line"></div><div class="line">    private AtomicInteger totalCount = new AtomicInteger() ;</div><div class="line">    private AtomicLong totalTime = new AtomicLong() ;</div><div class="line"></div><div class="line">    private AtomicInteger count = new AtomicInteger() ;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 每个线程维护KafkaConsumer实例</div><div class="line">     */</div><div class="line">    private final KafkaConsumer&lt;String, String&gt; consumer;</div><div class="line"></div><div class="line">    public ConsumerCallable(String brokerList, String groupId, String topic) &#123;</div><div class="line">        Properties props = new Properties();</div><div class="line">        props.put(&quot;bootstrap.servers&quot;, brokerList);</div><div class="line">        props.put(&quot;group.id&quot;, groupId);</div><div class="line">        //自动提交位移</div><div class="line">        props.put(&quot;enable.auto.commit&quot;, &quot;true&quot;);</div><div class="line">        props.put(&quot;auto.commit.interval.ms&quot;, &quot;1000&quot;);</div><div class="line">        props.put(&quot;session.timeout.ms&quot;, &quot;30000&quot;);</div><div class="line">        props.put(&quot;key.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</div><div class="line">        props.put(&quot;value.deserializer&quot;, &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;);</div><div class="line">        this.consumer = new KafkaConsumer&lt;&gt;(props);</div><div class="line">        consumer.subscribe(Arrays.asList(topic));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    /**</div><div class="line">     * Computes a result, or throws an exception if unable to do so.</div><div class="line">     *</div><div class="line">     * @return computed result</div><div class="line">     * @throws Exception if unable to compute a result</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public ConsumerFuture call() throws Exception &#123;</div><div class="line">        boolean flag = true;</div><div class="line">        int failPollTimes = 0 ;</div><div class="line">        long startTime = System.currentTimeMillis() ;</div><div class="line">        while (flag) &#123;</div><div class="line">            // 使用200ms作为获取超时时间</div><div class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(200);</div><div class="line">            if (records.count() &lt;= 0)&#123;</div><div class="line">                failPollTimes ++ ;</div><div class="line"></div><div class="line">                if (failPollTimes &gt;= 20)&#123;</div><div class="line">                    LOGGER.debug(&quot;达到&#123;&#125;次数，退出 &quot;,failPollTimes);</div><div class="line">                    flag = false ;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                continue ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            //获取到之后则清零</div><div class="line">            failPollTimes = 0 ;</div><div class="line"></div><div class="line">            LOGGER.debug(&quot;本次获取:&quot;+records.count());</div><div class="line">            count.addAndGet(records.count()) ;</div><div class="line">            totalCount.addAndGet(count.get()) ;</div><div class="line">            long endTime = System.currentTimeMillis() ;</div><div class="line">            if (count.get() &gt;= 10000 )&#123;</div><div class="line">                LOGGER.info(&quot;this consumer &#123;&#125; record，use &#123;&#125; milliseconds&quot;,count,endTime-startTime);</div><div class="line">                totalTime.addAndGet(endTime-startTime) ;</div><div class="line">                startTime = System.currentTimeMillis() ;</div><div class="line">                count = new AtomicInteger();</div><div class="line">            &#125;</div><div class="line">            LOGGER.debug(&quot;end totalCount=&#123;&#125;,min=&#123;&#125;&quot;,totalCount,totalTime);</div><div class="line"></div><div class="line">            /*for (ConsumerRecord&lt;String, String&gt; record : records) &#123;</div><div class="line">                // 简单地打印消息</div><div class="line">                LOGGER.debug(record.value() + &quot; consumed &quot; + record.partition() +</div><div class="line">                        &quot; message with offset: &quot; + record.offset());</div><div class="line">            &#125;*/</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ConsumerFuture consumerFuture = new ConsumerFuture(totalCount.get(),totalTime.get()) ;</div><div class="line">        return consumerFuture ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>理一下逻辑:</p>
<blockquote>
<p>其实就是初始化出三个消费者实例，用于三个线程消费。其中加入了一些统计，最后也是消费120009条数据结果如下。</p>
</blockquote>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fl32335qxgj30sb04dq59.jpg" alt=""></p>
<p>由于是并行运行，可见消费120009条数据可以提高2秒左右，当数据以更高的数量级提升后效果会更加明显。</p>
<p>但这也有一些弊端:</p>
<ul>
<li>灵活度不高，当分区数量变更之后不能自适应调整。</li>
<li>消费逻辑和处理逻辑在同一个线程，如果处理逻辑较为复杂会影响效率，耦合也较高。当然这个处理逻辑可以再通过一个内部队列发出去由另外的程序来处理也是可以的。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>Kafka</code>的知识点还是较多，<code>Kafka</code>的使用也远不这些。之后会继续分享一些关于<code>Kafka</code>监控等相关内容。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fkpzk7hcz4j31kw11xhbz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;写这篇文章的起因是由于之前的一篇关于&lt;code&gt;Kafka&lt;/code&gt;&lt;a href=&quot;http://crossoverjie.top/2017/09/05/SSM16/&quot;&gt;异常消费&lt;/a&gt;，当时为了解决问题不得不使用临时的方案。&lt;/p&gt;
&lt;p&gt;总结起来归根结底还是对Kafka不熟悉导致的，加上平时工作的需要，之后就花些时间看了&lt;code&gt;Kafka&lt;/code&gt;相关的资料。&lt;/p&gt;
&lt;h1 id=&quot;何时使用MQ&quot;&gt;&lt;a href=&quot;#何时使用MQ&quot; class=&quot;headerlink&quot; title=&quot;何时使用MQ&quot;&gt;&lt;/a&gt;何时使用MQ&lt;/h1&gt;&lt;p&gt;谈到&lt;code&gt;Kafka&lt;/code&gt;就不得不提到MQ，是属于消息队列的一种。作为一种基础中间件在互联网项目中有着大量的使用。&lt;/p&gt;
&lt;p&gt;一种技术的产生自然是为了解决某种需求，通常来说是以下场景：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;需要跨进程通信：B系统需要A系统的输出作为输入参数。&lt;/li&gt;
&lt;li&gt;当A系统的输出能力远远大于B系统的处理能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对于第一种情况有两种方案:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;RPC&lt;/code&gt;远程调用,A直接调用B。&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;MQ&lt;/code&gt;,A发布消息到&lt;code&gt;MQ&lt;/code&gt;,B订阅该消息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们的需求是:A调用B实时响应，并且实时关心响应结果则使用&lt;code&gt;RPC&lt;/code&gt;，这种情况就得使用同步调用。&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverjie.top/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="Kafka" scheme="http://crossoverjie.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>sbc(五)Hystrix-服务容错与保护</title>
    <link href="http://crossoverjie.top/2017/09/20/sbc5/"/>
    <id>http://crossoverjie.top/2017/09/20/sbc5/</id>
    <published>2017-09-19T17:13:22.000Z</published>
    <updated>2017-09-21T07:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fjpcdozanoj30rs0ku76w.jpg" alt="1"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看过 <a href="http://crossoverjie.top/2017/08/11/sbc4/">应用限流</a>的朋友应该知道，限流的根本目的就是为了保障服务的高可用。</p>
<p>本次再借助<code>SpringCloud</code>中的集成的<code>Hystrix</code>组件来谈谈服务容错。</p>
<p>其实产生某项需求的原因都是为了解决某个需求。当我们将应用进行分布式模块部署之后,各个模块之间通过远程调用的方式进行交互(<code>RPC</code>)。拿我们平时最常见的下单买商品来说，点击下单按钮的一瞬间可能会向发送的请求包含：</p>
<ul>
<li>请求订单系统创建订单。</li>
<li>请求库存系统扣除库存。</li>
<li>请求用户系统更新用户交易记录。</li>
</ul>
<p>这其中的每一步都有可能因为网络、资源、服务器等原因造成延迟响应甚至是调用失败。当后面的请求源源不断的过来时延迟的资源也没有的到释放，这样的堆积很有可能把其中一个模块拖垮，其中的依赖关系又有可能把整个调用链中的应用Over最后导致整个系统不可能。这样就会产生一种现象:<code>雪崩效应</code>。</p>
<p>之前讲到的限流也能起到一定的保护作用，但还远远不够。我们需要从各个方面来保障服务的高可用。</p>
<p>比如：</p>
<ul>
<li>超时重试。</li>
<li>断路器模式。</li>
<li>服务降级。<br>等各个方面来保障。</li>
</ul>
<a id="more"></a>
<h1 id="使用Hystrix"><a href="#使用Hystrix" class="headerlink" title="使用Hystrix"></a>使用Hystrix</h1><p><code>SpringCloud</code>中已经为我们集成了<code>Netflix</code>开源的<code>Hystrix</code>框架，使用该框架可以很好的帮我们做到服务容错。</p>
<h2 id="Hystrix简介"><a href="#Hystrix简介" class="headerlink" title="Hystrix简介"></a>Hystrix简介</h2><p>下面是一张官方的流程图:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjpdhmuzqmj31240ijn0y.jpg" alt=""></p>
<p>简单介绍下:</p>
<blockquote>
<p>在远程调用时，将请求封装到HystrixCommand进行同步或是异步调用，在调用过程中判断熔断器是否打开、线程池或是信号量是否饱和、执行过程中是否抛出异常，如果是的话就会进入回退逻辑。并且整个过程中都会收集运行状态来控制断路器的状态。</p>
</blockquote>
<p>不但如此该框架还拥有自我恢复功能，当断路器打开后，每次请求都会进入回退逻辑。当我们的应用恢复正常后也不能再进入回退逻辑吧。</p>
<p>所以<code>hystrix</code>会在断路器打开后的一定时间将请求发送到服务提供者，如果正常响应就关闭断路器，反之则继续打开，这样就能很灵活的自我修复了。</p>
<h2 id="Feign整合Hystrix"><a href="#Feign整合Hystrix" class="headerlink" title="Feign整合Hystrix"></a>Feign整合Hystrix</h2><p>在之前的章节中已经使用<code>Feign</code>来进行声明式调用了，并且在实际开发中也是如此，所以这次我们就直接用Feign来整合Hystrix。</p>
<p>使用了项目原有的<code>sbc-user,sbc-order</code>来进行演示，调用关系如下图:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjpedcaj4yj30c509zaaf.jpg" alt=""></p>
<p><code>User应用</code>通过<code>Order</code>提供出来的<code>order-client</code>依赖调用了<code>Order</code>中的创建订单服务。</p>
<p>其中主要修改的就是<code>order-client</code>，在之前的<code>OrderServiceClient</code>接口中增加了以下注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/orderService"</span>)</div><div class="line"><span class="meta">@FeignClient</span>(name=<span class="string">"sbc-order"</span>,</div><div class="line">        <span class="comment">// fallbackFactory = OrderServiceFallbackFactory.class,</span></div><div class="line">        <span class="comment">// <span class="doctag">FIXME:</span> 2017/9/4 如果配置了fallback 那么fallbackFactory将会无效</span></div><div class="line">        fallback = OrderServiceFallBack.class,</div><div class="line">        configuration = OrderConfig.class)</div><div class="line"><span class="meta">@RibbonClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderServiceClient</span> <span class="keyword">extends</span> <span class="title">OrderService</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取订单号"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getOrderNo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于Feign已经默认整合了<code>Hystrix</code>所以不需要再额外加入依赖。</p>
<h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>对应的<code>@FeignClient中的fallback属性</code>则是服务容错中很关键的服务降级的具体实现，来看看<code>OrderServiceFallBack</code>类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceFallBack</span> <span class="keyword">implements</span> <span class="title">OrderServiceClient</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">        BaseResponse&lt;OrderNoResVO&gt; baseResponse = <span class="keyword">new</span> BaseResponse&lt;&gt;() ;</div><div class="line">        OrderNoResVO vo = <span class="keyword">new</span> OrderNoResVO() ;</div><div class="line">        vo.setOrderId(<span class="number">123456L</span>);</div><div class="line">        baseResponse.setDataBody(vo);</div><div class="line">        baseResponse.setMessage(StatusEnum.FALLBACK.getMessage());</div><div class="line">        baseResponse.setCode(StatusEnum.FALLBACK.getCode());</div><div class="line">        <span class="keyword">return</span> baseResponse;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类实现了<code>OrderServiceClient</code>接口，可以很明显的看出其中的<code>getOrderNo()</code>方法就是服务降级时所触发的逻辑。</p>
<p>光有实现还不够，我们需要将改类加入到<code>Spring</code>中管理起来。这样上文中<code>@FeignClient</code>的<code>configuration</code>属性就起到作用了，来看看对应的<code>OrderConfig</code>的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderServiceFallBack <span class="title">fallBack</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderServiceFallBack();</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderServiceFallbackFactory <span class="title">factory</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderServiceFallbackFactory();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>new OrderServiceFallBack()</code>并用了<code>@Bean</code>注解，等同于:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;orderServiceFallBack&quot; class=&quot;com.crossoverJie.order.feign.config.OrderServiceFallBack&quot;&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>这样每当请求失败就会执行回退逻辑，如下图:<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjqj89qtzfj30qo0kl0vd.jpg" alt=""></p>
<p>值得注意的是即便是执行了回退逻辑断路器也不一定打开了，我们可以通过应用的<code>health</code>端点来查看<code>Hystrix</code>的状态。</p>
<p>ps:想要查看该端点需要加入以下依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>就拿刚才的例子来说，先关闭<code>Order</code>应用，在<code>Swagger</code>访问下面这个接口，肯定是会进入回退逻辑:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@Api</span>(<span class="string">"用户服务API"</span>)</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/userService"</span>)</div><div class="line"><span class="meta">@Validated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"hystrix容错调用"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getUserByHystrix"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse&lt;OrderNoResVO&gt; <span class="title">getUserByHystrix</span><span class="params">(@RequestBody UserReqVO userReqVO)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看<code>health</code>端点:</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjqjfjeeo2j30nf0n5dii.jpg" alt=""><br>发现<code>Hystrix</code>的状态依然是UP状态，表明当前断路器并没有打开。</p>
<p>反复调用多次接口之后再次查看<code>health</code>端点:<br><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjqjhrftuqj30ni0noju9.jpg" alt=""></p>
<p>发现这个时候断路器已经打开了。</p>
<blockquote>
<p>这是因为断路器只有在达到了一定的失败阈值之后才会打开。</p>
</blockquote>
<h2 id="输出异常"><a href="#输出异常" class="headerlink" title="输出异常"></a>输出异常</h2><p>进入回退逻辑之后还不算完，大部分场景我们都需要记录为什么回退，也就是具体的异常。这些信息对我们后续的系统监控，应用调优也有很大帮助。</p>
<p>实现起来也很简单:<br>上文中在<code>@FeignClient</code>注解中加入的<code>fallbackFactory = OrderServiceFallbackFactory.class</code>属性则是用于处理回退逻辑以及包含异常信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:查看fallback原因</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> *         Date: 2017/9/4 00:45</div><div class="line"> * <span class="doctag">@since</span> JDK 1.8</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceFallbackFactory</span> <span class="keyword">implements</span> <span class="title">FallbackFactory</span>&lt;<span class="title">OrderServiceClient</span>&gt;</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(OrderServiceFallbackFactory.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> OrderServiceClient <span class="title">create</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OrderServiceClient() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">                LOGGER.error(<span class="string">"fallback:"</span> + throwable);</div><div class="line"></div><div class="line">                BaseResponse&lt;OrderNoResVO&gt; baseResponse = <span class="keyword">new</span> BaseResponse&lt;&gt;() ;</div><div class="line">                OrderNoResVO vo = <span class="keyword">new</span> OrderNoResVO() ;</div><div class="line">                vo.setOrderId(<span class="number">123456L</span>);</div><div class="line">                baseResponse.setDataBody(vo);</div><div class="line">                baseResponse.setMessage(StatusEnum.FALLBACK.getMessage());</div><div class="line">                baseResponse.setCode(StatusEnum.FALLBACK.getCode());</div><div class="line">                <span class="keyword">return</span> baseResponse;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单，实现了<code>FallbackFactory</code>接口中的<code>create()</code>方法，该方法的入参就是异常信息，可以按照我们的需要自行处理，后面则是和之前一样的回退处理。</p>
<p><code>2017-09-21 13:22:30.307 ERROR 27838 --- [rix-sbc-order-1] c.c.o.f.f.OrderServiceFallbackFactory    : fallback:java.lang.RuntimeException: com.netflix.client.ClientException: Load balancer does not have available server for client: sbc-order</code>。</p>
<p><strong>Note</strong>:</p>
<p><code>fallbackFactory</code>和<code>fallback</code>属性不可共用。</p>
<h1 id="Hystrix监控"><a href="#Hystrix监控" class="headerlink" title="Hystrix监控"></a>Hystrix监控</h1><p>Hystrix还自带了一套监控组件，只要依赖了<code>spring-boot-starter-actuator</code>即可通过<code>/hystrix.stream</code>端点来获得监控信息。<br><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fjr1y3bymjj31kw0s5e82.jpg" alt=""></p>
<p>冰冷的数据肯定没有实时的图表来的直观，所以<code>Hystrix</code>也自带<code>Dashboard</code>。</p>
<h2 id="Hystrix与Turbine聚合监控"><a href="#Hystrix与Turbine聚合监控" class="headerlink" title="Hystrix与Turbine聚合监控"></a>Hystrix与Turbine聚合监控</h2><p>为此我们新建了一个应用<code>sbc-hystrix-turbine</code>来显示<code>hystrix-dashboard</code>。<br>目录结构和普通的<code>springboot</code>应用没有差异，看看主类:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//开启EnableTurbine</span></div><div class="line"></div><div class="line"><span class="meta">@EnableTurbine</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableHystrixDashboard</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SbcHystrixTurbineApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(SbcHystrixTurbineApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>其中使用<code>@EnableHystrixDashboard</code>开启<code>Dashboard</code></li>
<li><code>@EnableTurbine</code>开启<code>Turbine</code>支持。</li>
</ul>
<p>以上这些注解需要以下这些依赖:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-netflix-turbine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>实际项目中，我们的应用都是多节点部署以达到高可用的目的，单个监控显然不现实，所以需要使用Turbine来进行聚合监控。</p>
</blockquote>
<p>关键的<code>application.properties</code>配置文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 项目配置</div><div class="line">spring.application.name=sbc-hystrix-trubine</div><div class="line">server.context-path=/</div><div class="line">server.port=8282</div><div class="line"></div><div class="line"># eureka地址</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/</div><div class="line">eureka.instance.prefer-ip-address=true</div><div class="line"></div><div class="line"># 需要加入的实例</div><div class="line">turbine.appConfig=sbc-user,sbc-order</div><div class="line">turbine.cluster-name-expression=&quot;default&quot;</div></pre></td></tr></table></figure>
<p>其中<code>turbine.appConfig</code>配置我们需要监控的应用，这样当多节点部署的时候就非常方便了(<code>同一个应用的多个节点spring.application.name值是相同的</code>)。</p>
<p>将该应用启动访问<code>http://ip:port/hystrix.stream</code>：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fjr3wu3f4oj316a0i4dig.jpg" alt=""></p>
<p>由于我们的turbine和Dashboard是一个应用所以输入<code>http://localhost:8282/turbine.stream</code>即可。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79ly1fjr4apibpjj31ga0dr416.jpg" alt=""></p>
<p>详细指标如官方描述:<br><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fjr4gjnl82j30hs0bfq4c.jpg" alt=""></p>
<p>通过该面板我们就可以及时的了解到应用当前的各个状态，如果再加上一些报警措施就能帮我们及时的响应生产问题。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>服务容错的整个还是比较大的,博主也是摸着石头过河，关于本次的<code>Hystrix</code>只是一个入门版，后面会持续分析它的线程隔离、信号量隔离等原理。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fjpcdozanoj30rs0ku76w.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看过 &lt;a href=&quot;http://crossoverjie.top/2017/08/11/sbc4/&quot;&gt;应用限流&lt;/a&gt;的朋友应该知道，限流的根本目的就是为了保障服务的高可用。&lt;/p&gt;
&lt;p&gt;本次再借助&lt;code&gt;SpringCloud&lt;/code&gt;中的集成的&lt;code&gt;Hystrix&lt;/code&gt;组件来谈谈服务容错。&lt;/p&gt;
&lt;p&gt;其实产生某项需求的原因都是为了解决某个需求。当我们将应用进行分布式模块部署之后,各个模块之间通过远程调用的方式进行交互(&lt;code&gt;RPC&lt;/code&gt;)。拿我们平时最常见的下单买商品来说，点击下单按钮的一瞬间可能会向发送的请求包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求订单系统创建订单。&lt;/li&gt;
&lt;li&gt;请求库存系统扣除库存。&lt;/li&gt;
&lt;li&gt;请求用户系统更新用户交易记录。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这其中的每一步都有可能因为网络、资源、服务器等原因造成延迟响应甚至是调用失败。当后面的请求源源不断的过来时延迟的资源也没有的到释放，这样的堆积很有可能把其中一个模块拖垮，其中的依赖关系又有可能把整个调用链中的应用Over最后导致整个系统不可能。这样就会产生一种现象:&lt;code&gt;雪崩效应&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;之前讲到的限流也能起到一定的保护作用，但还远远不够。我们需要从各个方面来保障服务的高可用。&lt;/p&gt;
&lt;p&gt;比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;超时重试。&lt;/li&gt;
&lt;li&gt;断路器模式。&lt;/li&gt;
&lt;li&gt;服务降级。&lt;br&gt;等各个方面来保障。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverjie.top/tags/SpringCloud/"/>
    
      <category term="Hystrix" scheme="http://crossoverjie.top/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十六) 曲线救国-Kafka消费异常</title>
    <link href="http://crossoverjie.top/2017/09/05/SSM16/"/>
    <id>http://crossoverjie.top/2017/09/05/SSM16/</id>
    <published>2017-09-05T03:01:54.000Z</published>
    <updated>2017-09-05T15:18:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fj8sf9847xj31kw11zhdw.jpg" alt="封面"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近线上遇到一个问题:在消费<code>kafka</code>消息的时候如果长时间(<code>大概半天到一天的时间</code>)队列里没有消息就可能再也消费不了。针对这个问题我们反复调试多次。线下模拟，调整代码，但貌似还是没有找到原因。<strong>但是只要重启消费进程就又可以继续消费。</strong></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>由于线上业务非常依赖<code>kafka</code>的消费，但一时半会也没有找到原因，所以最后只能想一个临时的替换方案：</p>
<blockquote>
<p>基于重启就可以消费这个特点，我们在每次消费的时候都记下当前的时间点，当这个时间点在十分钟之内都没有更新我们就认为当前队列中没有消息了，就需要重启下消费进程。</p>
</blockquote>
<p>既然是需要重启，<code>由于目前还没有上分布式调度中心</code>所以需要<code>crontab</code>来配合调度：每隔一分钟会调用一个<code>shell脚本</code>，该脚本会判断当前进程是否存在，如果存在则什么都不作，不存在则启动消费进程。</p>
<a id="more"></a>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>消费程序:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * kafka消费</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> * <span class="doctag">@date</span> 2017年6月19日 下午3:15:16</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaMsgConsumer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(KafkaMsgConsumer.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">4</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_POOL_SIZE = <span class="number">4</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BLOCKING_QUEUE_CAPACITY = <span class="number">4000</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KAFKA_CONFIG = <span class="string">"kafkaConfig"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ExecutorService fixedThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(BLOCKING_QUEUE_CAPACITY));</div><div class="line"></div><div class="line">    <span class="comment">//最后更新时间</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicLong LAST_MESSAGE_TIME = <span class="keyword">new</span> AtomicLong(DateUtil.getLongTime());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MsgIterator iter = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String topic;<span class="comment">//主题名称</span></div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">        String path = System.getProperty(KAFKA_CONFIG);</div><div class="line">        checkArguments(!StringUtils.isBlank(path), <span class="string">"启动参数中没有配置kafka_easyframe_msg参数来指定kafka启动参数，请使用-DkafkaConfig=/path/fileName/easyframe-msg.properties"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            properties.load(<span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(path)));</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            LOGGER.error(<span class="string">"IOException"</span> ,e);</div><div class="line">        &#125;</div><div class="line">        EasyMsgConfig.setProperties(properties);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">iteratorTopic</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (iter == <span class="keyword">null</span>) &#123;</div><div class="line">            iter = MsgUtil.consume(topic);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">long</span> i = <span class="number">0L</span>;</div><div class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</div><div class="line">            i++;</div><div class="line">            <span class="keyword">if</span> (i % <span class="number">10000</span> == <span class="number">0</span>) &#123;</div><div class="line">                LOGGER.info(<span class="string">"consume i:"</span> + i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String message = iter.next();</div><div class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(message)) &#123;</div><div class="line">                    <span class="keyword">continue</span>;</div><div class="line">                &#125;</div><div class="line">                LAST_MESSAGE_TIME = <span class="keyword">new</span> AtomicLong(DateUtil.getLongTime());</div><div class="line"></div><div class="line">                <span class="comment">//处理消息</span></div><div class="line">                LOGGER.debug(<span class="string">"msg = "</span> + JSON.toJSONString(message));</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                LOGGER.error(<span class="string">"KafkaMsgConsumer err:"</span>, e);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">                    LOGGER.error(<span class="string">"Thread InterruptedException"</span>, e1);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        topic = System.getProperty(<span class="string">"topic"</span>);</div><div class="line">        checkArguments(!StringUtils.isBlank(topic), <span class="string">"system property topic or log_path is must!"</span>);</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                iteratorTopic();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                MsgUtil.shutdownConsummer();</div><div class="line">                iter = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">                LOGGER.error(<span class="string">"KafkaMsgConsumer err:"</span>, e);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e1) &#123;</div><div class="line">                    LOGGER.error(<span class="string">"Thread InterruptedException"</span>, e1);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">//此处关闭之后，由crontab每分钟检查一次，挂掉的话会重新拉起来</span></div><div class="line">                <span class="keyword">if</span> (DateUtil.getLongTime() - LAST_MESSAGE_TIME.get() &gt; <span class="number">10</span> * <span class="number">60</span>) &#123; <span class="comment">//10分钟</span></div><div class="line">                    fixedThreadPool.shutdown();</div><div class="line">                    LOGGER.info(<span class="string">"线程池是否关闭："</span> + fixedThreadPool.isShutdown());</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        <span class="comment">//当前线程阻塞10ms后，去检测线程池是否终止，终止则返回true</span></div><div class="line">                        <span class="keyword">while</span> (!fixedThreadPool.awaitTermination(<span class="number">10</span>, TimeUnit.MILLISECONDS)) &#123;</div><div class="line">                            LOGGER.info(<span class="string">"检测线程池是否终止："</span> + fixedThreadPool.isTerminated());</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        LOGGER.error(<span class="string">"等待线程池关闭错误"</span>, e);</div><div class="line">                    &#125;</div><div class="line">                    LOGGER.info(<span class="string">"线程池是否终止："</span> + fixedThreadPool.isTerminated());</div><div class="line">                    LOGGER.info(<span class="string">"in 10 min dont have data break"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        LOGGER.info(<span class="string">"app shutdown"</span>);</div><div class="line">        System.exit(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/crossoverJie/SSM/blob/master/SSM-WEB/src/main/java/com/crossoverJie/kafka/KafkaMsgConsumer.java#L31-L128" target="_blank" rel="external">在线代码</a></p>
<p>需要配合以下这个<code>shell脚本运行</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">#crontab</div><div class="line"># * * * * * sh /data/schedule/kafka/run-kafka-consumer.sh &gt;&gt;/data/schedule/kafka/run-sms-log.log</div><div class="line"></div><div class="line"># 如果进程存在就不启动</div><div class="line">a1=`ps -ef|grep &apos;KafkaMsgConsumer&apos;|grep -v grep|wc -l`</div><div class="line">if [ $a1 -gt 0  ];then</div><div class="line">        echo &quot;=======     `date +&apos;%Y-%m-%d %H:%M:%S&apos;` KafkaMsgConsumer  is EXIT...=======     &quot;</div><div class="line">        exit</div><div class="line">fi</div><div class="line">LANG=&quot;zh_CN.UTF-8&quot;</div><div class="line">nohup /opt/java/jdk1.7.0_80/bin/java -d64 -Djava.security.egd=file:/dev/./urandom</div><div class="line">-Djava.ext.dirs=/opt/tomcat/webapps/ROOT/WEB-INF/lib</div><div class="line">-Dtopic=TOPIC_A</div><div class="line">-Dlogback.configurationFile=/data/schedule/kafka/logback.xml</div><div class="line">-DkafkaConfig=/opt/tomcat/iopconf/easyframe-msg.properties</div><div class="line">-classpath /opt/tomcat/webapps/ROOT/WEB-INF/classes com.crossoverJie.kafka.SMSMsgConsumer &gt;&gt; /data/schedule/kafka/smslog/kafka.log 2&gt;&amp;1 &amp;</div><div class="line"></div><div class="line">echo &quot;`date +&apos;%Y-%m-%d %H:%M:%S&apos;`  KafkaMsgConsumer running....&quot;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/crossoverJie/SSM/blob/master/SSM-WEB/src/main/resources/script/run-kafka-consumer.sh" target="_blank" rel="external">在线代码</a></p>
<p>再配合<code>crontab</code>的调度:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* * * * * sh /data/schedule/kafka/run-kafka-consumer.sh &gt;&gt;/data/schedule/kafka/run-sms-log.log</div></pre></td></tr></table></figure></p>
<p>即可。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽说处理起来很简单，但依然是治标不治本，依赖的东西比较多(<code>shell脚本，调度</code>)。<br>所以也问问各位有没有什么思路：</p>
<ul>
<li>消费程序用的:<a href="https://github.com/linzhaoming/easyframe-msg" target="_blank" rel="external">https://github.com/linzhaoming/easyframe-msg</a></li>
</ul>
<p>生产配置:</p>
<ul>
<li>三台<code>kafka、ZK</code>组成的集群。</li>
</ul>
<p>其中也有其他团队的消费程序在正常运行，应该和<code>kafka</code>的配置没有关系。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fj8sf9847xj31kw11zhdw.jpg&quot; alt=&quot;封面&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近线上遇到一个问题:在消费&lt;code&gt;kafka&lt;/code&gt;消息的时候如果长时间(&lt;code&gt;大概半天到一天的时间&lt;/code&gt;)队列里没有消息就可能再也消费不了。针对这个问题我们反复调试多次。线下模拟，调整代码，但貌似还是没有找到原因。&lt;strong&gt;但是只要重启消费进程就又可以继续消费。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h1&gt;&lt;p&gt;由于线上业务非常依赖&lt;code&gt;kafka&lt;/code&gt;的消费，但一时半会也没有找到原因，所以最后只能想一个临时的替换方案：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基于重启就可以消费这个特点，我们在每次消费的时候都记下当前的时间点，当这个时间点在十分钟之内都没有更新我们就认为当前队列中没有消息了，就需要重启下消费进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然是需要重启，&lt;code&gt;由于目前还没有上分布式调度中心&lt;/code&gt;所以需要&lt;code&gt;crontab&lt;/code&gt;来配合调度：每隔一分钟会调用一个&lt;code&gt;shell脚本&lt;/code&gt;，该脚本会判断当前进程是否存在，如果存在则什么都不作，不存在则启动消费进程。&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverjie.top/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="Kafka" scheme="http://crossoverjie.top/tags/Kafka/"/>
    
      <category term="shell" scheme="http://crossoverjie.top/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>sbc(四)应用限流</title>
    <link href="http://crossoverjie.top/2017/08/11/sbc4/"/>
    <id>http://crossoverjie.top/2017/08/11/sbc4/</id>
    <published>2017-08-11T10:13:22.000Z</published>
    <updated>2018-04-28T13:08:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/08/11/598c8c87529b1.jpeg" alt="pexels-photo-306198.jpeg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在一个高并发系统中对流量的把控是非常重要的，当巨大的流量直接请求到我们的服务器上没多久就可能造成接口不可用，不处理的话甚至会造成整个应用不可用。</p>
</blockquote>
<p>比如最近就有个这样的需求，我作为客户端要向<code>kafka</code>生产数据，而<code>kafka</code>的消费者则再源源不断的消费数据，并将消费的数据全部请求到<code>web服务器</code>，虽说做了负载(有4台<code>web服务器</code>)但业务数据的量也是巨大的，每秒钟可能有上万条数据产生。如果生产者直接生产数据的话极有可能把<code>web服务器</code>拖垮。</p>
<p>对此就必须要做限流处理，每秒钟生产一定限额的数据到<code>kafka</code>，这样就能极大程度的保证<code>web</code>的正常运转。</p>
<p><strong>其实不管处理何种场景，本质都是降低流量保证应用的高可用。</strong></p>
<h1 id="常见算法"><a href="#常见算法" class="headerlink" title="常见算法"></a>常见算法</h1><p>对于限流常见有两种算法:</p>
<ul>
<li>漏桶算法</li>
<li>令牌桶算法</li>
</ul>
<p>漏桶算法比较简单，就是将流量放入桶中，漏桶同时也按照一定的速率流出，如果流量过快的话就会溢出(<code>漏桶并不会提高流出速率</code>)。溢出的流量则直接丢弃。</p>
<p>如下图所示:</p>
<p><img src="https://i.loli.net/2017/08/11/598c905caa8cb.png" alt="漏桶算法，来自网络.png"></p>
<a id="more"></a>
<p>这种做法简单粗暴。</p>
<p><code>漏桶算法</code>虽说简单，但却不能应对实际场景，比如突然暴增的流量。</p>
<p>这时就需要用到<code>令牌桶算法</code>:</p>
<p><code>令牌桶</code>会以一个恒定的速率向固定容量大小桶中放入令牌，当有流量来时则取走一个或多个令牌。当桶中没有令牌则将当前请求丢弃或阻塞。</p>
<p><img src="https://i.loli.net/2017/08/11/598c91f2a33af.gif" alt="令牌桶算法-来自网络.gif"></p>
<blockquote>
<p>相比之下令牌桶可以应对一定的突发流量.</p>
</blockquote>
<h1 id="RateLimiter实现"><a href="#RateLimiter实现" class="headerlink" title="RateLimiter实现"></a>RateLimiter实现</h1><p>对于令牌桶的代码实现，可以直接使用<code>Guava</code>包中的<code>RateLimiter</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;UserResVO&gt; <span class="title">getUserByFeignBatch</span><span class="params">(@RequestBody UserReqVO userReqVO)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用远程服务</span></div><div class="line">    OrderNoReqVO vo = <span class="keyword">new</span> OrderNoReqVO() ;</div><div class="line">    vo.setReqNo(userReqVO.getReqNo());</div><div class="line"></div><div class="line">    RateLimiter limiter = RateLimiter.create(<span class="number">2.0</span>) ;</div><div class="line">    <span class="comment">//批量调用</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt; <span class="number">10</span> ; i++)&#123;</div><div class="line">        <span class="keyword">double</span> acquire = limiter.acquire();</div><div class="line">        logger.debug(<span class="string">"获取令牌成功!,消耗="</span> + acquire);</div><div class="line">        BaseResponse&lt;OrderNoResVO&gt; orderNo = orderServiceClient.getOrderNo(vo);</div><div class="line">        logger.debug(<span class="string">"远程返回:"</span>+JSON.toJSONString(orderNo));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    UserRes userRes = <span class="keyword">new</span> UserRes() ;</div><div class="line">    userRes.setUserId(<span class="number">123</span>);</div><div class="line">    userRes.setUserName(<span class="string">"张三"</span>);</div><div class="line"></div><div class="line">    userRes.setReqNo(userReqVO.getReqNo());</div><div class="line">    userRes.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    userRes.setMessage(<span class="string">"成功"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> userRes ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/crossoverJie/springboot-cloud/blob/master/sbc-user/user/src/main/java/com/crossoverJie/sbcuser/controller/UserController.java#L82:L105" target="_blank" rel="external">详见此</a>。</p>
<p>调用结果如下:</p>
<p><img src="https://i.loli.net/2017/08/11/598c960f8983f.jpg" alt="1.jpg"></p>
<p>代码可以看出以每秒向桶中放入两个令牌，请求一次消耗一个令牌。所以每秒钟只能发送两个请求。按照图中的时间来看也确实如此(返回值是获取此令牌所消耗的时间，差不多也是每500ms一个)。</p>
<p>使用<code>RateLimiter</code>有几个值得注意的地方:</p>
<p>允许<code>先消费，后付款</code>，意思就是它可以来一个请求的时候一次性取走几个或者是剩下所有的令牌甚至多取，但是后面的请求就得为上一次请求买单，它需要等待桶中的令牌补齐之后才能继续获取令牌。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>针对于单个应用的限流 <code>RateLimiter</code> 够用了，如果是分布式环境可以借助 <code>Redis</code> 来完成。</p>
<p>最近也怼了一个，可以<a href="https://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/">参考</a>。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/11/598c8c87529b1.jpeg&quot; alt=&quot;pexels-photo-306198.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在一个高并发系统中对流量的把控是非常重要的，当巨大的流量直接请求到我们的服务器上没多久就可能造成接口不可用，不处理的话甚至会造成整个应用不可用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如最近就有个这样的需求，我作为客户端要向&lt;code&gt;kafka&lt;/code&gt;生产数据，而&lt;code&gt;kafka&lt;/code&gt;的消费者则再源源不断的消费数据，并将消费的数据全部请求到&lt;code&gt;web服务器&lt;/code&gt;，虽说做了负载(有4台&lt;code&gt;web服务器&lt;/code&gt;)但业务数据的量也是巨大的，每秒钟可能有上万条数据产生。如果生产者直接生产数据的话极有可能把&lt;code&gt;web服务器&lt;/code&gt;拖垮。&lt;/p&gt;
&lt;p&gt;对此就必须要做限流处理，每秒钟生产一定限额的数据到&lt;code&gt;kafka&lt;/code&gt;，这样就能极大程度的保证&lt;code&gt;web&lt;/code&gt;的正常运转。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其实不管处理何种场景，本质都是降低流量保证应用的高可用。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;常见算法&quot;&gt;&lt;a href=&quot;#常见算法&quot; class=&quot;headerlink&quot; title=&quot;常见算法&quot;&gt;&lt;/a&gt;常见算法&lt;/h1&gt;&lt;p&gt;对于限流常见有两种算法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;漏桶算法&lt;/li&gt;
&lt;li&gt;令牌桶算法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;漏桶算法比较简单，就是将流量放入桶中，漏桶同时也按照一定的速率流出，如果流量过快的话就会溢出(&lt;code&gt;漏桶并不会提高流出速率&lt;/code&gt;)。溢出的流量则直接丢弃。&lt;/p&gt;
&lt;p&gt;如下图所示:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/11/598c905caa8cb.png&quot; alt=&quot;漏桶算法，来自网络.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverjie.top/tags/SpringCloud/"/>
    
      <category term="RateLimiter" scheme="http://crossoverjie.top/tags/RateLimiter/"/>
    
  </entry>
  
  <entry>
    <title>sbc(三)自定义Starter-SpringBoot重构去重插件</title>
    <link href="http://crossoverjie.top/2017/08/01/sbc3/"/>
    <id>http://crossoverjie.top/2017/08/01/sbc3/</id>
    <published>2017-08-01T12:10:19.000Z</published>
    <updated>2017-08-01T08:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/08/01/59800eca06bf0.jpg" alt="pexels-photo-9046.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前看过<a href="http://crossoverjie.top/2017/05/24/SSM14/">SSM(十四) 基于annotation的http防重插件</a>的朋友应该记得我后文说过之后要用<code>SpringBoot</code>来进行重构。</p>
<blockquote>
<p>这次采用自定义的<code>starter</code>的方式来进行重构。 </p>
</blockquote>
<p>关于<code>starter(起步依赖)</code>其实在第一次使用<code>SpringBoot</code>的时候就已经用到了，比如其中的:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们只需要引入这一个依赖<code>SpringBoot</code>就会把相关的依赖都加入进来，自己也不需要再去担心各个版本之间的兼容问题(具体使用哪个版本由使用的<code>spring-boot-starter-parent</code>版本决定)，这些<code>SpringBoot</code>都已经帮我们做好了。</p>
<p><img src="https://i.loli.net/2017/08/01/598028d65b395.jpg" alt="01.jpg"></p>
<hr>
<a id="more"></a>
<h1 id="Spring自动化配置"><a href="#Spring自动化配置" class="headerlink" title="Spring自动化配置"></a>Spring自动化配置</h1><p>先加入需要的一些依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--aop相关--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--redis相关--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置相关--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通用依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sbc-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>创建了<code>CheckReqConf</code>配置类用于在应用启动的时候自动配置。<br>当然前提还得在<code>resources</code>目录下创建<code>META-INF/spring.factories</code>配置文件用于指向当前类，才能在应用启动时进行自动配置。</p>
<p><code>spring.factories</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=</div><div class="line">\com.crossoverJie.request.check.conf.CheckReqConf</div></pre></td></tr></table></figure>
<h2 id="使用条件化配置"><a href="#使用条件化配置" class="headerlink" title="使用条件化配置"></a>使用条件化配置</h2><p>试着考虑下如下情况:</p>
<blockquote>
<p>因为该插件是使用<code>redis</code>来存储请求信息的，外部就依赖了<code>redis</code>。如果使用了该插件的应用没有配置或者忘了配置<code>redis</code>的一些相关连接，那么在应用使用过程中肯定会出现写入<code>redis</code>异常。</p>
<p>如果异常没有控制好的话还有可能影响项目的正常运行。</p>
</blockquote>
<p>那么怎么解决这个情况呢，可以使用<code>Spring4.0</code>新增的条件化配置来解决。</p>
<p>解决思路是:可以简单的通过判断应用中是否配置有<code>spring.redis.host</code>redis连接，如果没有我们的这个配置就会被忽略掉。</p>
<p>实现代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.crossoverJie.request.check.interceptor,com.crossoverJie.request.check.properties"</span>)</div><div class="line"></div><div class="line"><span class="comment">//是否有redis配置的校验，如果没有配置则不会加载改配置，也就是当前插件并不会生效</span></div><div class="line"><span class="meta">@Conditional</span>(CheckReqCondition.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckReqConf</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体校验的代码<code>CheckReqCondition</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckReqCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CheckReqCondition.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//如果没有加入redis配置的就返回false</span></div><div class="line">        String property = context.getEnvironment().getProperty(<span class="string">"spring.redis.host"</span>);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(property))&#123;</div><div class="line">            logger.warn(<span class="string">"Need to configure redis!"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要实现<code>org.springframework.context.annotation.Condition</code>并重写<code>matches()</code>方法,即可实现个人逻辑。</p>
<blockquote>
<p>可以在使用了该依赖的配置文件中配置或者是不配置<code>spring.redis.host</code>这个配置,来看我们的切面类(<code>ReqNoDrcAspect</code>)中53行的日志是否有打印来判断是否生效。</p>
</blockquote>
<p>这样只有在存在该key的情况下才会应用这个配置。</p>
<blockquote>
<p>当然最好的做法是直接尝试读、写redis,看是否连接畅通来进行判断。</p>
</blockquote>
<h1 id="AOP切面"><a href="#AOP切面" class="headerlink" title="AOP切面"></a><code>AOP</code>切面</h1><p>最核心的其实就是这个切面类，里边主要逻辑和之前是一模一样的就不在多说,只是这里应用到了自定义配置。</p>
<p>切面类<code>ReqNoDrcAspect</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//切面注解</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="comment">//扫描</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">//开启cglib代理</span></div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqNoDrcAspect</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ReqNoDrcAspect.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CheckReqProperties properties ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String prefixReq ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> day ;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        prefixReq = properties.getRedisKey() == <span class="keyword">null</span> ? <span class="string">"reqNo"</span> : properties.getRedisKey() ;</div><div class="line">        day = properties.getRedisTimeout() == <span class="keyword">null</span> ? <span class="number">1L</span> : properties.getRedisTimeout() ;</div><div class="line">        logger.info(<span class="string">"sbc-request-check init......"</span>);</div><div class="line">        logger.info(String.format(<span class="string">"redis prefix is [%s],timeout is [%s]"</span>, prefixReq, day));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 切面该注解</div><div class="line">     */</div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.crossoverJie.request.check.anotation.CheckReqNo)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkRepeat</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"checkRepeat()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        BaseRequest request = getBaseRequest(joinPoint);</div><div class="line">        <span class="keyword">if</span>(request != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">final</span> String reqNo = request.getReqNo();</div><div class="line">            <span class="keyword">if</span>(StringUtil.isEmpty(reqNo))&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(StatusEnum.REPEAT_REQUEST);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String tempReqNo = redisTemplate.opsForValue().get(prefixReq +reqNo);</div><div class="line">                    logger.debug(<span class="string">"tempReqNo="</span> + tempReqNo);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>((StringUtil.isEmpty(tempReqNo)))&#123;</div><div class="line">                        redisTemplate.opsForValue().set(prefixReq + reqNo, reqNo, day, TimeUnit.DAYS);</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(<span class="string">"请求号重复,"</span>+ prefixReq +<span class="string">"="</span> + reqNo);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (RedisConnectionFailureException e)&#123;</div><div class="line">                    logger.error(<span class="string">"redis操作异常"</span>,e);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(<span class="string">"need redisService"</span>) ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseRequest <span class="title">getBaseRequest</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        BaseRequest returnRequest = <span class="keyword">null</span>;</div><div class="line">        Object[] arguments = joinPoint.getArgs();</div><div class="line">        <span class="keyword">if</span>(arguments != <span class="keyword">null</span> &amp;&amp; arguments.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            returnRequest = (BaseRequest) arguments[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> returnRequest;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们的写入<code>redis</code>key的前缀和过期时间改为从<code>CheckReqProperties</code>类中读取:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">//定义配置前缀</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"sbc.request.check"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckReqProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String redisKey ;<span class="comment">//写入redis中的前缀</span></div><div class="line">    <span class="keyword">private</span> Long redisTimeout ;<span class="comment">//redis的过期时间 默认是天</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRedisKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> redisKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisKey</span><span class="params">(String redisKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.redisKey = redisKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getRedisTimeout</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> redisTimeout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTimeout</span><span class="params">(Long redisTimeout)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.redisTimeout = redisTimeout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"CheckReqProperties&#123;"</span> +</div><div class="line">                <span class="string">"redisKey='"</span> + redisKey + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", redisTimeout="</span> + redisTimeout +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样如果是需要很多配置的情况下就可以将内容封装到该对象中，方便维护和读取。</p>
<p>使用的时候只需要在自己应用的<code>application.properties</code>中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 去重配置</div><div class="line">sbc.request.check.redis-key = req</div><div class="line">sbc.request.check.redis-timeout= 2</div></pre></td></tr></table></figure>
<h1 id="应用插件"><a href="#应用插件" class="headerlink" title="应用插件"></a>应用插件</h1><p>使用方法也和之前差不多(在<a href="https://github.com/crossoverJie/springboot-cloud/tree/master/sbc-order" target="_blank" rel="external">sbc-order</a>应用)：</p>
<ul>
<li>加入依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--防重插件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie.request.check<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>request-check<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在接口上加上注解:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@Api</span>(value = <span class="string">"orderApi"</span>, description = <span class="string">"订单API"</span>, tags = &#123;<span class="string">"订单服务"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(OrderController.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@CheckReqNo</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">        BaseResponse&lt;OrderNoResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line">        res.setReqNo(orderNoReq.getReqNo());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == orderNoReq.getAppId())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(StatusEnum.FAIL);</div><div class="line">        &#125;</div><div class="line">        OrderNoResVO orderNoRes = <span class="keyword">new</span> OrderNoResVO() ;</div><div class="line">        orderNoRes.setOrderId(DateUtil.getLongTime());</div><div class="line">        res.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">        res.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">        res.setDataBody(orderNoRes);</div><div class="line">        <span class="keyword">return</span> res ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用效果如下:</p>
<p><img src="https://i.loli.net/2017/08/01/59803ca7b9ece.jpg" alt="02.jpg"><br><img src="https://i.loli.net/2017/08/01/59803ca7d603d.jpg" alt="03.jpg"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>注意一点是<code>spring.factories</code>的路径不要搞错了,之前就是因为路径写错了，导致自动配置没有加载，AOP也就没有生效，排查了好久。。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/01/59800eca06bf0.jpg&quot; alt=&quot;pexels-photo-9046.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前看过&lt;a href=&quot;http://crossoverjie.top/2017/05/24/SSM14/&quot;&gt;SSM(十四) 基于annotation的http防重插件&lt;/a&gt;的朋友应该记得我后文说过之后要用&lt;code&gt;SpringBoot&lt;/code&gt;来进行重构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这次采用自定义的&lt;code&gt;starter&lt;/code&gt;的方式来进行重构。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于&lt;code&gt;starter(起步依赖)&lt;/code&gt;其实在第一次使用&lt;code&gt;SpringBoot&lt;/code&gt;的时候就已经用到了，比如其中的:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们只需要引入这一个依赖&lt;code&gt;SpringBoot&lt;/code&gt;就会把相关的依赖都加入进来，自己也不需要再去担心各个版本之间的兼容问题(具体使用哪个版本由使用的&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;版本决定)，这些&lt;code&gt;SpringBoot&lt;/code&gt;都已经帮我们做好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/01/598028d65b395.jpg&quot; alt=&quot;01.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="重构" scheme="http://crossoverjie.top/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="AOP" scheme="http://crossoverjie.top/tags/AOP/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverjie.top/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>sbc(二)高可用Eureka+声明式服务调用</title>
    <link href="http://crossoverjie.top/2017/07/19/sbc2/"/>
    <id>http://crossoverjie.top/2017/07/19/sbc2/</id>
    <published>2017-07-19T14:10:05.000Z</published>
    <updated>2017-07-20T18:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/07/20/596f9bc03c484.jpeg" alt="pexels-photo-516961.jpeg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>上一篇简单入门了<a href="http://crossoverjie.top/2017/06/15/sbc1/">SpringBoot+SpringCloud</a> 构建微服务。但只能算是一个<code>demo</code>级别的应用。<br>这次会按照实际生产要求来搭建这套服务。</p>
</blockquote>
<h1 id="Swagger应用"><a href="#Swagger应用" class="headerlink" title="Swagger应用"></a>Swagger应用</h1><p>上次提到我们调用自己的<code>http</code>接口的时候采用的是<code>PostMan</code>来模拟请求，这个在平时调试时自然没有什么问题，但当我们需要和前端联调开发的时候效率就比较低了。</p>
<p><strong>通常来说现在前后端分离的项目一般都是后端接口先行。</strong></p>
<p>后端大大们先把接口定义好(入参和出参),前端大大们来确定是否满足要求，可以了之后后端才开始着手写实现，这样整体效率要高上许多。</p>
<p>但也会带来一个问题:在接口定义阶段频繁变更接口定义而没有一个文档或类似的东西来记录，那么双方的沟通加上前端的调试都是比较困难的。</p>
<p>基于这个需求网上有各种解决方案，比如阿里的<a href="http://rapapi.org/" target="_blank" rel="external">rap</a>就是一个不错的例子。</p>
<p>但是<code>springCould</code>为我们在提供了一种在开发<code>springCloud</code>项目下更方便的工具<code>swagger</code>。</p>
<p>实际效果如下:</p>
<p><img src="https://i.loli.net/2017/07/20/596fa125406dd.png" alt="01.png"></p>
<a id="more"></a>
<h2 id="配置swagger"><a href="#配置swagger" class="headerlink" title="配置swagger"></a>配置swagger</h2><p>以<code>sbc-order</code>为例我将项目分为了三个模块:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── order                                    <span class="comment">// Order服务实现  </span></div><div class="line">│   ├── src/main</div><div class="line">├── order-api                                <span class="comment">// 对内API</span></div><div class="line">│   ├── src/main</div><div class="line">├── order-client                             <span class="comment">// 对外的clientAPI</span></div><div class="line">│   ├── src/main</div><div class="line">├── .gitignore                               </div><div class="line">├── LICENSE                </div><div class="line">├── README.md</div></pre></td></tr></table></figure>
<p>因为实现都写在<code>order</code>模块中，所以只需要在该模块中配置即可。</p>
<p>首先需要加入依赖，由于我在<code>order</code>模块中依赖了:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;target.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>order-api</code>又依赖了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接着需要配置一个<code>SwaggerConfig</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableSwagger2</div><div class="line">/** 是否打开swagger **/</div><div class="line">@ConditionalOnExpression(&quot;&apos;$&#123;swagger.enable&#125;&apos; == &apos;true&apos;&quot;)</div><div class="line">public class SwaggerConfig &#123;</div><div class="line">	</div><div class="line">    </div><div class="line">	@Bean</div><div class="line">    public Docket createRestApi() &#123;</div><div class="line">        return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.crossoverJie.sbcorder.controller&quot;))</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    private ApiInfo apiInfo() &#123;</div><div class="line">        return new ApiInfoBuilder()</div><div class="line">                .title(&quot;sbc order api&quot;)</div><div class="line">                .description(&quot;sbc order api&quot;)</div><div class="line">                .termsOfServiceUrl(&quot;http://crossoverJie.top&quot;)</div><div class="line">                .contact(&quot;crossoverJie&quot;)</div><div class="line">                .version(&quot;1.0.0&quot;)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是配置<code>swagger</code>的一些基本信息。<br>之后启动项目，在地址栏输入<code>http://ip:port/swagger-ui.html#/</code>即可进入。<br>可以看到如上图所示的接口列表,点击如下图所示的参数例子即可进行接口调用。</p>
<p><img src="https://ooo.0o0.ooo/2017/07/21/5970d89b629d4.jpg" alt="02.jpg"></p>
<h2 id="自定义开关Swagger"><a href="#自定义开关Swagger" class="headerlink" title="自定义开关Swagger"></a>自定义开关Swagger</h2><blockquote>
<p><code>swagger</code>的便利能给我们带来很多好处，但稍有不慎也可能出现问题。</p>
</blockquote>
<p>比如如果在生产环境还能通过IP访问<code>swagger</code>的话那后果可是不堪设想的。<br>所以我们需要灵活控制<code>swagger</code>的开关。</p>
<p>这点可以利用<code>spring的条件化配置(条件化配置可以配置存在于应用中,一旦满足一些特定的条件时就取消这些配置)</code>来实现这一功能:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"'$&#123;swagger.enable&#125;' == 'true'"</span>)</div></pre></td></tr></table></figure>
<p>该注解的意思是<code>给定的SpEL表达式计算结果为true</code>时才会创建<code>swagger</code>的<code>bean</code>。</p>
<p><code>swagger.enable</code>这个配置则是配置在<code>application.properties</code>中:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 是否打开swagger</div><div class="line">swagger.enable = true</div></pre></td></tr></table></figure>
<p>这样当我们在生产环境时只需要将该配置改为<code>false</code>即可。</p>
<p>ps:更多<code>spring条件化配置</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@ConditionalOnBean                 //配置了某个特定Bean</div><div class="line">@ConditionalOnMissingBean          //没有配置特定的Bean</div><div class="line">@ConditionalOnClass                //Classpath里有指定的类</div><div class="line">@ConditionalOnMissingClass         //Classpath里缺少指定的类</div><div class="line">@ConditionalOnExpression           //给定的Spring Expression Language(SpEL)表达式计算结果为true</div><div class="line">@ConditionalOnJava                 //Java的版本匹配特定值或者一个范围值</div><div class="line">@ConditionalOnJndi                 //参数中给定的JNDI位置必须存在一个，如果没有给参数，则要有JNDI InitialContext</div><div class="line">@ConditionalOnProperty             //指定的配置属性要有一个明确的值</div><div class="line">@ConditionalOnResource             //Classpath里有指定的资源</div><div class="line">@ConditionalOnWebApplication       //这是一个Web应用程序</div><div class="line">@ConditionalOnNotWebApplication    //这不是一个Web应用程序</div><div class="line">(参考SpringBoot实战)</div></pre></td></tr></table></figure>
<h1 id="高可用Eureka"><a href="#高可用Eureka" class="headerlink" title="高可用Eureka"></a>高可用Eureka</h1><p>在上一篇中是用<code>Eureka</code>来做了服务注册中心，所有的生产者都往它注册服务，消费者又通过它来获取服务。</p>
<p><em>但是之前讲到的都是单节点，这在生产环境风险巨大，我们必须做到注册中心的高可用，搭建<code>Eureka</code>集群。</em></p>
<p>这里简单起见就搭建两个<code>Eureka</code>,思路则是这两个Eureka都把自己当成应用向对方注册，这样就可以构成一个高可用的服务注册中心。</p>
<p>在实际生产环节中会是每个注册中心一台服务器，为了演示起见，我就在本地启动两个注册中心，但是端口不一样。</p>
<p>首先需要在本地配置一个<code>host</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 node1 node2</div></pre></td></tr></table></figure>
<p>这样不论是访问<code>node1</code>还是<code>node2</code>都可以在本机调用的到(<code>当然不配置host也可以，只是需要通过IP来访问，这样看起来不是那么明显</code>)。</p>
<p>并给<code>sbc-service</code>新增了两个配置文件:</p>
<p>application-node1.properties:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.application.name=sbc-service</div><div class="line">server.port=8888</div><div class="line">eureka.instance.hostname=node1</div><div class="line"></div><div class="line">## 不向注册中心注册自己</div><div class="line">#eureka.client.register-with-eureka=false</div><div class="line">#</div><div class="line">## 不需要检索服务</div><div class="line">#eureka.client.fetch-registry=false</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node2:9999/eureka/</div></pre></td></tr></table></figure>
<p>application-node2.properties:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.application.name=sbc-service</div><div class="line">server.port=9999</div><div class="line">eureka.instance.hostname=node2</div><div class="line"></div><div class="line">## 不向注册中心注册自己</div><div class="line">#eureka.client.register-with-eureka=false</div><div class="line">#</div><div class="line">## 不需要检索服务</div><div class="line">#eureka.client.fetch-registry=false</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/</div></pre></td></tr></table></figure>
<p>其中最重要的就是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eureka.client.serviceUrl.defaultZone=http://node2:9999/eureka/</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/</div></pre></td></tr></table></figure>
<p>两个应用互相注册。</p>
<p>启动的时候我们按照:<br><code>java -jar sbc-service-1.0.0-SNAPSHOT.jar --spring.profiles.active=node1</code>启动，就会按照传入的node1或者是node2去读取<code>application-node1.properties,application-node2.properties</code>这两个配置文件(<code>配置文件必须按照application-{name}.properties的方式命名</code>)。</p>
<p>分别启动两个注册中心可以看到以下:<br><img src="https://ooo.0o0.ooo/2017/07/21/5970dcda3315c.jpg" alt="03.jpg"></p>
<hr>
<p><img src="https://ooo.0o0.ooo/2017/07/21/5970dcda3c724.jpg" alt="04.jpg"></p>
<p>可以看到两个注册中心以及互相注册了。<br>在服务注册的时候只需要将两个地址都加上即可:<br><code>eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/,http://node2:9999/eureka/</code></p>
<p>在服务调用的时候可以尝试关闭其中一个，正常情况下依然是可以调用到服务的。</p>
<h1 id="Feign声明式调用"><a href="#Feign声明式调用" class="headerlink" title="Feign声明式调用"></a>Feign声明式调用</h1><p>接下来谈谈服务调用，上次提到可以用<code>ribbon</code>来进行服务调用，但是明显很不方便，不如像之前<code>rpc</code>调用那样简单直接。</p>
<p>为此这次使用<code>Feign</code>来进行声明式调用，就像调用一个普通方法那样简单。</p>
<h2 id="order-client"><a href="#order-client" class="headerlink" title="order-client"></a>order-client</h2><p>片头说到我将应用分成了三个模块<code>order、order-api、order-client</code>，其中的<code>client</code>模块就是关键。</p>
<p>来看看其中的内容,只有一个接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/orderService"</span>)</div><div class="line"><span class="meta">@FeignClient</span>(name=<span class="string">"sbc-order"</span>)</div><div class="line"><span class="meta">@RibbonClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderServiceClient</span> <span class="keyword">extends</span> <span class="title">OrderService</span></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取订单号"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getOrderNo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@FeignClient</code>这个注解要注意下，其中的name的是自己应用的应用名称，在<br><code>application.properties中的spring.application.name配置</code>。</p>
<p>其中继承了一个<code>OrderService</code>在<code>order-api</code>模块中，来看看<code>order-api</code>中的内容。</p>
<h2 id="order-api"><a href="#order-api" class="headerlink" title="order-api"></a>order-api</h2><p>其中也只有一个接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@Api</span>(<span class="string">"订单服务API"</span>)</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/orderService"</span>)</div><div class="line"><span class="meta">@Validated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取订单号"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getOrderNo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口有两个目的。</p>
<ol>
<li>给真正的<code>controller</code>来进行实现。</li>
<li>给<code>client</code>接口进行继承。</li>
</ol>
<p>类关系如下:</p>
<p><img src="https://i.loli.net/2017/07/21/5970ea9544a8c.jpg" alt="05.jpg"></p>
<p>注解这些都没什么好说的，一看就懂。</p>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><code>order</code>则是具体接口实现的模块，就和平时写<code>controller</code>一样。<br>来看看如何使用<code>client</code>进行声明式调用:</p>
<p>这次看看<code>sbc-user</code>这个项目，在里边调用了<code>sbc-order</code>的服务。<br>其中的<code>user模块</code>依赖了<code>order-client</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>具体调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> OrderServiceClient orderServiceClient ;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;UserResVO&gt; <span class="title">getUserByFeign</span><span class="params">(@RequestBody UserReqVO userReq)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用远程服务</span></div><div class="line">    OrderNoReqVO vo = <span class="keyword">new</span> OrderNoReqVO() ;</div><div class="line">    vo.setReqNo(userReq.getReqNo());</div><div class="line">    BaseResponse&lt;OrderNoResVO&gt; orderNo = orderServiceClient.getOrderNo(vo);</div><div class="line"></div><div class="line">    logger.info(<span class="string">"远程返回:"</span>+JSON.toJSONString(orderNo));</div><div class="line"></div><div class="line">    UserRes userRes = <span class="keyword">new</span> UserRes() ;</div><div class="line">    userRes.setUserId(<span class="number">123</span>);</div><div class="line">    userRes.setUserName(<span class="string">"张三"</span>);</div><div class="line"></div><div class="line">    userRes.setReqNo(userReq.getReqNo());</div><div class="line">    userRes.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    userRes.setMessage(<span class="string">"成功"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> userRes ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到只需要将<code>order-client</code>包中的Order服务注入进来即可。</p>
<p>在<code>sbc-client</code>的<code>swagger</code>中进行调用:</p>
<p><img src="https://i.loli.net/2017/07/21/5970f0629211c.jpg" alt="06.jpg"></p>
<hr>
<p><img src="https://i.loli.net/2017/07/21/5970f0ae20e1f.jpg" alt="07.jpg"></p>
<p>由于我并没传<code>appId</code>所以<code>order</code>服务返回的错误。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>当一个应用需要对外暴露接口时着需要按照以上方式提供一个<code>client</code>包更消费者使用。</p>
</blockquote>
<p>其实应用本身也是需要做高可用的，和<code>Eureka</code>高可用一样，再不同的服务器上再启一个或多个服务并注册到<code>Eureka</code>集群中即可。</p>
<p>后续还会继续谈到<code>zuul网关，容错，断路器</code>等内容，欢迎拍砖讨论。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/07/20/596f9bc03c484.jpeg&quot; alt=&quot;pexels-photo-516961.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;上一篇简单入门了&lt;a href=&quot;http://crossoverjie.top/2017/06/15/sbc1/&quot;&gt;SpringBoot+SpringCloud&lt;/a&gt; 构建微服务。但只能算是一个&lt;code&gt;demo&lt;/code&gt;级别的应用。&lt;br&gt;这次会按照实际生产要求来搭建这套服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Swagger应用&quot;&gt;&lt;a href=&quot;#Swagger应用&quot; class=&quot;headerlink&quot; title=&quot;Swagger应用&quot;&gt;&lt;/a&gt;Swagger应用&lt;/h1&gt;&lt;p&gt;上次提到我们调用自己的&lt;code&gt;http&lt;/code&gt;接口的时候采用的是&lt;code&gt;PostMan&lt;/code&gt;来模拟请求，这个在平时调试时自然没有什么问题，但当我们需要和前端联调开发的时候效率就比较低了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常来说现在前后端分离的项目一般都是后端接口先行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后端大大们先把接口定义好(入参和出参),前端大大们来确定是否满足要求，可以了之后后端才开始着手写实现，这样整体效率要高上许多。&lt;/p&gt;
&lt;p&gt;但也会带来一个问题:在接口定义阶段频繁变更接口定义而没有一个文档或类似的东西来记录，那么双方的沟通加上前端的调试都是比较困难的。&lt;/p&gt;
&lt;p&gt;基于这个需求网上有各种解决方案，比如阿里的&lt;a href=&quot;http://rapapi.org/&quot;&gt;rap&lt;/a&gt;就是一个不错的例子。&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;springCould&lt;/code&gt;为我们在提供了一种在开发&lt;code&gt;springCloud&lt;/code&gt;项目下更方便的工具&lt;code&gt;swagger&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;实际效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/07/20/596fa125406dd.png&quot; alt=&quot;01.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverjie.top/tags/SpringCloud/"/>
    
      <category term="swagger" scheme="http://crossoverjie.top/tags/swagger/"/>
    
      <category term="Eureka" scheme="http://crossoverjie.top/tags/Eureka/"/>
    
  </entry>
  
</feed>
