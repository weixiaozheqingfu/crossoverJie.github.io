<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>龙思航&#39;s Blog</title>
  <subtitle>baller</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://crossoverJie.github.io/"/>
  <updated>2017-08-01T08:56:00.000Z</updated>
  <id>http://crossoverJie.github.io/</id>
  
  <author>
    <name>龙思航</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sbc(三)自定义Starter-SpringBoot重构去重插件</title>
    <link href="http://crossoverJie.github.io/2017/08/01/sbc3/"/>
    <id>http://crossoverJie.github.io/2017/08/01/sbc3/</id>
    <published>2017-08-01T12:10:19.000Z</published>
    <updated>2017-08-01T08:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/08/01/59800eca06bf0.jpg" alt="pexels-photo-9046.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前看过<a href="http://crossoverjie.top/2017/05/24/SSM14/" target="_blank" rel="external">SSM(十四) 基于annotation的http防重插件</a>的朋友应该记得我后文说过之后要用<code>SpringBoot</code>来进行重构。</p>
<blockquote>
<p>这次采用自定义的<code>starter</code>的方式来进行重构。 </p>
</blockquote>
<p>关于<code>starter(起步依赖)</code>其实在第一次使用<code>SpringBoot</code>的时候就已经用到了，比如其中的:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们只需要引入这一个依赖<code>SpringBoot</code>就会把相关的依赖都加入进来，自己也不需要再去担心各个版本之间的兼容问题(具体使用哪个版本由使用的<code>spring-boot-starter-parent</code>版本决定)，这些<code>SpringBoot</code>都已经帮我们做好了。</p>
<p><img src="https://i.loli.net/2017/08/01/598028d65b395.jpg" alt="01.jpg"></p>
<hr>
<a id="more"></a>
<h1 id="Spring自动化配置"><a href="#Spring自动化配置" class="headerlink" title="Spring自动化配置"></a>Spring自动化配置</h1><p>先加入需要的一些依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--aop相关--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--redis相关--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--配置相关--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--通用依赖--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sbc-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>创建了<code>CheckReqConf</code>配置类用于在应用启动的时候自动配置。<br>当然前提还得在<code>resources</code>目录下创建<code>META-INF/spring.factories</code>配置文件用于指向当前类，才能在应用启动时进行自动配置。</p>
<p><code>spring.factories</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=</div><div class="line">\com.crossoverJie.request.check.conf.CheckReqConf</div></pre></td></tr></table></figure>
<h2 id="使用条件化配置"><a href="#使用条件化配置" class="headerlink" title="使用条件化配置"></a>使用条件化配置</h2><p>试着考虑下如下情况:</p>
<blockquote>
<p>因为该插件是使用<code>redis</code>来存储请求信息的，外部就依赖了<code>redis</code>。如果使用了该插件的应用没有配置或者忘了配置<code>redis</code>的一些相关连接，那么在应用使用过程中肯定会出现写入<code>redis</code>异常。</p>
<p>如果异常没有控制好的话还有可能影响项目的正常运行。</p>
</blockquote>
<p>那么怎么解决这个情况呢，可以使用<code>Spring4.0</code>新增的条件化配置来解决。</p>
<p>解决思路是:可以简单的通过判断应用中是否配置有<code>spring.redis.host</code>redis连接，如果没有我们的这个配置就会被忽略掉。</p>
<p>实现代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Conditional;</div><div class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</div><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(<span class="string">"com.crossoverJie.request.check.interceptor,com.crossoverJie.request.check.properties"</span>)</div><div class="line"></div><div class="line"><span class="comment">//是否有redis配置的校验，如果没有配置则不会加载改配置，也就是当前插件并不会生效</span></div><div class="line"><span class="meta">@Conditional</span>(CheckReqCondition.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckReqConf</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体校验的代码<code>CheckReqCondition</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckReqCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CheckReqCondition.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//如果没有加入redis配置的就返回false</span></div><div class="line">        String property = context.getEnvironment().getProperty(<span class="string">"spring.redis.host"</span>);</div><div class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(property))&#123;</div><div class="line">            logger.warn(<span class="string">"Need to configure redis!"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要实现<code>org.springframework.context.annotation.Condition</code>并重写<code>matches()</code>方法,即可实现个人逻辑。</p>
<blockquote>
<p>可以在使用了该依赖的配置文件中配置或者是不配置<code>spring.redis.host</code>这个配置,来看我们的切面类(<code>ReqNoDrcAspect</code>)中53行的日志是否有打印来判断是否生效。</p>
</blockquote>
<p>这样只有在存在该key的情况下才会应用这个配置。</p>
<blockquote>
<p>当然最好的做法是直接尝试读、写redis,看是否连接畅通来进行判断。</p>
</blockquote>
<h1 id="AOP切面"><a href="#AOP切面" class="headerlink" title="AOP切面"></a><code>AOP</code>切面</h1><p>最核心的其实就是这个切面类，里边主要逻辑和之前是一模一样的就不在多说,只是这里应用到了自定义配置。</p>
<p>切面类<code>ReqNoDrcAspect</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//切面注解</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="comment">//扫描</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">//开启cglib代理</span></div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqNoDrcAspect</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ReqNoDrcAspect.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CheckReqProperties properties ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String prefixReq ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> day ;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        prefixReq = properties.getRedisKey() == <span class="keyword">null</span> ? <span class="string">"reqNo"</span> : properties.getRedisKey() ;</div><div class="line">        day = properties.getRedisTimeout() == <span class="keyword">null</span> ? <span class="number">1L</span> : properties.getRedisTimeout() ;</div><div class="line">        logger.info(<span class="string">"sbc-request-check init......"</span>);</div><div class="line">        logger.info(String.format(<span class="string">"redis prefix is [%s],timeout is [%s]"</span>, prefixReq, day));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 切面该注解</div><div class="line">     */</div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.crossoverJie.request.check.anotation.CheckReqNo)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkRepeat</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"checkRepeat()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        BaseRequest request = getBaseRequest(joinPoint);</div><div class="line">        <span class="keyword">if</span>(request != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">final</span> String reqNo = request.getReqNo();</div><div class="line">            <span class="keyword">if</span>(StringUtil.isEmpty(reqNo))&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(StatusEnum.REPEAT_REQUEST);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    String tempReqNo = redisTemplate.opsForValue().get(prefixReq +reqNo);</div><div class="line">                    logger.debug(<span class="string">"tempReqNo="</span> + tempReqNo);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span>((StringUtil.isEmpty(tempReqNo)))&#123;</div><div class="line">                        redisTemplate.opsForValue().set(prefixReq + reqNo, reqNo, day, TimeUnit.DAYS);</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(<span class="string">"请求号重复,"</span>+ prefixReq +<span class="string">"="</span> + reqNo);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125; <span class="keyword">catch</span> (RedisConnectionFailureException e)&#123;</div><div class="line">                    logger.error(<span class="string">"redis操作异常"</span>,e);</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(<span class="string">"need redisService"</span>) ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseRequest <span class="title">getBaseRequest</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        BaseRequest returnRequest = <span class="keyword">null</span>;</div><div class="line">        Object[] arguments = joinPoint.getArgs();</div><div class="line">        <span class="keyword">if</span>(arguments != <span class="keyword">null</span> &amp;&amp; arguments.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            returnRequest = (BaseRequest) arguments[<span class="number">0</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> returnRequest;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们的写入<code>redis</code>key的前缀和过期时间改为从<code>CheckReqProperties</code>类中读取:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="comment">//定义配置前缀</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"sbc.request.check"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckReqProperties</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String redisKey ;<span class="comment">//写入redis中的前缀</span></div><div class="line">    <span class="keyword">private</span> Long redisTimeout ;<span class="comment">//redis的过期时间 默认是天</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRedisKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> redisKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisKey</span><span class="params">(String redisKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.redisKey = redisKey;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getRedisTimeout</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> redisTimeout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTimeout</span><span class="params">(Long redisTimeout)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.redisTimeout = redisTimeout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"CheckReqProperties&#123;"</span> +</div><div class="line">                <span class="string">"redisKey='"</span> + redisKey + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", redisTimeout="</span> + redisTimeout +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样如果是需要很多配置的情况下就可以将内容封装到该对象中，方便维护和读取。</p>
<p>使用的时候只需要在自己应用的<code>application.properties</code>中加入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 去重配置</div><div class="line">sbc.request.check.redis-key = req</div><div class="line">sbc.request.check.redis-timeout= 2</div></pre></td></tr></table></figure>
<h1 id="应用插件"><a href="#应用插件" class="headerlink" title="应用插件"></a>应用插件</h1><p>使用方法也和之前差不多(在<a href="https://github.com/crossoverJie/springboot-cloud/tree/master/sbc-order" target="_blank" rel="external">sbc-order</a>应用)：</p>
<ul>
<li>加入依赖：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--防重插件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie.request.check<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>request-check<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在接口上加上注解:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@Api</span>(value = <span class="string">"orderApi"</span>, description = <span class="string">"订单API"</span>, tags = &#123;<span class="string">"订单服务"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> <span class="keyword">implements</span> <span class="title">OrderService</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(OrderController.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@CheckReqNo</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">        BaseResponse&lt;OrderNoResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line">        res.setReqNo(orderNoReq.getReqNo());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == orderNoReq.getAppId())&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(StatusEnum.FAIL);</div><div class="line">        &#125;</div><div class="line">        OrderNoResVO orderNoRes = <span class="keyword">new</span> OrderNoResVO() ;</div><div class="line">        orderNoRes.setOrderId(DateUtil.getLongTime());</div><div class="line">        res.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">        res.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">        res.setDataBody(orderNoRes);</div><div class="line">        <span class="keyword">return</span> res ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用效果如下:</p>
<p><img src="https://i.loli.net/2017/08/01/59803ca7b9ece.jpg" alt="02.jpg"><br><img src="https://i.loli.net/2017/08/01/59803ca7d603d.jpg" alt="03.jpg"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>注意一点是<code>spring.factories</code>的路径不要搞错了,之前就是因为路径写错了，导致自动配置没有加载，AOP也就没有生效，排查了好久。。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/01/59800eca06bf0.jpg&quot; alt=&quot;pexels-photo-9046.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前看过&lt;a href=&quot;http://crossoverjie.top/2017/05/24/SSM14/&quot;&gt;SSM(十四) 基于annotation的http防重插件&lt;/a&gt;的朋友应该记得我后文说过之后要用&lt;code&gt;SpringBoot&lt;/code&gt;来进行重构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这次采用自定义的&lt;code&gt;starter&lt;/code&gt;的方式来进行重构。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;关于&lt;code&gt;starter(起步依赖)&lt;/code&gt;其实在第一次使用&lt;code&gt;SpringBoot&lt;/code&gt;的时候就已经用到了，比如其中的:&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们只需要引入这一个依赖&lt;code&gt;SpringBoot&lt;/code&gt;就会把相关的依赖都加入进来，自己也不需要再去担心各个版本之间的兼容问题(具体使用哪个版本由使用的&lt;code&gt;spring-boot-starter-parent&lt;/code&gt;版本决定)，这些&lt;code&gt;SpringBoot&lt;/code&gt;都已经帮我们做好了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/08/01/598028d65b395.jpg&quot; alt=&quot;01.jpg&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverJie.github.io/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="重构" scheme="http://crossoverJie.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
      <category term="AOP" scheme="http://crossoverJie.github.io/tags/AOP/"/>
    
      <category term="SpringBoot" scheme="http://crossoverJie.github.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverJie.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>sbc(二)高可用Eureka+声明式服务调用</title>
    <link href="http://crossoverJie.github.io/2017/07/19/sbc2/"/>
    <id>http://crossoverJie.github.io/2017/07/19/sbc2/</id>
    <published>2017-07-19T14:10:05.000Z</published>
    <updated>2017-07-20T18:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/07/20/596f9bc03c484.jpeg" alt="pexels-photo-516961.jpeg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>上一篇简单入门了<a href="http://crossoverjie.top/2017/06/15/sbc1/" target="_blank" rel="external">SpringBoot+SpringCloud</a> 构建微服务。但只能算是一个<code>demo</code>级别的应用。<br>这次会按照实际生产要求来搭建这套服务。</p>
</blockquote>
<h1 id="Swagger应用"><a href="#Swagger应用" class="headerlink" title="Swagger应用"></a>Swagger应用</h1><p>上次提到我们调用自己的<code>http</code>接口的时候采用的是<code>PostMan</code>来模拟请求，这个在平时调试时自然没有什么问题，但当我们需要和前端联调开发的时候效率就比较低了。</p>
<p><strong>通常来说现在前后端分离的项目一般都是后端接口先行。</strong></p>
<p>后端大大们先把接口定义好(入参和出参),前端大大们来确定是否满足要求，可以了之后后端才开始着手写实现，这样整体效率要高上许多。</p>
<p>但也会带来一个问题:在接口定义阶段频繁变更接口定义而没有一个文档或类似的东西来记录，那么双方的沟通加上前端的调试都是比较困难的。</p>
<p>基于这个需求网上有各种解决方案，比如阿里的<a href="http://rapapi.org/" target="_blank" rel="external">rap</a>就是一个不错的例子。</p>
<p>但是<code>springCould</code>为我们在提供了一种在开发<code>springCloud</code>项目下更方便的工具<code>swagger</code>。</p>
<p>实际效果如下:</p>
<p><img src="https://i.loli.net/2017/07/20/596fa125406dd.png" alt="01.png"></p>
<a id="more"></a>
<h2 id="配置swagger"><a href="#配置swagger" class="headerlink" title="配置swagger"></a>配置swagger</h2><p>以<code>sbc-order</code>为例我将项目分为了三个模块:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">├── order                                    <span class="comment">// Order服务实现  </span></div><div class="line">│   ├── src/main</div><div class="line">├── order-api                                <span class="comment">// 对内API</span></div><div class="line">│   ├── src/main</div><div class="line">├── order-client                             <span class="comment">// 对外的clientAPI</span></div><div class="line">│   ├── src/main</div><div class="line">├── .gitignore                               </div><div class="line">├── LICENSE                </div><div class="line">├── README.md</div></pre></td></tr></table></figure>
<p>因为实现都写在<code>order</code>模块中，所以只需要在该模块中配置即可。</p>
<p>首先需要加入依赖，由于我在<code>order</code>模块中依赖了:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;target.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>order-api</code>又依赖了：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接着需要配置一个<code>SwaggerConfig</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">@EnableSwagger2</div><div class="line">/** 是否打开swagger **/</div><div class="line">@ConditionalOnExpression(&quot;&apos;$&#123;swagger.enable&#125;&apos; == &apos;true&apos;&quot;)</div><div class="line">public class SwaggerConfig &#123;</div><div class="line">	</div><div class="line">    </div><div class="line">	@Bean</div><div class="line">    public Docket createRestApi() &#123;</div><div class="line">        return new Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.basePackage(&quot;com.crossoverJie.sbcorder.controller&quot;))</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    private ApiInfo apiInfo() &#123;</div><div class="line">        return new ApiInfoBuilder()</div><div class="line">                .title(&quot;sbc order api&quot;)</div><div class="line">                .description(&quot;sbc order api&quot;)</div><div class="line">                .termsOfServiceUrl(&quot;http://crossoverJie.top&quot;)</div><div class="line">                .contact(&quot;crossoverJie&quot;)</div><div class="line">                .version(&quot;1.0.0&quot;)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是配置<code>swagger</code>的一些基本信息。<br>之后启动项目，在地址栏输入<code>http://ip:port/swagger-ui.html#/</code>即可进入。<br>可以看到如上图所示的接口列表,点击如下图所示的参数例子即可进行接口调用。</p>
<p><img src="https://ooo.0o0.ooo/2017/07/21/5970d89b629d4.jpg" alt="02.jpg"></p>
<h2 id="自定义开关Swagger"><a href="#自定义开关Swagger" class="headerlink" title="自定义开关Swagger"></a>自定义开关Swagger</h2><blockquote>
<p><code>swagger</code>的便利能给我们带来很多好处，但稍有不慎也可能出现问题。</p>
</blockquote>
<p>比如如果在生产环境还能通过IP访问<code>swagger</code>的话那后果可是不堪设想的。<br>所以我们需要灵活控制<code>swagger</code>的开关。</p>
<p>这点可以利用<code>spring的条件化配置(条件化配置可以配置存在于应用中,一旦满足一些特定的条件时就取消这些配置)</code>来实现这一功能:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConditionalOnExpression</span>(<span class="string">"'$&#123;swagger.enable&#125;' == 'true'"</span>)</div></pre></td></tr></table></figure>
<p>该注解的意思是<code>给定的SpEL表达式计算结果为true</code>时才会创建<code>swagger</code>的<code>bean</code>。</p>
<p><code>swagger.enable</code>这个配置则是配置在<code>application.properties</code>中:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 是否打开swagger</div><div class="line">swagger.enable = true</div></pre></td></tr></table></figure>
<p>这样当我们在生产环境时只需要将该配置改为<code>false</code>即可。</p>
<p>ps:更多<code>spring条件化配置</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@ConditionalOnBean                 //配置了某个特定Bean</div><div class="line">@ConditionalOnMissingBean          //没有配置特定的Bean</div><div class="line">@ConditionalOnClass                //Classpath里有指定的类</div><div class="line">@ConditionalOnMissingClass         //Classpath里缺少指定的类</div><div class="line">@ConditionalOnExpression           //给定的Spring Expression Language(SpEL)表达式计算结果为true</div><div class="line">@ConditionalOnJava                 //Java的版本匹配特定值或者一个范围值</div><div class="line">@ConditionalOnJndi                 //参数中给定的JNDI位置必须存在一个，如果没有给参数，则要有JNDI InitialContext</div><div class="line">@ConditionalOnProperty             //指定的配置属性要有一个明确的值</div><div class="line">@ConditionalOnResource             //Classpath里有指定的资源</div><div class="line">@ConditionalOnWebApplication       //这是一个Web应用程序</div><div class="line">@ConditionalOnNotWebApplication    //这不是一个Web应用程序</div><div class="line">(参考SpringBoot实战)</div></pre></td></tr></table></figure>
<h1 id="高可用Eureka"><a href="#高可用Eureka" class="headerlink" title="高可用Eureka"></a>高可用Eureka</h1><p>在上一篇中是用<code>Eureka</code>来做了服务注册中心，所有的生产者都往它注册服务，消费者又通过它来获取服务。</p>
<p><em>但是之前讲到的都是单节点，这在生产环境风险巨大，我们必须做到注册中心的高可用，搭建<code>Eureka</code>集群。</em></p>
<p>这里简单起见就搭建两个<code>Eureka</code>,思路则是这两个Eureka都把自己当成应用向对方注册，这样就可以构成一个高可用的服务注册中心。</p>
<p>在实际生产环节中会是每个注册中心一台服务器，为了演示起见，我就在本地启动两个注册中心，但是端口不一样。</p>
<p>首先需要在本地配置一个<code>host</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 node1 node2</div></pre></td></tr></table></figure>
<p>这样不论是访问<code>node1</code>还是<code>node2</code>都可以在本机调用的到(<code>当然不配置host也可以，只是需要通过IP来访问，这样看起来不是那么明显</code>)。</p>
<p>并给<code>sbc-service</code>新增了两个配置文件:</p>
<p>application-node1.properties:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.application.name=sbc-service</div><div class="line">server.port=8888</div><div class="line">eureka.instance.hostname=node1</div><div class="line"></div><div class="line">## 不向注册中心注册自己</div><div class="line">#eureka.client.register-with-eureka=false</div><div class="line">#</div><div class="line">## 不需要检索服务</div><div class="line">#eureka.client.fetch-registry=false</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node2:9999/eureka/</div></pre></td></tr></table></figure>
<p>application-node2.properties:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.application.name=sbc-service</div><div class="line">server.port=9999</div><div class="line">eureka.instance.hostname=node2</div><div class="line"></div><div class="line">## 不向注册中心注册自己</div><div class="line">#eureka.client.register-with-eureka=false</div><div class="line">#</div><div class="line">## 不需要检索服务</div><div class="line">#eureka.client.fetch-registry=false</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/</div></pre></td></tr></table></figure>
<p>其中最重要的就是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">eureka.client.serviceUrl.defaultZone=http://node2:9999/eureka/</div><div class="line">eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/</div></pre></td></tr></table></figure>
<p>两个应用互相注册。</p>
<p>启动的时候我们按照:<br><code>java -jar sbc-service-1.0.0-SNAPSHOT.jar --spring.profiles.active=node1</code>启动，就会按照传入的node1或者是node2去读取<code>application-node1.properties,application-node2.properties</code>这两个配置文件(<code>配置文件必须按照application-{name}.properties的方式命名</code>)。</p>
<p>分别启动两个注册中心可以看到以下:<br><img src="https://ooo.0o0.ooo/2017/07/21/5970dcda3315c.jpg" alt="03.jpg"></p>
<hr>
<p><img src="https://ooo.0o0.ooo/2017/07/21/5970dcda3c724.jpg" alt="04.jpg"></p>
<p>可以看到两个注册中心以及互相注册了。<br>在服务注册的时候只需要将两个地址都加上即可:<br><code>eureka.client.serviceUrl.defaultZone=http://node1:8888/eureka/,http://node2:9999/eureka/</code></p>
<p>在服务调用的时候可以尝试关闭其中一个，正常情况下依然是可以调用到服务的。</p>
<h1 id="Feign声明式调用"><a href="#Feign声明式调用" class="headerlink" title="Feign声明式调用"></a>Feign声明式调用</h1><p>接下来谈谈服务调用，上次提到可以用<code>ribbon</code>来进行服务调用，但是明显很不方便，不如像之前<code>rpc</code>调用那样简单直接。</p>
<p>为此这次使用<code>Feign</code>来进行声明式调用，就像调用一个普通方法那样简单。</p>
<h2 id="order-client"><a href="#order-client" class="headerlink" title="order-client"></a>order-client</h2><p>片头说到我将应用分成了三个模块<code>order、order-api、order-client</code>，其中的<code>client</code>模块就是关键。</p>
<p>来看看其中的内容,只有一个接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/orderService"</span>)</div><div class="line"><span class="meta">@FeignClient</span>(name=<span class="string">"sbc-order"</span>)</div><div class="line"><span class="meta">@RibbonClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderServiceClient</span> <span class="keyword">extends</span> <span class="title">OrderService</span></span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取订单号"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getOrderNo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>@FeignClient</code>这个注解要注意下，其中的name的是自己应用的应用名称，在<br><code>application.properties中的spring.application.name配置</code>。</p>
<p>其中继承了一个<code>OrderService</code>在<code>order-api</code>模块中，来看看<code>order-api</code>中的内容。</p>
<h2 id="order-api"><a href="#order-api" class="headerlink" title="order-api"></a>order-api</h2><p>其中也只有一个接口:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@Api</span>(<span class="string">"订单服务API"</span>)</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/orderService"</span>)</div><div class="line"><span class="meta">@Validated</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"获取订单号"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/getOrderNo"</span>, method = RequestMethod.POST)</div><div class="line">    <span class="function">BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口有两个目的。</p>
<ol>
<li>给真正的<code>controller</code>来进行实现。</li>
<li>给<code>client</code>接口进行继承。</li>
</ol>
<p>类关系如下:</p>
<p><img src="https://i.loli.net/2017/07/21/5970ea9544a8c.jpg" alt="05.jpg"></p>
<p>注解这些都没什么好说的，一看就懂。</p>
<h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><p><code>order</code>则是具体接口实现的模块，就和平时写<code>controller</code>一样。<br>来看看如何使用<code>client</code>进行声明式调用:</p>
<p>这次看看<code>sbc-user</code>这个项目，在里边调用了<code>sbc-order</code>的服务。<br>其中的<code>user模块</code>依赖了<code>order-client</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>order-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>具体调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> OrderServiceClient orderServiceClient ;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;UserResVO&gt; <span class="title">getUserByFeign</span><span class="params">(@RequestBody UserReqVO userReq)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用远程服务</span></div><div class="line">    OrderNoReqVO vo = <span class="keyword">new</span> OrderNoReqVO() ;</div><div class="line">    vo.setReqNo(userReq.getReqNo());</div><div class="line">    BaseResponse&lt;OrderNoResVO&gt; orderNo = orderServiceClient.getOrderNo(vo);</div><div class="line"></div><div class="line">    logger.info(<span class="string">"远程返回:"</span>+JSON.toJSONString(orderNo));</div><div class="line"></div><div class="line">    UserRes userRes = <span class="keyword">new</span> UserRes() ;</div><div class="line">    userRes.setUserId(<span class="number">123</span>);</div><div class="line">    userRes.setUserName(<span class="string">"张三"</span>);</div><div class="line"></div><div class="line">    userRes.setReqNo(userReq.getReqNo());</div><div class="line">    userRes.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    userRes.setMessage(<span class="string">"成功"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> userRes ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到只需要将<code>order-client</code>包中的Order服务注入进来即可。</p>
<p>在<code>sbc-client</code>的<code>swagger</code>中进行调用:</p>
<p><img src="https://i.loli.net/2017/07/21/5970f0629211c.jpg" alt="06.jpg"></p>
<hr>
<p><img src="https://i.loli.net/2017/07/21/5970f0ae20e1f.jpg" alt="07.jpg"></p>
<p>由于我并没传<code>appId</code>所以<code>order</code>服务返回的错误。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>当一个应用需要对外暴露接口时着需要按照以上方式提供一个<code>client</code>包更消费者使用。</p>
</blockquote>
<p>其实应用本身也是需要做高可用的，和<code>Eureka</code>高可用一样，再不同的服务器上再启一个或多个服务并注册到<code>Eureka</code>集群中即可。</p>
<p>后续还会继续谈到<code>zuul网关，容错，断路器</code>等内容，欢迎拍砖讨论。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/07/20/596f9bc03c484.jpeg&quot; alt=&quot;pexels-photo-516961.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;上一篇简单入门了&lt;a href=&quot;http://crossoverjie.top/2017/06/15/sbc1/&quot;&gt;SpringBoot+SpringCloud&lt;/a&gt; 构建微服务。但只能算是一个&lt;code&gt;demo&lt;/code&gt;级别的应用。&lt;br&gt;这次会按照实际生产要求来搭建这套服务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Swagger应用&quot;&gt;&lt;a href=&quot;#Swagger应用&quot; class=&quot;headerlink&quot; title=&quot;Swagger应用&quot;&gt;&lt;/a&gt;Swagger应用&lt;/h1&gt;&lt;p&gt;上次提到我们调用自己的&lt;code&gt;http&lt;/code&gt;接口的时候采用的是&lt;code&gt;PostMan&lt;/code&gt;来模拟请求，这个在平时调试时自然没有什么问题，但当我们需要和前端联调开发的时候效率就比较低了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通常来说现在前后端分离的项目一般都是后端接口先行。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;后端大大们先把接口定义好(入参和出参),前端大大们来确定是否满足要求，可以了之后后端才开始着手写实现，这样整体效率要高上许多。&lt;/p&gt;
&lt;p&gt;但也会带来一个问题:在接口定义阶段频繁变更接口定义而没有一个文档或类似的东西来记录，那么双方的沟通加上前端的调试都是比较困难的。&lt;/p&gt;
&lt;p&gt;基于这个需求网上有各种解决方案，比如阿里的&lt;a href=&quot;http://rapapi.org/&quot;&gt;rap&lt;/a&gt;就是一个不错的例子。&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;springCould&lt;/code&gt;为我们在提供了一种在开发&lt;code&gt;springCloud&lt;/code&gt;项目下更方便的工具&lt;code&gt;swagger&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;实际效果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/07/20/596fa125406dd.png&quot; alt=&quot;01.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverJie.github.io/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverJie.github.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverJie.github.io/tags/SpringCloud/"/>
    
      <category term="swagger" scheme="http://crossoverJie.github.io/tags/swagger/"/>
    
      <category term="Eureka" scheme="http://crossoverJie.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十五) 乐观锁与悲观锁的实际应用</title>
    <link href="http://crossoverJie.github.io/2017/07/09/SSM15/"/>
    <id>http://crossoverJie.github.io/2017/07/09/SSM15/</id>
    <published>2017-07-09T03:01:54.000Z</published>
    <updated>2017-07-09T18:22:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/07/09/5961d7fb41cf0.jpeg" alt="00.jpeg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着互联网的兴起，现在三高(<code>高可用、高性能、高并发</code>)项目是越来越流行。</p>
<p>本次来谈谈高并发。首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上<code>+10</code>，然后再更新回去。<br>如果此时有两个线程同时并发处理，第一个线程拿到数据是10，+10=20更新回去。第二个线程原本是要在第一个线程的基础上再<code>+20=40</code>,结果由于并发访问取到更新前的数据为10，<code>+20=30</code>。</p>
<p>这就是典型的存在中间状态，导致数据不正确。来看以下的例子：</p>
<h1 id="并发所带来的问题"><a href="#并发所带来的问题" class="headerlink" title="并发所带来的问题"></a>并发所带来的问题</h1><p>和上文提到的类似，这里有一张<code>price</code>表，表结构如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `price` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</div><div class="line">  `total` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;总值&apos;,</div><div class="line">  `front` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费前&apos;,</div><div class="line">  `end` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费后&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1268 DEFAULT CHARSET=utf8</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我这里写了一个单测：就一个主线程，循环100次，每次把<code>front</code>的值减去10，再写入一次流水记录，正常情况是写入的每条记录都会每次减去10。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 单线程消费</div><div class="line"> */</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singleCounsumerTest1</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">100</span> ;i++)&#123;</div><div class="line">        Price price = priceMapper.selectByPrimaryKey(<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> ron = <span class="number">10</span> ;</div><div class="line">        price.setFront(price.getFront().subtract(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">        price.setEnd(price.getEnd().add(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">        price.setTotal(price.getFront().add(price.getEnd()));</div><div class="line"></div><div class="line">        priceMapper.updateByPrimaryKey(price) ;</div><div class="line"></div><div class="line">        price.setId(<span class="keyword">null</span>);</div><div class="line">        priceMapper.insertSelective(price) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/07/10/59626281d53ef.png" alt="01.png"><br>可以看到确实是每次都递减10。</p>
<p>但是如果是多线程的情况下会是如何呢：</p>
<blockquote>
<p>我这里新建了一个<code>PriceController</code></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">/**</span></div><div class="line"> * 线程池 无锁</div><div class="line"> * <span class="doctag">@param</span> redisContentReq</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/threadPrice"</span>,method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;NULLBody&gt; <span class="title">threadPrice</span><span class="params">(@RequestBody RedisContentReq redisContentReq)</span></span>&#123;</div><div class="line">    BaseResponse&lt;NULLBody&gt; response = <span class="keyword">new</span> BaseResponse&lt;NULLBody&gt;() ;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">10</span> ;i++)&#123;</div><div class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    Price price = priceMapper.selectByPrimaryKey(<span class="number">1</span>);</div><div class="line">                    <span class="keyword">int</span> ron = <span class="number">10</span> ;</div><div class="line">                    price.setFront(price.getFront().subtract(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">                    price.setEnd(price.getEnd().add(<span class="keyword">new</span> BigDecimal(ron)));</div><div class="line">                    priceMapper.updateByPrimaryKey(price) ;</div><div class="line"></div><div class="line">                    price.setId(<span class="keyword">null</span>);</div><div class="line">                    priceMapper.insertSelective(price) ;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            config.submit(t);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response.setReqNo(redisContentReq.getReqNo());</div><div class="line">        response.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">        response.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">        logger.error(<span class="string">"system error"</span>,e);</div><div class="line">        response.setReqNo(response.getReqNo());</div><div class="line">        response.setCode(StatusEnum.FAIL.getCode());</div><div class="line">        response.setMessage(StatusEnum.FAIL.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response ;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中为了节省资源使用了一个线程池:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">10</span> ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_SIZE = <span class="number">5</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SECOND = <span class="number">1000</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ThreadPoolExecutor executor ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolConfig</span><span class="params">()</span></span>&#123;</div><div class="line">        executor = <span class="keyword">new</span> ThreadPoolExecutor(CORE_SIZE,MAX_SIZE,SECOND, TimeUnit.MICROSECONDS,<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Thread thread)</span></span>&#123;</div><div class="line">        executor.submit(thread) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于线程池的使用今后会仔细探讨。这里就简单理解为有10个线程并发去处理上面单线程的逻辑，来看看结果怎么样：</p>
<p><img src="https://ooo.0o0.ooo/2017/07/10/596262815c9d6.png" alt="02.png"></p>
<p>会看到明显的数据错误，导致错误的原因自然就是有线程读取到了中间状态进行了错误的更新。</p>
<p>进而有了以下两种解决方案：悲观锁和乐观锁。</p>
<h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><p>简单理解下悲观锁：当一个事务锁定了一些数据之后，只有当当前锁提交了事务，释放了锁，其他事务才能获得锁并执行操作。</p>
<p>使用方式如下：<br>首先要关闭MySQL的自动提交：<code>set autocommit = 0;</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">bigen <span class="comment">--开启事务</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">id</span>, total, front, <span class="keyword">end</span> <span class="keyword">from</span> price <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">for</span> <span class="keyword">update</span> </div><div class="line"></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> price <span class="keyword">values</span>(?,?,?,?,?)</div><div class="line"></div><div class="line"><span class="keyword">commit</span> <span class="comment">--提交事务</span></div></pre></td></tr></table></figure>
<p>这里使用<code>select for update</code>的方式利用数据库开启了悲观锁，锁定了id=1的这条数据(<code>注意:这里除非是使用了索引会启用行级锁，不然是会使用表锁，将整张表都锁住。</code>)。之后使用<code>commit</code>提交事务并释放锁，这样下一个线程过来拿到的就是正确的数据。</p>
<p>悲观锁一般是用于并发不是很高，并且不允许脏读等情况。但是对数据库资源消耗较大。</p>
<h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><p>那么有没有性能好，支持的并发也更多的方式呢？</p>
<p>那就是乐观锁。</p>
<p>乐观锁是首先假设数据冲突很少，只有在数据提交修改的时候才进行校验，如果冲突了则不会进行更新。</p>
<p>通常的实现方式增加一个<code>version</code>字段，为每一条数据加上版本。每次更新的时候<code>version+1</code>，并且更新时候带上版本号。实现方式如下：</p>
<p>新建了一张<code>price_version</code>表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `price_version` (</div><div class="line">  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &apos;主键&apos;,</div><div class="line">  `total` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;总值&apos;,</div><div class="line">  `front` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费前&apos;,</div><div class="line">  `end` decimal(12,2) DEFAULT &apos;0.00&apos; COMMENT &apos;消费后&apos;,</div><div class="line">  `version` int(11) DEFAULT &apos;0&apos; COMMENT &apos;并发版本控制&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1268 DEFAULT CHARSET=utf8</div></pre></td></tr></table></figure>
<p>更新数据的SQL：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByVersion"</span> <span class="attr">parameterType</span>=<span class="string">"com.crossoverJie.pojo.PriceVersion"</span>&gt;</span></div><div class="line">    UPDATE price_version</div><div class="line">    SET front = #&#123;front,jdbcType=DECIMAL&#125;,</div><div class="line">        version= version + 1</div><div class="line">    WHERE id = #&#123;id,jdbcType=INTEGER&#125;</div><div class="line">    AND version = #&#123;version,jdbcType=INTEGER&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p>调用方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 线程池，乐观锁</div><div class="line"> * <span class="doctag">@param</span> redisContentReq</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/threadPriceVersion"</span>,method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;NULLBody&gt; <span class="title">threadPriceVersion</span><span class="params">(@RequestBody RedisContentReq redisContentReq)</span></span>&#123;</div><div class="line">    BaseResponse&lt;NULLBody&gt; response = <span class="keyword">new</span> BaseResponse&lt;NULLBody&gt;() ;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span> ;i&lt;<span class="number">3</span> ;i++)&#123;</div><div class="line">            Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    PriceVersion priceVersion = priceVersionMapper.selectByPrimaryKey(<span class="number">1</span>);</div><div class="line">                    <span class="keyword">int</span> ron = <span class="keyword">new</span> Random().nextInt(<span class="number">20</span>);</div><div class="line">                    logger.info(<span class="string">"本次消费="</span>+ron);</div><div class="line">                    priceVersion.setFront(<span class="keyword">new</span> BigDecimal(ron));</div><div class="line">                    <span class="keyword">int</span> count = priceVersionMapper.updateByVersion(priceVersion);</div><div class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</div><div class="line">                        logger.error(<span class="string">"更新失败"</span>);</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        logger.info(<span class="string">"更新成功"</span>);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            config.submit(t);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        response.setReqNo(redisContentReq.getReqNo());</div><div class="line">        response.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">        response.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">        logger.error(<span class="string">"system error"</span>,e);</div><div class="line">        response.setReqNo(response.getReqNo());</div><div class="line">        response.setCode(StatusEnum.FAIL.getCode());</div><div class="line">        response.setMessage(StatusEnum.FAIL.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response ;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理逻辑：开了三个线程生成了20以内的随机数更新到<code>front</code>字段。</p>
<p>当调用该接口时日志如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/07/10/59626fb3a3814.jpg" alt="03.jpg"></p>
<p>可以看到线程1、4、5分别生成了15，2，11三个随机数。最后线程4、5都更新失败了，只有线程1更新成功了。</p>
<p>查看数据库：</p>
<p><img src="https://ooo.0o0.ooo/2017/07/10/596270520bd6b.jpg" alt="04.jpg"></p>
<p>发现也确实是更新的15。</p>
<p>乐观锁在实际应用相对较多，它可以提供更好的并发访问，并且数据库开销较少，但是有可能存在脏读的情况。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上两种各有优劣，大家可以根据具体的业务场景来判断具体使用哪种方式来保证数据的一致性。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/07/09/5961d7fb41cf0.jpeg&quot; alt=&quot;00.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;随着互联网的兴起，现在三高(&lt;code&gt;高可用、高性能、高并发&lt;/code&gt;)项目是越来越流行。&lt;/p&gt;
&lt;p&gt;本次来谈谈高并发。首先假设一个业务场景：数据库中有一条数据，需要获取到当前的值，在当前值的基础上&lt;code&gt;+10&lt;/code&gt;，然后再更新回去。&lt;br&gt;如果此时有两个线程同时并发处理，第一个线程拿到数据是10，+10=20更新回去。第二个线程原本是要在第一个线程的基础上再&lt;code&gt;+20=40&lt;/code&gt;,结果由于并发访问取到更新前的数据为10，&lt;code&gt;+20=30&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这就是典型的存在中间状态，导致数据不正确。来看以下的例子：&lt;/p&gt;
&lt;h1 id=&quot;并发所带来的问题&quot;&gt;&lt;a href=&quot;#并发所带来的问题&quot; class=&quot;headerlink&quot; title=&quot;并发所带来的问题&quot;&gt;&lt;/a&gt;并发所带来的问题&lt;/h1&gt;&lt;p&gt;和上文提到的类似，这里有一张&lt;code&gt;price&lt;/code&gt;表，表结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;CREATE TABLE `price` (&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT &amp;apos;主键&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `total` decimal(12,2) DEFAULT &amp;apos;0.00&amp;apos; COMMENT &amp;apos;总值&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `front` decimal(12,2) DEFAULT &amp;apos;0.00&amp;apos; COMMENT &amp;apos;消费前&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  `end` decimal(12,2) DEFAULT &amp;apos;0.00&amp;apos; COMMENT &amp;apos;消费后&amp;apos;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  PRIMARY KEY (`id`)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;) ENGINE=InnoDB AUTO_INCREMENT=1268 DEFAULT CHARSET=utf8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="lock" scheme="http://crossoverJie.github.io/tags/lock/"/>
    
      <category term="mysql" scheme="http://crossoverJie.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>sbc(一)SpringBoot+SpringCloud初探</title>
    <link href="http://crossoverJie.github.io/2017/06/15/sbc1/"/>
    <id>http://crossoverJie.github.io/2017/06/15/sbc1/</id>
    <published>2017-06-15T13:40:15.000Z</published>
    <updated>2017-07-20T18:14:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://ooo.0o0.ooo/2017/06/15/59417275b1746.jpg" alt="sb1.jpg"></p>
<p>有看过我之前的<a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">SSM</a>系列的朋友应该有一点印象是非常深刻的。</p>
<blockquote>
<p>那就是需要配置的配置文件非常多，什么<code>Spring</code>、<code>mybatis</code>、<code>redis</code>、<code>mq</code>之类的配置文件非常多，并且还存在各种版本，甚至有些版本还互不兼容。其中有很多可能就是刚开始整合的时候需要配置，之后压根就不会再动了。</p>
</blockquote>
<p>鉴于此，<code>Spring</code>又推出了又一神器<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">SpringBoot</a>.</p>
<p>它可以让我们更加快速的开发<code>Spring</code>应用，甚至做到了开箱即用。<br>由于在实际开发中我们使用<code>SpringBoot</code>+<code>SpringCloud</code>进行了一段时间的持续交付，并在生产环境得到了验证，其中也有不少踩坑的地方，借此机会和大家分享交流一下。</p>
<p>本篇我们首先会用利用<code>SpringBoot</code>构建出一个简单的<code>REST API</code>.<br>接着会创建另一个<code>SpringBoot</code>项目，基于<code>SpringCloud</code>部署，并在两个应用之间进行调用。</p>
<h1 id="使用SpringBoot构建REST-API"><a href="#使用SpringBoot构建REST-API" class="headerlink" title="使用SpringBoot构建REST API"></a>使用<code>SpringBoot</code>构建<code>REST API</code></h1><p>我们可以使用<code>Spring</code>官方提供的初始化工具帮我们生成一个基础项目：<a href="http://start.spring.io/" target="_blank" rel="external">http://start.spring.io/</a>,如下图所示：<br><img src="https://ooo.0o0.ooo/2017/06/16/5942bbbb8797e.jpg" alt="sb2.jpg"></p>
<p>填入相应信息即可。由于只是要实现<code>REST API</code>所以这里只需要引用<code>web</code>依赖即可。</p>
<a id="more"></a>
<p>将生成好的项目导入<code>IDE</code>(我使用的是<code>idea</code>)中,目录结构如下;<br><img src="https://ooo.0o0.ooo/2017/06/16/5942bde60ac4c.jpg" alt="sb3.jpg"></p>
<ul>
<li>其中的<code>SbcUserApplication</code>是整个应用的入口。</li>
<li><code>resource/application.properties</code>这里是存放整个应用的配置文件。</li>
<li>其中的<code>static</code>和<code>templates</code>是存放静态资源以及前端模板的地方，由于我们采用了前后端分离，所以这些目录基本上用不上了。</li>
</ul>
<p>通过运行<code>SbcUserApplication</code>类的<code>main</code>方法可以启动<code>SpringBoot</code>项目。</p>
<p>接着在<code>PostMan</code>中进行调用，看到以下结果表明启动成功了：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/5950a607afe13.jpg" alt="springBoot01.jpg"></p>
<p>这样一看是不是要比之前用<code>Spring+SpringMVC</code>来整合要方便快捷很多。</p>
<h1 id="创建另一个SpringBoot项目"><a href="#创建另一个SpringBoot项目" class="headerlink" title="创建另一个SpringBoot项目"></a>创建另一个<code>SpringBoot</code>项目</h1><p>当我们的项目采用微服务构建之后自然就会被拆分成N多个独立的应用。比如上文中的<code>sbc-user</code>用于用户管理。这里再创建一个<code>sbc-order</code>用户生成订单。</p>
<blockquote>
<p>为了方便之后的代码复用，我将<code>common</code>包中的一些枚举值、工具类单独提到<code>sbc-common</code>应用中了，这样有其他应用要使用这些基础类直接引入这个依赖即可。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sbc-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>创建步骤和上文差不多，这里就不再赘述了。<br>其中有一个<code>order/getOrderNo</code>的服务，调用结果如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/5950de9914c91.jpg" alt="springBoot02.jpg"></p>
<p>之后会利用<code>SpringCloud</code>来将两个服务关联起来，并可以互相调用。</p>
<h1 id="使用SpringCloud进行分布式调用"><a href="#使用SpringCloud进行分布式调用" class="headerlink" title="使用SpringCloud进行分布式调用"></a>使用<code>SpringCloud</code>进行分布式调用</h1><h2 id="搭建eureka注册中心"><a href="#搭建eureka注册中心" class="headerlink" title="搭建eureka注册中心"></a>搭建<code>eureka</code>注册中心</h2><p>既然是要搭建微服务那自然少不了注册中心了，之前讲的<code>dubbo</code>采用的是<code>zookeeper</code>作为注册中心，<code>SpringCloud</code>则采用的是<code>Netflix Eureka</code>来做服务的注册与发现。</p>
<p>新建一个项目<code>sbc-service</code>,目录结构如下：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/59511b85974be.jpg" alt="springBoot03.jpg"></p>
<p>核心的<code>pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>Brixton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>非常easy，只需要引入<code>eureka</code>的依赖即可。<br>然后在入口类加入一个注解<code>@EnableEurekaServer</code>，即可将该项目作为服务注册中心：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</div><div class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;</div><div class="line"></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(EurekaApplication.class);</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		SpringApplication.run(EurekaApplication.class, args);</div><div class="line">		logger.info(<span class="string">"SpringBoot Start Success"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着修改配置文件<code>application.properties</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server.port=8888</div><div class="line"></div><div class="line"># 不向注册中心注册自己</div><div class="line">eureka.client.register-with-eureka=false</div><div class="line"></div><div class="line"># 不需要检索服务</div><div class="line">eureka.client.fetch-registry=false</div><div class="line"></div><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:$&#123;server.port&#125;/eureka/</div></pre></td></tr></table></figure>
<p>配置一下端口以及注册中心的地址即可。<br>然后按照正常启动<code>springBoot</code>项目一样启动即可。</p>
<p>在地址栏输入<a href="http://localhost:8888/" target="_blank" rel="external">http://localhost:8888</a>看到一下界面：</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/59511cef59d46.jpg" alt="springBoot04.jpg"></p>
<p>当然现在在注册中心还看不到任何一个应用，下面需要将上文的<code>sbc-user,sbc-order</code>注册进来。</p>
<h2 id="向注册中心注册服务提供者"><a href="#向注册中心注册服务提供者" class="headerlink" title="向注册中心注册服务提供者"></a>向注册中心注册服务提供者</h2><p>只需要在<code>application.properties</code>配置文件中加上注册中心的配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eureka.client.serviceUrl.defaultZone=http://localhost:8888/eureka/</div></pre></td></tr></table></figure>
<p>并在<code>sbc-order</code>的主类中加入<code>@EnableDiscoveryClient</code>注解即可完成注册服务。</p>
<p>启动注册中心以及应用，在注册中心看到一下界面则成功注册:</p>
<p><img src="https://ooo.0o0.ooo/2017/06/26/595129f117276.jpg" alt="springBoot05.jpg"></p>
<h2 id="消费注册中心的服务"><a href="#消费注册中心的服务" class="headerlink" title="消费注册中心的服务"></a>消费注册中心的服务</h2><p>服务是注册上去了，自然是需要消费了，这里就简单模拟了在调用<code>http://localhost:8080/user/getUser</code>这个接口的时候<code>getUser</code>接口会去调用<code>order</code>的<code>getOrder</code>服务。</p>
<p>这里会用到另一个依赖:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>他可以帮我们做到客户端负载，具体使用如下：</p>
<ul>
<li>加入ribbon依赖。</li>
<li>在主类中开启<code>@LoadBalanced</code>客户端负载。</li>
<li>创建<code>restTemplate</code>类的实例</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line">	<span class="meta">@LoadBalanced</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>restTemplate</code>调用远程服务:</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">  </div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/getUser"</span>,method = RequestMethod.POST)</div><div class="line">  <span class="function"><span class="keyword">public</span> UserRes <span class="title">getUser</span><span class="params">(@RequestBody UserReq userReq)</span></span>&#123;</div><div class="line">      OrderNoReq req = <span class="keyword">new</span> OrderNoReq() ;</div><div class="line">      req.setReqNo(<span class="string">"1213"</span>);</div><div class="line">      <span class="comment">//调用远程服务</span></div><div class="line">      ResponseEntity&lt;Object&gt; res = restTemplate.postForEntity(<span class="string">"http://sbc-order/order/getOrderNo"</span>, req, Object.class);</div><div class="line">      logger.info(<span class="string">"res="</span>+JSON.toJSONString(res));</div><div class="line"></div><div class="line">      logger.debug(<span class="string">"入参="</span>+ JSON.toJSONString(userReq));</div><div class="line">      UserRes userRes = <span class="keyword">new</span> UserRes() ;</div><div class="line">      userRes.setUserId(<span class="number">123</span>);</div><div class="line">      userRes.setUserName(<span class="string">"张三"</span>);</div><div class="line"></div><div class="line">      userRes.setReqNo(userReq.getReqNo());</div><div class="line">      userRes.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">      userRes.setMessage(<span class="string">"成功"</span>);</div><div class="line"></div><div class="line">      <span class="keyword">return</span> userRes ;</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>由于我的远程接口是<code>post</code>,所以使用了<code>postForEntity()</code>方法，如果是<code>get</code>就换成<code>getForEntity()</code>即可。</p>
<blockquote>
<p>注意这里是使用应用名<code>sbc-order(配置于sbc-order的application.properties中)</code>来进行调用的，并不是一个IP地址。</p>
</blockquote>
<p>启动注册中心、两个应用。<br>用<code>PostMan</code>调用<code>getUser</code>接口时控制台打印:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2017-06-27 00:18:04.534  INFO 63252 --- [nio-8080-exec-3] c.c.sbcuser.controller.UserController    : res=&#123;&quot;body&quot;:&#123;&quot;code&quot;:&quot;4000&quot;,&quot;message&quot;:&quot;appID不能为空&quot;,&quot;reqNo&quot;:&quot;1213&quot;&#125;,&quot;headers&quot;:&#123;&quot;X-Application-Context&quot;:[&quot;sbc-order:8181&quot;],&quot;Content-Type&quot;:[&quot;application/xml;charset=UTF-8&quot;],&quot;Transfer-Encoding&quot;:[&quot;chunked&quot;],&quot;Date&quot;:[&quot;Mon, 26 Jun 2017 16:18:04 GMT&quot;]&#125;,&quot;statusCode&quot;:&quot;OK&quot;,&quot;statusCodeValue&quot;:200&#125;</div></pre></td></tr></table></figure>
<p>由于并没有传递<code>appId</code>所以<code>order</code>服务返回了一个错误，也正说明是远程调用到了该服务。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote>
<p>ps:这里只是简单使用了<code>ribbon</code>来进行服务调用，但在实际的开发中还是比较少的使用这种方式来调用远程服务，而是使用<code>Feign</code>进行声明式调用，可以简化客户端代码，具体使用方式请持续关注。</p>
</blockquote>
<p>本次算是<code>springBoot+springCloud</code>的入门，还有很多东西没有讲到，之后我将会根据实际使用的一些经验继续分享<code>SpringCloud</code>这个新兴框架。</p>
<blockquote>
<p>项目：<a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>博客：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/15/59417275b1746.jpg&quot; alt=&quot;sb1.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;有看过我之前的&lt;a href=&quot;https://github.com/crossoverJie/SSM&quot;&gt;SSM&lt;/a&gt;系列的朋友应该有一点印象是非常深刻的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那就是需要配置的配置文件非常多，什么&lt;code&gt;Spring&lt;/code&gt;、&lt;code&gt;mybatis&lt;/code&gt;、&lt;code&gt;redis&lt;/code&gt;、&lt;code&gt;mq&lt;/code&gt;之类的配置文件非常多，并且还存在各种版本，甚至有些版本还互不兼容。其中有很多可能就是刚开始整合的时候需要配置，之后压根就不会再动了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;鉴于此，&lt;code&gt;Spring&lt;/code&gt;又推出了又一神器&lt;a href=&quot;https://projects.spring.io/spring-boot/&quot;&gt;SpringBoot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;它可以让我们更加快速的开发&lt;code&gt;Spring&lt;/code&gt;应用，甚至做到了开箱即用。&lt;br&gt;由于在实际开发中我们使用&lt;code&gt;SpringBoot&lt;/code&gt;+&lt;code&gt;SpringCloud&lt;/code&gt;进行了一段时间的持续交付，并在生产环境得到了验证，其中也有不少踩坑的地方，借此机会和大家分享交流一下。&lt;/p&gt;
&lt;p&gt;本篇我们首先会用利用&lt;code&gt;SpringBoot&lt;/code&gt;构建出一个简单的&lt;code&gt;REST API&lt;/code&gt;.&lt;br&gt;接着会创建另一个&lt;code&gt;SpringBoot&lt;/code&gt;项目，基于&lt;code&gt;SpringCloud&lt;/code&gt;部署，并在两个应用之间进行调用。&lt;/p&gt;
&lt;h1 id=&quot;使用SpringBoot构建REST-API&quot;&gt;&lt;a href=&quot;#使用SpringBoot构建REST-API&quot; class=&quot;headerlink&quot; title=&quot;使用SpringBoot构建REST API&quot;&gt;&lt;/a&gt;使用&lt;code&gt;SpringBoot&lt;/code&gt;构建&lt;code&gt;REST API&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;我们可以使用&lt;code&gt;Spring&lt;/code&gt;官方提供的初始化工具帮我们生成一个基础项目：&lt;a href=&quot;http://start.spring.io/&quot;&gt;http://start.spring.io/&lt;/a&gt;,如下图所示：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/06/16/5942bbbb8797e.jpg&quot; alt=&quot;sb2.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;填入相应信息即可。由于只是要实现&lt;code&gt;REST API&lt;/code&gt;所以这里只需要引用&lt;code&gt;web&lt;/code&gt;依赖即可。&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverJie.github.io/categories/sbc/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverJie.github.io/tags/SpringBoot/"/>
    
      <category term="SpringCloud" scheme="http://crossoverJie.github.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十四) 基于annotation的http防重插件</title>
    <link href="http://crossoverJie.github.io/2017/05/24/SSM14/"/>
    <id>http://crossoverJie.github.io/2017/05/24/SSM14/</id>
    <published>2017-05-23T17:01:54.000Z</published>
    <updated>2017-07-09T18:16:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/24/5924effab7d36.jpg" alt="防重插件封面.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>针对于我们现在常用的<code>RESTful API</code>通常我们需要对请求进行唯一标识，也就是每次都要带上一个请求号,如<code>reqNO</code>。</p>
<p>对于入库这种操作数据库的请求我们一般要保证他的唯一性，一个请求号通常只能用一次，所以需要我们对这种请求加上校验机制。</p>
<blockquote>
<p>该需求的实现思路是通过自定义<code>annotation</code>，只给需要进行校验的接口加上注解。然后通过切面使用了注解的接口将每次请求号存进<code>Redis</code>，每次都进行判断是否存在这个请求号即可。</p>
</blockquote>
<p>来看下加上本次插件的实际效果：<br><img src="https://ooo.0o0.ooo/2017/05/24/59253bc021bf3.jpg" alt="重复请求号01.jpg"><br><img src="https://ooo.0o0.ooo/2017/05/24/59253bc0291c1.jpg" alt="重复请求号02.jpg"><br><img src="https://ooo.0o0.ooo/2017/05/24/59253bc04016d.jpg" alt="重复请求号03.jpg"><br><a id="more"></a></p>
<h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>首先我们要自定义一个注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CheckReqNo &#123;</div><div class="line"></div><div class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>(ps:这里并不过多的讲解注解相关的知识)。</em></p>
<p>首先使用<code>@interface</code>来声明一个注解。接着利用<code>Java</code>为我们提供的三个元注解来定义<code>CheckReqNo</code>注解。</p>
<p>其中<code>@Target</code>表明这个注解被用于什么地方，使用<code>ElementType.METHOD</code>表明被应用到方法上，还有一些其他值可以查看<code>java.lang.annotation.ElementType</code>这个枚举类型。</p>
<p><code>@Retention</code>注解表明我们的注解在什么范围内有效，这里配置的<code>RetentionPolicy.RUNTIME</code>表明在运行时可以通过反射来获取。</p>
<p><code>@Documented</code>看字面意思应该也能猜到是用于生成<code>JavaDoc</code>文档的。</p>
<p>其中定义了一个<code>desc()</code>的方法其实并没有用到，但如果需要在使用注解的时候需要自定义一些<code>filed(域)</code>的需求可以按照这样的方式写到这里，通过反射都可以获取到具体的值。<br>如：<code>@CheckReqNo(desc = &quot;abc&quot;)</code>就可以获取到<code>&quot;abc&quot;</code>的值。</p>
<h1 id="切面注解"><a href="#切面注解" class="headerlink" title="切面注解"></a>切面注解</h1><p>按照之前的想法是在对所有使用了该注解的方法进行切面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReqNoDrcAspect</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(ReqNoDrcAspect.class);</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;redis.prefixReq:reqNo&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> String prefixReq ;</div><div class="line"></div><div class="line">	<span class="meta">@Value</span>(<span class="string">"$&#123;redis.day:1&#125;"</span>)</div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> day ;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</div><div class="line">	</div><div class="line">	<span class="meta">@PostConstruct</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		logger.info(<span class="string">"SSM-REQUEST-CHECK init......"</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.crossoverJie.request.anotation.CheckReqNo)"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkRepeat</span><span class="params">()</span></span>&#123;</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Before</span>(<span class="string">"checkRepeat()"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		BaseRequest request;</div><div class="line">		request = getBaseRequest(joinPoint);</div><div class="line">		<span class="keyword">if</span>(request != <span class="keyword">null</span>)&#123;</div><div class="line">			<span class="keyword">final</span> String reqNo = request.getReqNo();</div><div class="line">			<span class="keyword">if</span>(StringUtil.isEmpty(reqNo))&#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"reqNo不能为空"</span>);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">try</span> &#123;</div><div class="line">					String tempReqNo = redisTemplate.opsForValue().get(prefixReq +reqNo);</div><div class="line">					logger.debug(<span class="string">"tempReqNo="</span>+tempReqNo);</div><div class="line"></div><div class="line">					<span class="keyword">if</span>((StringUtil.isEmpty(tempReqNo)))&#123;</div><div class="line">						redisTemplate.opsForValue().set(prefixReq + reqNo, reqNo, day, TimeUnit.DAYS);</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请求号重复,reqNo="</span>+reqNo);</div><div class="line">					&#125;</div><div class="line"></div><div class="line">				&#125; <span class="keyword">catch</span> (RedisConnectionFailureException e)&#123;</div><div class="line">					logger.error(<span class="string">"redis操作异常"</span>,e);</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"need redisService"</span>) ;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">			</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	 </div><div class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BaseRequest <span class="title">getBaseRequest</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		 BaseRequest returnRequest = <span class="keyword">null</span>;</div><div class="line">		 Object[] arguments = joinPoint.getArgs();</div><div class="line">		 <span class="keyword">if</span>(arguments != <span class="keyword">null</span> &amp;&amp; arguments.length &gt; <span class="number">0</span>)&#123;</div><div class="line">			 returnRequest = (BaseRequest) arguments[<span class="number">0</span>];</div><div class="line">		 &#125;</div><div class="line">	     <span class="keyword">return</span> returnRequest;</div><div class="line">	 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<code>@Aspect</code>来定义了一个切面。<br>其中<code>prefixReq,day</code>域可以自定义缓存请求号时的<code>key</code>前缀以及缓存的时间。</p>
<p>最关键的一点是用<br><code>@Pointcut(&quot;@annotation(com.crossoverJie.request.anotation.CheckReqNo)&quot;)</code><br>定义了一个切入点，这样所有使用<code>@CheckReqNo</code>的注解都会被拦截。</p>
<p>接下来的逻辑就比较简单了，在每次请求之前进行拦截。</p>
<p>先去<code>Redis</code>中查看这个请求号(<code>ps:反射获取</code>)是否存在，如果不存在则通过并将本次的请求号缓存起来。如果存在则抛出异常。</p>
<h1 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h1><p>可以在<code>jdbc.properties</code>配置文件中自定义前缀和缓存时间</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#redis前缀</div><div class="line">redis.prefixReq=reqNo</div><div class="line">#redis缓存时间 默认单位为天</div><div class="line">redis.day=1</div></pre></td></tr></table></figure>
<p>不定义也可以，会使用默认值。</p>
<p>由于该注解是需要加到<code>controller</code>层,因此我们得使用<code>CGLIB</code>代理。<br>这里有一个坑，需要将开启<code>CGLIB</code>的配置配置到我们<code>web.xml</code>中的</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring MVC servlet --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里所定义的<code>spring-mvc.xml</code>文件中，不然<code>springMVC</code>所在的子容器是无法被父容器所加载的。</p>
<p>使用实例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CheckReqNo</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/createRedisContent"</span>,method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;NULLBody&gt; <span class="title">createRedisContent</span><span class="params">(@RequestBody RedisContentReq redisContentReq)</span></span>&#123;</div><div class="line">    BaseResponse&lt;NULLBody&gt; response = <span class="keyword">new</span> BaseResponse&lt;NULLBody&gt;() ;</div><div class="line"></div><div class="line">    Rediscontent rediscontent = <span class="keyword">new</span> Rediscontent() ;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        CommonUtil.setLogValueModelToModel(redisContentReq,rediscontent);</div><div class="line">        rediscontentMapper.insertSelective(rediscontent) ;</div><div class="line">        response.setReqNo(redisContentReq.getReqNo());</div><div class="line">        response.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">        response.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">        logger.error(<span class="string">"system error"</span>,e);</div><div class="line">        response.setReqNo(response.getReqNo());</div><div class="line">        response.setCode(StatusEnum.FAIL.getCode());</div><div class="line">        response.setMessage(StatusEnum.FAIL.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> response ;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="统一异常controller"><a href="#统一异常controller" class="headerlink" title="统一异常controller"></a>统一异常controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * ClassName: ErrorController &lt;br/&gt;</div><div class="line"> * Function: 错误异常统一处理. &lt;br/&gt;</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> * <span class="doctag">@version</span></div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.OK)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">processUnauthenticatedException</span><span class="params">(NativeWebRequest request, Exception e)</span> </span>&#123;</div><div class="line">        logger.error(<span class="string">"请求出现异常:"</span>, e);</div><div class="line"></div><div class="line">        BaseResponse&lt;NULLBody&gt; response = <span class="keyword">new</span> BaseResponse&lt;NULLBody&gt;();</div><div class="line">        response.setCode(StatusEnum.FAIL.getCode());</div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException)&#123;</div><div class="line">            response.setMessage(e.getMessage());</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            response.setMessage(StatusEnum.FAIL.getMessage());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> response ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样当controller层出现异常之后都会进入这里进行统一的返回。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此整个插件的流程已经全部OK，从中可以看出<code>Spring AOP</code>在实际开发中的各种好处。<br>之前的几篇文章也有应用到：</p>
<ul>
<li><a href="https://crossoverjie.top/2016/12/18/SSM7/" target="_blank" rel="external">在JavaWeb应用中使用Redis</a></li>
<li><a href="https://crossoverjie.top/2017/01/05/SSM8/" target="_blank" rel="external">动态切换数据源</a></li>
</ul>
<p>不知不觉这个小白入门的<code>SSM</code>系列已经更新了14篇了，在<code>GitHub</code>也有了500多颗星了，期间也和不少朋友有过交流、探讨，感谢大家的支持。</p>
<p><strong>接下来可能不太会更新这个系列了，由于博主现在所在的项目组采用的是目前比较流行的<code>SpringBoot+SpringCloud</code>和<code>Docker</code>的方式来进行架构的，所以之后的重心肯定会移到这方面，用过<code>SpringBoot</code>之后相信大家肯定也回不去了。</strong></p>
<p><strong>所以之后我会继续更新<code>SpringBoot+SpringCloud</code>相关的文章，欢迎持续关注，持续拍砖(<code>ps:这个插件也会用springBoot重写一遍</code>)</strong></p>
<blockquote>
<p>插件地址：<a href="https://github.com/crossoverJie/SSM-REQUEST-CHECK.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM-REQUEST-CHECK.git</a></p>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/24/5924effab7d36.jpg&quot; alt=&quot;防重插件封面.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;针对于我们现在常用的&lt;code&gt;RESTful API&lt;/code&gt;通常我们需要对请求进行唯一标识，也就是每次都要带上一个请求号,如&lt;code&gt;reqNO&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;对于入库这种操作数据库的请求我们一般要保证他的唯一性，一个请求号通常只能用一次，所以需要我们对这种请求加上校验机制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该需求的实现思路是通过自定义&lt;code&gt;annotation&lt;/code&gt;，只给需要进行校验的接口加上注解。然后通过切面使用了注解的接口将每次请求号存进&lt;code&gt;Redis&lt;/code&gt;，每次都进行判断是否存在这个请求号即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;来看下加上本次插件的实际效果：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/24/59253bc021bf3.jpg&quot; alt=&quot;重复请求号01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/24/59253bc0291c1.jpg&quot; alt=&quot;重复请求号02.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/24/59253bc04016d.jpg&quot; alt=&quot;重复请求号03.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="HTTP" scheme="http://crossoverJie.github.io/tags/HTTP/"/>
    
      <category term="annotation" scheme="http://crossoverJie.github.io/tags/annotation/"/>
    
      <category term="AOP" scheme="http://crossoverJie.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>科普-为自己的博客免费加上小绿锁</title>
    <link href="http://crossoverJie.github.io/2017/05/07/https/"/>
    <id>http://crossoverJie.github.io/2017/05/07/https/</id>
    <published>2017-05-06T17:01:54.000Z</published>
    <updated>2017-05-07T08:40:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/07/590edced5545e.jpg" alt="https.jpg"></p>
<p>在如今的<code>HTTPS</code>大当其道的情况下自己的博客要是还没有用上。作为互联网的螺丝钉(<code>码农</code>)岂不是很没面子。</p>
<h1 id="使用CLOUDFLARE"><a href="#使用CLOUDFLARE" class="headerlink" title="使用CLOUDFLARE"></a>使用CLOUDFLARE</h1><p>这里使用<a href="http://www.CLOUDFLARE.com" target="_blank" rel="external">CLOUDFLARE</a>来提供<code>HTTPS</code>服务。</p>
<ul>
<li>在其官网进行注册，按照提示添加好自己的域名即可。</li>
<li>之后需要在自己域名的提供商处修改<code>DNS服务器</code>，我是在万网购买的修改后如下图：<br><img src="https://ooo.0o0.ooo/2017/05/07/590edd1a4cfd0.jpg" alt="1.jpg"><br>其中的<code>DNS服务器地址</code>由<code>CLOUDFLARE</code>是提供的。<br>修改完成之后通常需要等待一段时间才能生效。</li>
<li>接着在<code>CLOUDFLARE</code>配置<code>DNS</code>解析：<br><img src="https://ooo.0o0.ooo/2017/05/07/590edd4913c2b.jpg" alt="DNS解析.jpg"><br>点击<code>CLOUDFLARE</code>顶部的<code>DNS</code>进行如我上图中的配置，和之前的配置没有什么区别。</li>
</ul>
<p>等待一段时间之后发现使用<code>HTTP</code>,<code>HTTPS</code>都能访问，但是最好还是能在访问<code>HTTP</code>的时候能强制跳转到<code>HTTPS</code>.</p>
<ul>
<li>在<code>CLOUDFLARE</code>菜单栏点击<code>page-rules</code>之后新建一个<code>page rule</code>：<br><img src="https://ooo.0o0.ooo/2017/05/07/590edd73a9f9d.jpg" alt="强制https.jpg"><br>这样整个网站的请求都会强制到请求到<code>HTTPS</code>.</li>
</ul>
<a id="more"></a>
<h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>由于我才用的是<code>Hexo</code>中的<code>Next</code>主题，其中配置了<code>CNZZ</code>站长统计。其中配置的<code>CNZZ</code>统计JS是才用的<code>HTTP</code>。导致在首页的时候<code>chrome</code>一直提示感叹号。<br>修改站点<code>themes/next/layout/_scripts/third-party/analytics</code>目录下的<code>cnzz-analytics.swig</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;% if theme.cnzz_siteid %&#125;</div><div class="line"></div><div class="line">  &lt;div style=&quot;display: none;&quot;&gt;</div><div class="line">    &lt;script src=&quot;https://s6.cnzz.com/stat.php?id=&#123;&#123; theme.cnzz_siteid &#125;&#125;&amp;web_id=&#123;&#123; theme.cnzz_siteid &#125;&#125;&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>
<p>之后再进行构建的时候就会使用<code>HTTPS</code>.</p>
<blockquote>
<p>值得注意一点的是之后文章中所使用的图片都要用<code>HTTPS</code>的地址了，不然<code>chrome</code>会提示感叹号。</p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590edced5545e.jpg&quot; alt=&quot;https.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;在如今的&lt;code&gt;HTTPS&lt;/code&gt;大当其道的情况下自己的博客要是还没有用上。作为互联网的螺丝钉(&lt;code&gt;码农&lt;/code&gt;)岂不是很没面子。&lt;/p&gt;
&lt;h1 id=&quot;使用CLOUDFLARE&quot;&gt;&lt;a href=&quot;#使用CLOUDFLARE&quot; class=&quot;headerlink&quot; title=&quot;使用CLOUDFLARE&quot;&gt;&lt;/a&gt;使用CLOUDFLARE&lt;/h1&gt;&lt;p&gt;这里使用&lt;a href=&quot;http://www.CLOUDFLARE.com&quot;&gt;CLOUDFLARE&lt;/a&gt;来提供&lt;code&gt;HTTPS&lt;/code&gt;服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在其官网进行注册，按照提示添加好自己的域名即可。&lt;/li&gt;
&lt;li&gt;之后需要在自己域名的提供商处修改&lt;code&gt;DNS服务器&lt;/code&gt;，我是在万网购买的修改后如下图：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590edd1a4cfd0.jpg&quot; alt=&quot;1.jpg&quot;&gt;&lt;br&gt;其中的&lt;code&gt;DNS服务器地址&lt;/code&gt;由&lt;code&gt;CLOUDFLARE&lt;/code&gt;是提供的。&lt;br&gt;修改完成之后通常需要等待一段时间才能生效。&lt;/li&gt;
&lt;li&gt;接着在&lt;code&gt;CLOUDFLARE&lt;/code&gt;配置&lt;code&gt;DNS&lt;/code&gt;解析：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590edd4913c2b.jpg&quot; alt=&quot;DNS解析.jpg&quot;&gt;&lt;br&gt;点击&lt;code&gt;CLOUDFLARE&lt;/code&gt;顶部的&lt;code&gt;DNS&lt;/code&gt;进行如我上图中的配置，和之前的配置没有什么区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等待一段时间之后发现使用&lt;code&gt;HTTP&lt;/code&gt;,&lt;code&gt;HTTPS&lt;/code&gt;都能访问，但是最好还是能在访问&lt;code&gt;HTTP&lt;/code&gt;的时候能强制跳转到&lt;code&gt;HTTPS&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;CLOUDFLARE&lt;/code&gt;菜单栏点击&lt;code&gt;page-rules&lt;/code&gt;之后新建一个&lt;code&gt;page rule&lt;/code&gt;：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590edd73a9f9d.jpg&quot; alt=&quot;强制https.jpg&quot;&gt;&lt;br&gt;这样整个网站的请求都会强制到请求到&lt;code&gt;HTTPS&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="科普" scheme="http://crossoverJie.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
      <category term="HTTP" scheme="http://crossoverJie.github.io/tags/HTTP/"/>
    
      <category term="HTTPS" scheme="http://crossoverJie.github.io/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十三) 将dubbo暴露出HTTP服务</title>
    <link href="http://crossoverJie.github.io/2017/05/07/SSM13/"/>
    <id>http://crossoverJie.github.io/2017/05/07/SSM13/</id>
    <published>2017-05-06T17:01:54.000Z</published>
    <updated>2017-05-20T05:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/20/591fd69dab028.jpg" alt="dubbo暴露为http服务.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>通常来说一个<code>dubbo</code>服务都是对内给内部调用的，但也有可能一个服务就是需要提供给外部使用，并且还不能有使用语言的局限性。</p>
<p>比较标准的做法是对外的服务我们统一提供一个<code>openAPI</code>，这样的调用方需要按照标准提供相应的<code>appID</code>以及密钥来进行验签才能使用。这样固然是比较规范和安全，但复杂度也不亚于开发一个单独的系统了。</p>
<p>这里所讲到的没有那么复杂，就只是把一个不需要各种权限检验的<code>dubbo</code>服务对外提供为<code>HTTP</code>服务。</p>
<p>调用示例:<br><img src="https://ooo.0o0.ooo/2017/05/20/591fd6d022182.jpg" alt="dubbo-http封面.jpg"></p>
<a id="more"></a>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>以下是本文所涉及到的一些知识点：</p>
<ul>
<li>Spring相关知识。</li>
<li>Java反射相关知识。</li>
<li>SpringMVC相关知识。</li>
</ul>
<blockquote>
<p>其实思路很简单，就是利用<code>SpringMVC</code>提供一个<code>HTTP</code>接口。<br>在该接口中通过入参进行反射找到具体的<code>dubbo</code>服务实现进行调用。</p>
</blockquote>
<h2 id="HttpProviderConf配置类"><a href="#HttpProviderConf配置类" class="headerlink" title="HttpProviderConf配置类"></a>HttpProviderConf配置类</h2><p>首先需要定义一个<code>HttpProviderConf</code>类用于保存声明需要对外提供服务的包名，毕竟我们反射时需要用到一个类的全限定名：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpProviderConf</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 提供http访问的包</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; usePackage ;</div><div class="line">    <span class="comment">//省略getter setter方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就只有一个<code>usePackage</code>成员变量，用于存放需要包名。<br>至于用<code>List</code>的原因是允许有多个。</p>
<h2 id="请求响应入参、出参"><a href="#请求响应入参、出参" class="headerlink" title="请求响应入参、出参"></a>请求响应入参、出参</h2><h3 id="HttpRequest入参"><a href="#HttpRequest入参" class="headerlink" title="HttpRequest入参"></a>HttpRequest入参</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpRequest</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String param ;<span class="comment">//入参</span></div><div class="line">    <span class="keyword">private</span> String service ;<span class="comment">//请求service</span></div><div class="line">    <span class="keyword">private</span> String method ;<span class="comment">//请求方法</span></div><div class="line">    <span class="comment">//省略getter setter方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>param</code>是用于存放真正调用<code>dubbo</code>服务时的入参，传入<code>json</code>在调用的时候解析成具体的参数对象。</p>
<p><code>service</code>存放<code>dubbo</code>服务声明的<code>interface API</code>的包名。</p>
<p><code>method</code>则是真正调用的方法名称。</p>
<h3 id="HttpResponse-响应"><a href="#HttpResponse-响应" class="headerlink" title="HttpResponse 响应"></a>HttpResponse 响应</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResponse</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">552828440320737814L</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;<span class="comment">//成功标志</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String code;<span class="comment">//信息码</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String description;<span class="comment">//描述</span></div><div class="line">    <span class="comment">//省略getter setter方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是封装了常用的<code>HTTP</code>服务的响应数据。</p>
<h2 id="暴露服务controller"><a href="#暴露服务controller" class="headerlink" title="暴露服务controller"></a>暴露服务controller</h2><p>最重要的则是controller里的实现代码了。</p>
<p>先贴代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/dubboAPI"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboController</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(DubboController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HttpProviderConf httpProviderConf;</div><div class="line"></div><div class="line">    <span class="comment">//缓存作用的map</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Class&lt;?&gt;&gt; cacheMap = <span class="keyword">new</span> HashMap&lt;String, Class&lt;?&gt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> ApplicationContext applicationContext;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;service&#125;/&#123;method&#125;"</span>,method = RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">api</span><span class="params">(HttpRequest httpRequest, HttpServletRequest request,</span></span></div><div class="line">                      @PathVariable String service,</div><div class="line">                      @PathVariable String method) &#123;</div><div class="line">        logger.debug(<span class="string">"ip:&#123;&#125;-httpRequest:&#123;&#125;"</span>,getIP(request), JSON.toJSONString(httpRequest));</div><div class="line"></div><div class="line">        String invoke = invoke(httpRequest, service, method);</div><div class="line">        logger.debug(<span class="string">"callback :"</span>+invoke) ;</div><div class="line">        <span class="keyword">return</span> invoke ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">invoke</span><span class="params">(HttpRequest httpRequest,String service,String method)</span></span>&#123;</div><div class="line">        httpRequest.setService(service);</div><div class="line">        httpRequest.setMethod(method);</div><div class="line"></div><div class="line">        HttpResponse response = <span class="keyword">new</span> HttpResponse() ;</div><div class="line"></div><div class="line">        logger.debug(<span class="string">"input param:"</span>+JSON.toJSONString(httpRequest));</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(httpProviderConf.getUsePackage()))&#123;</div><div class="line">            <span class="keyword">boolean</span> isPac = <span class="keyword">false</span> ;</div><div class="line">            <span class="keyword">for</span> (String pac : httpProviderConf.getUsePackage()) &#123;</div><div class="line">                <span class="keyword">if</span> (service.startsWith(pac))&#123;</div><div class="line">                    isPac = <span class="keyword">true</span> ;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!isPac)&#123;</div><div class="line">                <span class="comment">//调用的是未经配置的包</span></div><div class="line">                logger.error(<span class="string">"service is not correct,service="</span>+service);</div><div class="line">                response.setCode(<span class="string">"2"</span>);</div><div class="line">                response.setSuccess(<span class="keyword">false</span>);</div><div class="line">                response.setDescription(<span class="string">"service is not correct,service="</span>+service);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; serviceCla = cacheMap.get(service);</div><div class="line">            <span class="keyword">if</span> (serviceCla == <span class="keyword">null</span>)&#123;</div><div class="line">                serviceCla = Class.forName(service) ;</div><div class="line">                logger.debug(<span class="string">"serviceCla:"</span>+JSON.toJSONString(serviceCla));</div><div class="line"></div><div class="line">                <span class="comment">//设置缓存</span></div><div class="line">                cacheMap.put(service,serviceCla) ;</div><div class="line">            &#125;</div><div class="line">            Method[] methods = serviceCla.getMethods();</div><div class="line">            Method targetMethod = <span class="keyword">null</span> ;</div><div class="line">            <span class="keyword">for</span> (Method m : methods) &#123;</div><div class="line">                <span class="keyword">if</span> (m.getName().equals(method))&#123;</div><div class="line">                    targetMethod = m ;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (method == <span class="keyword">null</span>)&#123;</div><div class="line">                logger.error(<span class="string">"method is not correct,method="</span>+method);</div><div class="line">                response.setCode(<span class="string">"2"</span>);</div><div class="line">                response.setSuccess(<span class="keyword">false</span>);</div><div class="line">                response.setDescription(<span class="string">"method is not correct,method="</span>+method);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Object bean = <span class="keyword">this</span>.applicationContext.getBean(serviceCla);</div><div class="line">            Object result = <span class="keyword">null</span> ;</div><div class="line">            Class&lt;?&gt;[] parameterTypes = targetMethod.getParameterTypes();</div><div class="line">            <span class="keyword">if</span> (parameterTypes.length == <span class="number">0</span>)&#123;</div><div class="line">                <span class="comment">//没有参数</span></div><div class="line">                result = targetMethod.invoke(bean);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (parameterTypes.length == <span class="number">1</span>)&#123;</div><div class="line">                Object json = JSON.parseObject(httpRequest.getParam(), parameterTypes[<span class="number">0</span>]);</div><div class="line">                result = targetMethod.invoke(bean,json) ;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                logger.error(<span class="string">"Can only have one parameter"</span>);</div><div class="line">                response.setSuccess(<span class="keyword">false</span>);</div><div class="line">                response.setCode(<span class="string">"2"</span>);</div><div class="line">                response.setDescription(<span class="string">"Can only have one parameter"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> JSON.toJSONString(result) ;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</div><div class="line">            logger.error(<span class="string">"class not found"</span>,e);</div><div class="line">            response.setSuccess(<span class="keyword">false</span>);</div><div class="line">            response.setCode(<span class="string">"2"</span>);</div><div class="line">            response.setDescription(<span class="string">"class not found"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">            logger.error(<span class="string">"InvocationTargetException"</span>,e);</div><div class="line">            response.setSuccess(<span class="keyword">false</span>);</div><div class="line">            response.setCode(<span class="string">"2"</span>);</div><div class="line">            response.setDescription(<span class="string">"InvocationTargetException"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">            logger.error(<span class="string">"IllegalAccessException"</span>,e);</div><div class="line">            response.setSuccess(<span class="keyword">false</span>);</div><div class="line">            response.setCode(<span class="string">"2"</span>);</div><div class="line">            response.setDescription(<span class="string">"IllegalAccessException"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(response) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取IP</div><div class="line">     * <span class="doctag">@param</span> request</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getIP</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        String s = request.getHeader(<span class="string">"X-Forwarded-For"</span>);</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(s)) &#123;</div><div class="line"></div><div class="line">            s = request.getHeader(<span class="string">"Proxy-Client-IP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(s)) &#123;</div><div class="line"></div><div class="line">            s = request.getHeader(<span class="string">"WL-Proxy-Client-IP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(s)) &#123;</div><div class="line">            s = request.getHeader(<span class="string">"HTTP_CLIENT_IP"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(s)) &#123;</div><div class="line"></div><div class="line">            s = request.getHeader(<span class="string">"HTTP_X_FORWARDED_FOR"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() == <span class="number">0</span> || <span class="string">"unknown"</span>.equalsIgnoreCase(s)) &#123;</div><div class="line"></div><div class="line">            s = request.getRemoteAddr();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"127.0.0.1"</span>.equals(s) || <span class="string">"0:0:0:0:0:0:0:1"</span>.equals(s))</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                s = InetAddress.getLocalHost().getHostAddress();</div><div class="line">            &#125; <span class="keyword">catch</span> (UnknownHostException unknownhostexception) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">return</span> s;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>先一步一步的看：</p>
<ul>
<li><p>首先是定义了一个<code>DubboController</code>,并使用了<code>SpringMVC</code>的注解对外暴露<code>HTTP</code>服务。</p>
</li>
<li><p>实现了<code>org.springframework.context.ApplicationContextAware</code>类，<br>实现了<code>setApplicationContext()</code>方法用于初始化<code>Spring</code>上下文对象，在之后可以获取到容器里的相应对象。</p>
</li>
<li><p>核心的<code>invoke()</code>方法。</p>
</li>
<li>调用时：<code>http://127.0.0.1:8080/SSM-SERVICE/dubboAPI/com.crossoverJie.api.UserInfoApi/getUserInfo</code>。</li>
<li>具体如上文的调用实例。先将<code>com.crossoverJie.api.UserInfoApi</code>、<code>getUserInfo</code>赋值到<code>httpRequest</code>入参中。</li>
<li>判断传入的包是否是对外提供的。如下配置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--dubbo服务暴露为http服务--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.dubbo.http.conf.HttpProviderConf"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePackage"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        	   <span class="comment">&lt;!--需要暴露服务的接口包名，可多个--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.crossoverJie.api<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--扫描暴露包--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.crossoverJie.dubbo.http"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中的<code>com.crossoverJie.api</code>就是自己需要暴露的包名，可以多个。</p>
<ul>
<li>接着在缓存<code>map</code>中取出反射获取到的接口类类型，如果获取不到则通过反射获取，并将值设置到缓存<code>map</code>中，这样不用每次都反射获取，可以节省系统开销(<code>反射很耗系统资源</code>)。</li>
<li>接着也是判断该接口中是否有传入的<code>getUserInfo</code>方法。</li>
<li>取出该方法的参数列表，如果没有参数则直接调用。</li>
<li>如果有参数，判断个数。这里最多只运行一个参数。也就是说在真正的<code>dubbo</code>调用的时候只能传递一个<code>BO</code>类型，具体的参数列表可以写到<code>BO</code>中。因为如果有多个在进行<code>json</code>解析的时候是无法赋值到两个参数对象中去的。</li>
<li>之后进行调用，将调用返回的数据进行返回即可。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通常来说这样提供的<code>HTTP</code>接口再实际中用的不多，但是很方便调试。</p>
<p>比如写了一个<code>dubbo</code>的查询接口，在测试环境或者是预发布环境中就可以直接通过<code>HTTP</code>请求的方式进行简单的测试，或者就是查询数据。比在<code>Java</code>中写单测来测试或查询快的很多。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/crossoverJie/SSM-DUBBO-HTTP.git</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd SSM-DUBBO-HTTP</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM-HTTP-PROVIDER<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="spring配置"><a href="#spring配置" class="headerlink" title="spring配置"></a>spring配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--dubbo服务暴露为http服务--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.dubbo.http.conf.HttpProviderConf"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePackage"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">        	   <span class="comment">&lt;!--需要暴露服务的接口包名，可多个--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.crossoverJie.api<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--扫描暴露包--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.crossoverJie.dubbo.http"</span>/&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p> 插件地址：<a href="https://github.com/crossoverJie/SSM-DUBBO-HTTP" target="_blank" rel="external">https://github.com/crossoverJie/SSM-DUBBO-HTTP</a></p>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/20/591fd69dab028.jpg&quot; alt=&quot;dubbo暴露为http服务.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;通常来说一个&lt;code&gt;dubbo&lt;/code&gt;服务都是对内给内部调用的，但也有可能一个服务就是需要提供给外部使用，并且还不能有使用语言的局限性。&lt;/p&gt;
&lt;p&gt;比较标准的做法是对外的服务我们统一提供一个&lt;code&gt;openAPI&lt;/code&gt;，这样的调用方需要按照标准提供相应的&lt;code&gt;appID&lt;/code&gt;以及密钥来进行验签才能使用。这样固然是比较规范和安全，但复杂度也不亚于开发一个单独的系统了。&lt;/p&gt;
&lt;p&gt;这里所讲到的没有那么复杂，就只是把一个不需要各种权限检验的&lt;code&gt;dubbo&lt;/code&gt;服务对外提供为&lt;code&gt;HTTP&lt;/code&gt;服务。&lt;/p&gt;
&lt;p&gt;调用示例:&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/20/591fd6d022182.jpg&quot; alt=&quot;dubbo-http封面.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="dubbo" scheme="http://crossoverJie.github.io/tags/dubbo/"/>
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="HTTP" scheme="http://crossoverJie.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十二) dubbo日志插件</title>
    <link href="http://crossoverJie.github.io/2017/04/25/SSM12/"/>
    <id>http://crossoverJie.github.io/2017/04/25/SSM12/</id>
    <published>2017-04-25T10:01:54.000Z</published>
    <updated>2017-04-25T10:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/04/25/58ff0b1b40d27.jpg" alt="dubbo-filter.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在之前<a href="http://crossoverjie.top/2017/04/07/SSM11/" target="_blank" rel="external">dubbo分布式框架中</a>讲到了如何利用dubbo来搭建一个微服务项目。其中还有一些值得优化提高开发效率的地方，比如日志：</p>
<blockquote>
<p>当我们一个项目拆分为N多个微服务之后，当其中一个调用另一个服务出现了问题，首先第一步自然是查看日志。 </p>
<p>出现问题的有很多情况，如提供方自身代码的问题，调用方的姿势不对等。</p>
<p>自身的问题这个管不了，但是我们可以对每一个入参、返回都加上日志，这样首先就可以判断调用方是否姿势不对了。</p>
<p>为了规范日志已经后续的可扩展，我们可以单独提供一个插件给每个项目使用即可。</p>
</blockquote>
<p>效果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">2017-04-25 15:15:38,968 DEBUG [com.alibaba.dubbo.remoting.transport.DecodeHandler] -  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.5.3, current host: 127.0.0.1</div><div class="line">2017-04-25 15:15:39,484 DEBUG [com.crossoverJie.dubbo.filter.DubboTraceFilter] - dubbo请求数据:&#123;&quot;args&quot;:[1],&quot;interfaceName&quot;:&quot;com.crossoverJie.api.UserInfoApi&quot;,&quot;methodName&quot;:&quot;getUserInfo&quot;&#125;</div><div class="line">2017-04-25 15:15:39,484 INFO [com.crossoverJie.api.impl.UserInfoApiImpl] - 用户查询Id=1</div><div class="line">2017-04-25 15:15:39,505 DEBUG [org.mybatis.spring.SqlSessionUtils] - Creating a new SqlSession</div><div class="line">2017-04-25 15:15:39,525 DEBUG [org.mybatis.spring.SqlSessionUtils] - SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6f56b29] was not registered for synchronization because synchronization is not active</div><div class="line">2017-04-25 15:15:39,549 DEBUG [org.mybatis.spring.transaction.SpringManagedTransaction] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@778b3121] will not be managed by Spring</div><div class="line">2017-04-25 15:15:39,555 DEBUG [com.crossoverJie.api.dubbo.dao.T_userDao.selectByPrimaryKey] - ==&gt;  Preparing: select id, username, password,roleId from t_user where id = ? </div><div class="line">2017-04-25 15:15:39,591 DEBUG [com.crossoverJie.api.dubbo.dao.T_userDao.selectByPrimaryKey] - ==&gt; Parameters: 1(Integer)</div><div class="line">2017-04-25 15:15:39,616 DEBUG [com.crossoverJie.api.dubbo.dao.T_userDao.selectByPrimaryKey] - &lt;==      Total: 1</div><div class="line">2017-04-25 15:15:39,616 DEBUG [com.alibaba.druid.pool.PreparedStatementPool] - &#123;conn-10003, pstmt-20000&#125; enter cache</div><div class="line">2017-04-25 15:15:39,617 DEBUG [org.mybatis.spring.SqlSessionUtils] - Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6f56b29]</div><div class="line">2017-04-25 15:15:45,473 INFO [com.crossoverJie.dubbo.filter.DubboTraceFilter] - dubbo执行成功</div><div class="line">2017-04-25 15:15:45,476 DEBUG [com.crossoverJie.dubbo.filter.DubboTraceFilter] - dubbo返回数据&#123;&quot;args&quot;:[&#123;&quot;id&quot;:1,&quot;password&quot;:&quot;123456&quot;,&quot;roleId&quot;:1,&quot;userName&quot;:&quot;crossoverJie&quot;&#125;],&quot;interfaceName&quot;:&quot;com.crossoverJie.api.UserInfoApi&quot;,&quot;methodName&quot;:&quot;getUserInfo&quot;&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="dubbo-filter拓展"><a href="#dubbo-filter拓展" class="headerlink" title="dubbo filter拓展"></a>dubbo filter拓展</h1><p>参考<a href="http://dubbo.io/Developer+Guide-zh.htm#DeveloperGuide-zh-%E8%B0%83%E7%94%A8%E6%8B%A6%E6%88%AA%E6%89%A9%E5%B1%95" target="_blank" rel="external">官方文档</a>，我们可以通过<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">## 定义实体</div><div class="line">首先定义一个实体类用于保存调用过程中的一些数据：</div><div class="line">```java</div><div class="line">public class FilterDesc &#123;</div><div class="line"></div><div class="line">    private String interfaceName ;//接口名</div><div class="line">    private String methodName ;//方法名</div><div class="line">    private Object[] args ;//参数</div><div class="line">    //省略getter setter</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="DubboTraceFilter具体拦截逻辑"><a href="#DubboTraceFilter具体拦截逻辑" class="headerlink" title="DubboTraceFilter具体拦截逻辑"></a>DubboTraceFilter具体拦截逻辑</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Activate</span>(group = Constants.PROVIDER, order = -<span class="number">999</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboTraceFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(DubboTraceFilter.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            FilterDesc filterReq = <span class="keyword">new</span> FilterDesc() ;</div><div class="line">            filterReq.setInterfaceName(invocation.getInvoker().getInterface().getName());</div><div class="line">            filterReq.setMethodName(invocation.getMethodName()) ;</div><div class="line">            filterReq.setArgs(invocation.getArguments());</div><div class="line"></div><div class="line">            logger.debug(<span class="string">"dubbo请求数据:"</span>+JSON.toJSONString(filterReq));</div><div class="line"></div><div class="line">            Result result = invoker.invoke(invocation);</div><div class="line">            <span class="keyword">if</span> (result.hasException() &amp;&amp; invoker.getInterface() != GenericService.class)&#123;</div><div class="line">                logger.error(<span class="string">"dubbo执行异常"</span>,result.getException());</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                logger.info(<span class="string">"dubbo执行成功"</span>);</div><div class="line"></div><div class="line">                FilterDesc filterRsp = <span class="keyword">new</span> FilterDesc() ;</div><div class="line">                filterRsp.setMethodName(invocation.getMethodName());</div><div class="line">                filterRsp.setInterfaceName(invocation.getInvoker().getInterface().getName());</div><div class="line">                filterRsp.setArgs(<span class="keyword">new</span> Object[]&#123;result.getValue()&#125;);</div><div class="line">                logger.debug(<span class="string">"dubbo返回数据"</span>+JSON.toJSONString(filterRsp));</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result ;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">catch</span> (RuntimeException e)&#123;</div><div class="line">            logger.error(<span class="string">"dubbo未知异常"</span> + RpcContext.getContext().getRemoteHost()</div><div class="line">                    + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName()</div><div class="line">                    + <span class="string">", exception: "</span> + e.getClass().getName() + <span class="string">": "</span> + e.getMessage(), e);</div><div class="line">            <span class="keyword">throw</span> e ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>逻辑非常简单，只是对调用过程、异常、成功之后打印相应的日志而已。</p>
<p>但是有个地方要注意一下：<br>需要在<code>resource</code>目录下加上<code>META-INF.dubbo/com.alibaba.dubbo.rpc.Filter</code>文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dubboTraceFilter=com.crossoverJie.dubbo.filter.DubboTraceFilter</div></pre></td></tr></table></figure></p>
<p>目录结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">src</div><div class="line"> |-main</div><div class="line">    |-java</div><div class="line">        |-com</div><div class="line">            |-xxx</div><div class="line">                |-XxxFilter.java (实现Filter接口)</div><div class="line">    |-resources</div><div class="line">        |-META-INF</div><div class="line">            |-dubbo</div><div class="line">                |-com.alibaba.dubbo.rpc.Filter (纯文本文件，内容为：xxx=com.xxx.XxxFilter)</div></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该项目已经托管到GitHub：<br><a href="https://github.com/crossoverJie/SSM-DUBBO-FILTER" target="_blank" rel="external">https://github.com/crossoverJie/SSM-DUBBO-FILTER</a></p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /SSM-DUBBO-FILTER</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn clean</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install</div></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在服务提供的项目中加上依赖，这样每次调用都会打上日志。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM-TRACE-FILTER<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>在拦截器中最好不要加上一些耗时任务，需要考虑到性能问题。</strong></p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/04/25/58ff0b1b40d27.jpg&quot; alt=&quot;dubbo-filter.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在之前&lt;a href=&quot;http://crossoverjie.top/2017/04/07/SSM11/&quot;&gt;dubbo分布式框架中&lt;/a&gt;讲到了如何利用dubbo来搭建一个微服务项目。其中还有一些值得优化提高开发效率的地方，比如日志：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们一个项目拆分为N多个微服务之后，当其中一个调用另一个服务出现了问题，首先第一步自然是查看日志。 &lt;/p&gt;
&lt;p&gt;出现问题的有很多情况，如提供方自身代码的问题，调用方的姿势不对等。&lt;/p&gt;
&lt;p&gt;自身的问题这个管不了，但是我们可以对每一个入参、返回都加上日志，这样首先就可以判断调用方是否姿势不对了。&lt;/p&gt;
&lt;p&gt;为了规范日志已经后续的可扩展，我们可以单独提供一个插件给每个项目使用即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:38,968 DEBUG [com.alibaba.dubbo.remoting.transport.DecodeHandler] -  [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.5.3, current host: 127.0.0.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,484 DEBUG [com.crossoverJie.dubbo.filter.DubboTraceFilter] - dubbo请求数据:&amp;#123;&amp;quot;args&amp;quot;:[1],&amp;quot;interfaceName&amp;quot;:&amp;quot;com.crossoverJie.api.UserInfoApi&amp;quot;,&amp;quot;methodName&amp;quot;:&amp;quot;getUserInfo&amp;quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,484 INFO [com.crossoverJie.api.impl.UserInfoApiImpl] - 用户查询Id=1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,505 DEBUG [org.mybatis.spring.SqlSessionUtils] - Creating a new SqlSession&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,525 DEBUG [org.mybatis.spring.SqlSessionUtils] - SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6f56b29] was not registered for synchronization because synchronization is not active&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,549 DEBUG [org.mybatis.spring.transaction.SpringManagedTransaction] - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@778b3121] will not be managed by Spring&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,555 DEBUG [com.crossoverJie.api.dubbo.dao.T_userDao.selectByPrimaryKey] - ==&amp;gt;  Preparing: select id, username, password,roleId from t_user where id = ? &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,591 DEBUG [com.crossoverJie.api.dubbo.dao.T_userDao.selectByPrimaryKey] - ==&amp;gt; Parameters: 1(Integer)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,616 DEBUG [com.crossoverJie.api.dubbo.dao.T_userDao.selectByPrimaryKey] - &amp;lt;==      Total: 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,616 DEBUG [com.alibaba.druid.pool.PreparedStatementPool] - &amp;#123;conn-10003, pstmt-20000&amp;#125; enter cache&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:39,617 DEBUG [org.mybatis.spring.SqlSessionUtils] - Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@6f56b29]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:45,473 INFO [com.crossoverJie.dubbo.filter.DubboTraceFilter] - dubbo执行成功&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2017-04-25 15:15:45,476 DEBUG [com.crossoverJie.dubbo.filter.DubboTraceFilter] - dubbo返回数据&amp;#123;&amp;quot;args&amp;quot;:[&amp;#123;&amp;quot;id&amp;quot;:1,&amp;quot;password&amp;quot;:&amp;quot;123456&amp;quot;,&amp;quot;roleId&amp;quot;:1,&amp;quot;userName&amp;quot;:&amp;quot;crossoverJie&amp;quot;&amp;#125;],&amp;quot;interfaceName&amp;quot;:&amp;quot;com.crossoverJie.api.UserInfoApi&amp;quot;,&amp;quot;methodName&amp;quot;:&amp;quot;getUserInfo&amp;quot;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="dubbo" scheme="http://crossoverJie.github.io/tags/dubbo/"/>
    
      <category term="日志" scheme="http://crossoverJie.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十一) 基于dubbo的分布式架构</title>
    <link href="http://crossoverJie.github.io/2017/04/07/SSM11/"/>
    <id>http://crossoverJie.github.io/2017/04/07/SSM11/</id>
    <published>2017-04-06T17:30:54.000Z</published>
    <updated>2017-04-07T01:44:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/04/06/58e649d664665.jpg" alt="dubbo.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在越来越多的互联网公司还是将自己公司的项目进行服务化，这确实是今后项目开发的一个趋势，就这个点再凭借之前的<code>SSM</code>项目来让第一次接触的同学能快速上手。</p>
<h1 id="浅谈分布式架构"><a href="#浅谈分布式架构" class="headerlink" title="浅谈分布式架构"></a>浅谈分布式架构</h1><p><code>分布式架构</code>单看这个名字给人的感觉就是高逼格，但其实从历史的角度来分析一下就比较明了了。</p>
<blockquote>
<p>我们拿一个电商系统来说：</p>
</blockquote>
<h2 id="单系统"><a href="#单系统" class="headerlink" title="单系统"></a>单系统</h2><p><img src="https://ooo.0o0.ooo/2017/04/06/58e651937130f.png" alt="E65B5547-AF84-4D31-836D-72892C7AC7EA.png"><br>对于一个刚起步的创业公司项目肯定是追求越快完成功能越好，并且用户量也不大。</p>
<a id="more"></a>
<p>这时候所有的业务逻辑都是在一个项目中就可以满足。</p>
<h2 id="垂直拆分-多应用"><a href="#垂直拆分-多应用" class="headerlink" title="垂直拆分-多应用"></a>垂直拆分-多应用</h2><p><img src="https://ooo.0o0.ooo/2017/04/06/58e65856cf18a.jpg" alt="QQ20170406-230056@2x.jpg"><br>当业务量和用户量发展到一定地步的时候，这时一般会将应用同时部署到几台服务器上，在用户访问的时候使用<code>Nginx</code>进行反向代理和简单的负载均衡。</p>
<h2 id="SOA服务化"><a href="#SOA服务化" class="headerlink" title="SOA服务化"></a>SOA服务化</h2><p>当整个系统以及发展的足够大的时候，比如一个电商系统中存在有：</p>
<ul>
<li>用户系统</li>
<li>订单系统</li>
<li>支付系统</li>
<li>物流系统</li>
</ul>
<p>等系统。<br>如果每次修改了其中一个系统就要重新发布上线的话那么耦合就太严重了。</p>
<blockquote>
<p>所以需要将整个项目拆分成若干个独立的应用，可以进行独立的开发上线实现快速迭代。</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/04/06/58e660509c5f5.png" alt="dubbo.png"></p>
<blockquote>
<p>如上图所示每个应用之间相互独立,每个应用可以消费其他应用暴露出来的服务，同时也对外提供服务。</p>
</blockquote>
<p>从架构的层面简单的理解了，接下来看看如何编码实现。</p>
<h1 id="基于dubbo的实现"><a href="#基于dubbo的实现" class="headerlink" title="基于dubbo的实现"></a>基于dubbo的实现</h1><p><code>dubbo</code>应该算是国内使用最多的分布式服务框架，基于此来实现对新入门的同学应该很有帮助。</p>
<blockquote>
<p>其中有涉及到安装dubbo服务的注册中心zookeeper等相关知识点可以自行查看<a href="http://dubbo.io" target="_blank" rel="external">官方文档</a>，这里就不单独讲了。</p>
</blockquote>
<h2 id="对外提供服务"><a href="#对外提供服务" class="headerlink" title="对外提供服务"></a>对外提供服务</h2><p>首先第一步需要在<code>SSM-API</code>模块中定义一个接口，这里就搞了一个用户查询的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:用户API</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> * Date: 2017/4/4 下午9:46</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserInfoApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取用户信息</div><div class="line">     * <span class="doctag">@param</span> userId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> UserInfoRsp <span class="title">getUserInfo</span><span class="params">(<span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着在<code>SSM-SERVICE</code>模块中进行实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> * Date: 2017/4/4 下午9:51</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfoApiImpl</span> <span class="keyword">implements</span> <span class="title">UserInfoApi</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(UserInfoApiImpl.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> T_userService t_userService ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取用户信息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> userId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> UserInfoRsp <span class="title">getUserInfo</span><span class="params">(<span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"用户查询Id="</span>+userId);</div><div class="line"></div><div class="line">        <span class="comment">//返回对象</span></div><div class="line">        UserInfoRsp userInfoRsp = <span class="keyword">new</span> UserInfoRsp() ;</div><div class="line">        T_user t_user = t_userService.selectByPrimaryKey(userId) ;</div><div class="line"></div><div class="line">        <span class="comment">//构建</span></div><div class="line">        buildUserInfoRsp(userInfoRsp,t_user) ;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> userInfoRsp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 构建返回</div><div class="line">     * <span class="doctag">@param</span> userInfoRsp</div><div class="line">     * <span class="doctag">@param</span> t_user</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildUserInfoRsp</span><span class="params">(UserInfoRsp userInfoRsp, T_user t_user)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (t_user ==  <span class="keyword">null</span>)&#123;</div><div class="line">            t_user = <span class="keyword">new</span> T_user() ;</div><div class="line">        &#125;</div><div class="line">        CommonUtil.setLogValueModelToModel(t_user,userInfoRsp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这些都是通用的代码，但值得注意的一点是这里使用的<code>dubbo</code>框架所提供的<code>@service</code>注解。作用是声明需要暴露的服务接口。</p>
<p>再之后就是几个dubbo相关的配置文件了。</p>
<h3 id="spring-dubbo-config-xml"><a href="#spring-dubbo-config-xml" class="headerlink" title="spring-dubbo-config.xml"></a>spring-dubbo-config.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"ssm-service"</span> <span class="attr">owner</span>=<span class="string">"crossoverJie"</span></span></div><div class="line">	<span class="attr">organization</span>=<span class="string">"ssm-crossoverJie"</span> <span class="attr">logger</span>=<span class="string">"slf4j"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">id</span>=<span class="string">"dubbo-registry"</span> <span class="attr">address</span>=<span class="string">"zookeeper://192.168.0.188:2181"</span></span></div><div class="line">	<span class="attr">file</span>=<span class="string">"/tmp/dubbo.cachr"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:monitor</span> <span class="attr">protocol</span>=<span class="string">"registry"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">timeout</span>=<span class="string">"15000"</span> <span class="attr">retries</span>=<span class="string">"0"</span> <span class="attr">delay</span>=<span class="string">"-1"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> <span class="attr">timeout</span>=<span class="string">"15000"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>其实就是配置我们服务注册的zk地址，以及服务名称、超时时间等配置。</p>
<h3 id="spring-dubbo-provider-xml"><a href="#spring-dubbo-provider-xml" class="headerlink" title="spring-dubbo-provider.xml"></a>spring-dubbo-provider.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"com.crossoverJie.api.impl"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>这个配置扫描注解包的位置，一般配置到接口实现包即可。</p>
<h3 id="spring-dubbo-consumer-xml"><a href="#spring-dubbo-consumer-xml" class="headerlink" title="spring-dubbo-consumer.xml"></a>spring-dubbo-consumer.xml</h3><p>这个是消费者配置项，表明我们需要依赖的其他应用。<br>这里我们在<code>SSM-BOOT</code>项目中进行配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userInfoApi"</span></span></div><div class="line">		<span class="attr">interface</span>=<span class="string">"com.crossoverJie.api.UserInfoApi"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>直接就是配置的刚才我们提供的那个用户查询的接口，这样当我们自己的内部项目需要使用到这个服务只需要依赖<code>SSM-BOOT</code>即可，不需要单独的再去配置<code>consumer</code>。这个我有在上一篇<a href="http://crossoverjie.top/2017/03/04/SSM10/#SSM-BOOT" target="_blank" rel="external">SSM(十) 项目重构-互联网项目的Maven结构</a>中也有提到。</p>
<h2 id="安装管理控制台"><a href="#安装管理控制台" class="headerlink" title="安装管理控制台"></a>安装管理控制台</h2><p>还有一个需要做的就是安装管理控制台，这里可以看到我们有多少服务、调用情况是怎么样等作用。</p>
<p>这里我们可以将dubbo的官方源码下载下来，对其中的<code>dubbo-admin</code>模块进行打包，将生成的<code>WAR包</code>放到<code>Tomcat</code>中运行起来即可。</p>
<p>但是需要注意一点的是：<br>需要将其中的<code>dubbo.properties</code>的zk地址修改为自己的即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dubbo.registry.address=zookeeper://127.0.0.1:2181</div><div class="line">dubbo.admin.root.password=root</div><div class="line">dubbo.admin.guest.password=guest</div></pre></td></tr></table></figure></p>
<p>到时候登陆的话使用root，密码也是root。<br>使用guest，密码也是guest。</p>
<p>登陆界面如下图：<br><img src="https://ooo.0o0.ooo/2017/04/07/58e66a9fba27d.jpg" alt="QQ20170407-001924@2x.jpg"></p>
<p>其中我们可以看到有两个服务以及注册上去了，但是没有消费者。</p>
<h2 id="消费服务"><a href="#消费服务" class="headerlink" title="消费服务"></a>消费服务</h2><p>为了能够更直观的体验到消费服务，我新建了一个项目：<br><a href="https://github.com/crossoverJie/SSM-CONSUMER" target="_blank" rel="external">https://github.com/crossoverJie/SSM-CONSUMER</a>。</p>
<p>其中在<code>SSM-CONSUMER-API</code>中我也定义了一个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:薪资API</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> * Date: 2017/4/4 下午9:46</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SalaryInfoApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取薪资</div><div class="line">     * <span class="doctag">@param</span> userId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> SalaryInfoRsp <span class="title">getSalaryInfo</span><span class="params">(<span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> Exception</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为作为消费者的同时我们也对外提供了一个获取薪资的一个服务。</p>
<p>在<code>SSM-CONSUMER-SERVICE</code>模块中进行了实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> * Date: 2017/4/4 下午9:51</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalaryInfoApiImpl</span> <span class="keyword">implements</span> <span class="title">SalaryInfoApi</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(SalaryInfoApiImpl.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    UserInfoApi userInfoApi ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取用户信息</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> userId</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SalaryInfoRsp <span class="title">getSalaryInfo</span><span class="params">(<span class="keyword">int</span> userId)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"薪资查询Id="</span>+userId);</div><div class="line"></div><div class="line">        <span class="comment">//返回对象</span></div><div class="line">        SalaryInfoRsp salaryInfoRsp = <span class="keyword">new</span> SalaryInfoRsp() ;</div><div class="line">        </div><div class="line">        <span class="comment">//调用远程服务</span></div><div class="line">        UserInfoRsp userInfo = userInfoApi.getUserInfo(userId);</div><div class="line">        </div><div class="line">        salaryInfoRsp.setUsername(userInfo.getUserName());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> salaryInfoRsp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中就可以直接使用<code>userInfoApi</code>调用之前的个人信息服务。</p>
<p>再调用之前需要注意的有点是，我们只需要依赖<code>SSM-BOOT</code>这个模块即可进行调用，因为<code>SSM-BOOT</code>模块已经为我们配置了消费者之类的操作了：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM-BOOT<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>还有一点是在配置<code>SSM-BOOT</code>中的<code>spring-dubbo-cosumer.xml</code>配置文件的时候，路径要和我们初始化spring配置文件时的路径一致：<br><img src="https://ooo.0o0.ooo/2017/04/07/58e67422cd592.jpg" alt="QQ20170407-005850@2x.jpg"><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Spring和mybatis的配置文件 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath*:spring/*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接下来跑个单测试一下能否调通：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> *         Date: 2017/4/5 下午10:41</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</div><div class="line"><span class="meta">@ContextConfiguration</span>(locations = &#123; <span class="string">"classpath*:/spring/*.xml"</span> &#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalaryInfoApiImplTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> SalaryInfoApi salaryInfoApi ;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getSalaryInfo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SalaryInfoRsp salaryInfo = salaryInfoApi.getSalaryInfo(<span class="number">1</span>);</div><div class="line">        System.out.println(JSON.toJSONString(salaryInfo));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="https://ooo.0o0.ooo/2017/04/07/58e66d2f65757.jpg" alt="消费者.jpg"><br>消费者</p>
<p><img src="https://ooo.0o0.ooo/2017/04/07/58e66d318a4c5.jpg" alt="提供者.jpg"><br>提供者<br>可以看到确实是调用成功了的。</p>
<p>接下来将消费者项目也同时启动在来观察管理控制台有什么不一样：<br><img src="https://ooo.0o0.ooo/2017/04/07/58e66e4917dd1.jpg" alt="QQ20170407-003413@2x.jpg"><br>会看到多了一个消费者所提供的服务<code>com.crossoverjie.consumer.api.SalaryInfoApi</code>,同时<br><code>com.crossoverJie.api.UserInfoApi</code>服务已经正常，说明已经有消费者了。</p>
<p><img src="https://ooo.0o0.ooo/2017/04/07/58e66e4904d89.jpg" alt="QQ20170407-003456@2x.jpg"><br>点进去便可查看具体的消费者。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样一个基于dubbo的分布式服务已经讲的差不多了，在实际的开发中我们便会开发一个大系统中的某一个子应用，这样就算一个子应用出问题了也不会影响到整个大的项目。</p>
<p>再提一点：<br>在实际的生产环境一般同一个服务我们都会有一个<code>master</code>,<code>slave</code>的主从服务，这样在上线的过程中不至于整个应用出现无法使用的尴尬情况。</p>
<p>谈到了<code>SOA</code>的好处，那么自然也有相对于传统模式的不方便之处：</p>
<ul>
<li>拆分一个大的项目为成百上千的子应用就不可能手动上线了，即需要自动化的部署上线，如<code>Jenkins</code>。</li>
<li>还有一个需要做到的就是监控，需要一个单独的监控平台来帮我们实时查看各个服务的运行情况以便于及时定位和解决问题。</li>
<li>日志查看分析，拆分之后不可能再去每台服务器上查看日志，需要一个单独的日志查看分析工具如<code>elk</code>。</li>
</ul>
<p>以上就是我理解的，如有差错欢迎指正。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/04/06/58e649d664665.jpg&quot; alt=&quot;dubbo.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;现在越来越多的互联网公司还是将自己公司的项目进行服务化，这确实是今后项目开发的一个趋势，就这个点再凭借之前的&lt;code&gt;SSM&lt;/code&gt;项目来让第一次接触的同学能快速上手。&lt;/p&gt;
&lt;h1 id=&quot;浅谈分布式架构&quot;&gt;&lt;a href=&quot;#浅谈分布式架构&quot; class=&quot;headerlink&quot; title=&quot;浅谈分布式架构&quot;&gt;&lt;/a&gt;浅谈分布式架构&lt;/h1&gt;&lt;p&gt;&lt;code&gt;分布式架构&lt;/code&gt;单看这个名字给人的感觉就是高逼格，但其实从历史的角度来分析一下就比较明了了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们拿一个电商系统来说：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;单系统&quot;&gt;&lt;a href=&quot;#单系统&quot; class=&quot;headerlink&quot; title=&quot;单系统&quot;&gt;&lt;/a&gt;单系统&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/04/06/58e651937130f.png&quot; alt=&quot;E65B5547-AF84-4D31-836D-72892C7AC7EA.png&quot;&gt;&lt;br&gt;对于一个刚起步的创业公司项目肯定是追求越快完成功能越好，并且用户量也不大。&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="dubbo" scheme="http://crossoverJie.github.io/tags/dubbo/"/>
    
      <category term="分布式" scheme="http://crossoverJie.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十) 项目重构-互联网项目的Maven结构</title>
    <link href="http://crossoverJie.github.io/2017/03/04/SSM10/"/>
    <id>http://crossoverJie.github.io/2017/03/04/SSM10/</id>
    <published>2017-03-03T17:44:54.000Z</published>
    <updated>2017-03-03T16:58:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/03/03/58b992d46fd02.jpg" alt="互联网项目的maven.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很久没有更新博客了，之前定下周更逐渐成了月更。怎么感觉像我追过的一部动漫。<br>这个博文其实很早就想写了。<br>之前所有的代码都是在一个模块里面进行开发，这和maven的理念是完全不相符的，最近硬是抽了一个时间来对项目的结构进行了一次重构。</p>
<blockquote>
<p>先来看看这次重构之后的目录结构</p>
</blockquote>
<p><img src="https://ooo.0o0.ooo/2017/03/04/58b99366edad6.jpg" alt="1.jpg"></p>
<a id="more"></a>
<h1 id="为什么需要分模块"><a href="#为什么需要分模块" class="headerlink" title="为什么需要分模块"></a>为什么需要分模块</h1><blockquote>
<p>至于为什么要分模块呢？</p>
</blockquote>
<p>我们设想一个这样的场景：<br>在现在的互联网开发中，会把一个很大的系统拆分成各个子系统用于降低他们之间的耦合度。</p>
<p>在一个子项目中通常都会为<code>API</code>、<code>WEB</code>、<code>Service</code>等模块。<br>而且当项目够大时，这些通常都不是一个人能完成的工作，需要一个团队来各司其职。</p>
<p>想象一下：当之前所有的项目都在一个模块的时候，A改动了API，需要<code>Deploy</code>代码。而B也改动了<code>service</code>的代码，但并没有完全做完。所以A在提交<code>build</code>的时候就会报错</p>
<p>而且在整个项目足够大的时候，这个<code>build</code>的时间也是很影响效率的。</p>
<p>但让我将各个模块之间分开之后效果就不一样了。我修改了<code>API</code>我就只需要管我的就行，不需要整个项目进行<code>build</code>。</p>
<p>而且当有其他项目需要依赖我这个<code>API</code>的时候也只需要依赖<code>API</code>即可，不用整个项目都依赖过去。</p>
<h1 id="各个模块的作用"><a href="#各个模块的作用" class="headerlink" title="各个模块的作用"></a>各个模块的作用</h1><p>来看下这次我所分的模块。</p>
<h2 id="ROOT"><a href="#ROOT" class="headerlink" title="ROOT"></a>ROOT</h2><p>这是整个项目的根节点。<br>先看一下其中的<code>pom.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>SSM-API<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>SSM-BOOT<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>SSM-SERVICE<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>SSM-WEB<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.1.4.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">jackson.version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">jackson.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">lucene.version</span>&gt;</span>6.0.1<span class="tag">&lt;/<span class="name">lucene.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM-API<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我截取了其中比较重点的配置。</p>
<p>由于这是父节点，所以我的<code>packag</code>类型使用的是<code>pom</code>。<br>其中分别有着四个子模块。</p>
<p>其中重点看下<code>&lt;dependencyManagement&gt;</code>这个标签。<br>如果使用的是<code>IDEA</code>这个开发工具的话是可以看到如下图：<br><img src="https://ooo.0o0.ooo/2017/03/04/58b997c0232ea.jpg" alt="2.jpg"></p>
<p>标红的有一个向下的箭头，点一下就可以进入子模块中相同的依赖。<br>这样子模块就不需要配置具体的版本了，统一由父模块来进行维护，对之后的版本升级也带来了好处。</p>
<h2 id="SSM-API"><a href="#SSM-API" class="headerlink" title="SSM-API"></a>SSM-API</h2><p>接下来看下<code>API</code>这个模块：</p>
<p>通常这个模块都是用于定义外部接口的，以及改接口所依赖的一些<code>DTO类</code>。<br>一般这个模块都是拿来给其他项目进行依赖，并和本项目进行数据交互的。</p>
<h2 id="SSM-BOOT"><a href="#SSM-BOOT" class="headerlink" title="SSM-BOOT"></a>SSM-BOOT</h2><p><code>BOOT</code>这个模块比较特殊。<br>可以看到这里没有任何代码，只有一个<code>rpc</code>的配置文件。<br>通常这个模块是用于给我们内部项目进行依赖的，并不像上面的<code>API</code>模块一样给其他部门或者是项目进行依赖的。</p>
<p>因为在我们的<code>RPC</code>调用的时候，用<code>dubbo</code>来举例，是需要配置所依赖的<code>consumer</code>。</p>
<p>但如果是我们自己内部调用的话我们就可以把需要调用自己的<code>dubbo</code>服务提供者配置在这里，这样的话我们自己调用就只需要依赖这个<code>BOOT</code>就可以进行调用了。</p>
<p>哦对了，<code>BOOT</code>同时还会依赖<code>API</code>，这样才实现了只依赖<code>BOOT</code>就可以调用自己内部的<code>dubbo</code>服务了。<br>如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.crossoverJie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SSM-API<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="SSM-SERVICE"><a href="#SSM-SERVICE" class="headerlink" title="SSM-SERVICE"></a>SSM-SERVICE</h2><p><code>SERVICE</code>模块就比较好理解了。<br>是处理具体业务逻辑的地方，也是对之前的API的实现。</p>
<p>通常这也是一个<code>web</code>模块，所以我的<code>pom</code>类型是<code>WAR</code>。</p>
<h2 id="SSM-WEB"><a href="#SSM-WEB" class="headerlink" title="SSM-WEB"></a>SSM-WEB</h2><p>其实<code>WEB</code>模块和<code>SERVICE</code>模块有点重合了。通常来说这个模块一般在一个对外提供<code>http</code>访问接口的项目中。</p>
<p>这里只是为了展示项目结构，所以也写在了这里。</p>
<p>他的作用和<code>service</code>差不多，都是<code>WAR</code>的类型。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次没有实现什么特别的功能，只是对一些还没有接触过这种项目结构开发的童鞋能起到一些引导作用。</p>
<p>具体源码还请关注我的<code>github</code>。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/03/58b992d46fd02.jpg&quot; alt=&quot;互联网项目的maven.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很久没有更新博客了，之前定下周更逐渐成了月更。怎么感觉像我追过的一部动漫。&lt;br&gt;这个博文其实很早就想写了。&lt;br&gt;之前所有的代码都是在一个模块里面进行开发，这和maven的理念是完全不相符的，最近硬是抽了一个时间来对项目的结构进行了一次重构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先来看看这次重构之后的目录结构&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/03/04/58b99366edad6.jpg&quot; alt=&quot;1.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Maven" scheme="http://crossoverJie.github.io/tags/Maven/"/>
    
      <category term="重构" scheme="http://crossoverJie.github.io/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>SSM(九) 反射的实际应用 - 构建日志对象</title>
    <link href="http://crossoverJie.github.io/2017/01/19/SSM9/"/>
    <id>http://crossoverJie.github.io/2017/01/19/SSM9/</id>
    <published>2017-01-18T19:44:54.000Z</published>
    <updated>2017-05-07T04:46:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/07/590ea69c8052e.jpg" alt="构建日志对象.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相信做Java的童鞋或多或少都听过反射，这也应该是Java从入门到进阶的必经之路。</p>
<p>但是在我们的实际开发中直接使用它们的几率貌似还是比较少的，（<code>除了造轮子或者是Spring Mybatis这些框架外</code>）。</p>
<p>所以这里介绍一个在实际开发中还是小有用处的反射实例。</p>
<h1 id="传统日志"><a href="#传统日志" class="headerlink" title="传统日志"></a>传统日志</h1><p>有关反射的一些基本知识就不说了，可以自行<code>Google</code>，也可以看下<a href="http://crossoverjie.top/2016/05/10/java-reflect/" target="_blank" rel="external">反射入门</a>。</p>
<p>日志相信大家都不陌生，在实际开发中一些比较敏感的数据表我们需要对它的每一次操作都记录下来。</p>
<p>先来看看传统的写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSelective</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    Content content = <span class="keyword">new</span> Content() ;</div><div class="line">    content.setContent(<span class="string">"asdsf"</span>);</div><div class="line">    content.setCreatedate(<span class="string">"2016-12-09"</span>);</div><div class="line">    contentService.insertSelective(content) ;</div><div class="line"></div><div class="line">    ContentLog log = <span class="keyword">new</span> ContentLog();</div><div class="line">    log.setContentid(content.getContentid());</div><div class="line">    log.setContent(<span class="string">"asdsf"</span>);</div><div class="line">    log.setCreatedate(<span class="string">"2016-12-09"</span>);</div><div class="line">    contentLogService.insertSelective(log);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>非常简单，就是在保存完数据表之后再把相同的数据保存到日志表中。<br><a id="more"></a><br>但是这样有以下几个问题：</p>
<ul>
<li>如果数据表的字段较多的话，比如几百个。那么日志表的<code>setter()</code>方法就得写几百次，还得是都写对的情况下。</li>
<li>如果哪天数据表的字段发生了增加，那么每个写日志的地方都得增加该字段，提高了维护的成本。</li>
</ul>
<p>针对以上的情况就得需要反射这个主角来解决了。</p>
<h1 id="利用反射构建日志"><a href="#利用反射构建日志" class="headerlink" title="利用反射构建日志"></a>利用反射构建日志</h1><p>我们先来先来看下使用反射之后对代码所带来的改变：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertSelective2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Content content = <span class="keyword">new</span> Content();</div><div class="line">    content.setContent(<span class="string">"你好"</span>);</div><div class="line">    content.setContentname(<span class="string">"1"</span>);</div><div class="line">    content.setCreatedate(<span class="string">"2016-09-23"</span>);</div><div class="line"></div><div class="line">    contentService.insertSelective(content);</div><div class="line"></div><div class="line">    ContentLog log = <span class="keyword">new</span> ContentLog();</div><div class="line">    CommonUtil.setLogValueModelToModel(content, log);</div><div class="line">    contentLogService.insertSelective(log);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>同样的保存日志，不管多少字段，只需要三行代码即可解决。<br>而且就算之后字段发生改变写日志这段代码仍然不需要改动。</p>
<p>其实这里最主要的一个方法就是<code>CommonUtil.setLogValueModelToModel(content, log);</code></p>
<p>来看下是如何实现的;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 生成日志实体工具</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> objectFrom</div><div class="line">     * <span class="doctag">@param</span> objectTo</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLogValueModelToModel</span><span class="params">(Object objectFrom, Object objectTo)</span> </span>&#123;</div><div class="line">        Class&lt;? extends Object&gt; clazzFrom = objectFrom.getClass();</div><div class="line">        Class&lt;? extends Object&gt; clazzTo = objectTo.getClass();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Method toSetMethod : clazzTo.getMethods()) &#123;</div><div class="line">            String mName = toSetMethod.getName();</div><div class="line">            <span class="keyword">if</span> (mName.startsWith(<span class="string">"set"</span>)) &#123;</div><div class="line">                <span class="comment">//字段名</span></div><div class="line">                String field = mName.substring(<span class="number">3</span>);</div><div class="line"></div><div class="line">                <span class="comment">//获取from 值</span></div><div class="line">                Object value;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="string">"LogId"</span>.equals(field)) &#123;</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    &#125;</div><div class="line">                    Method fromGetMethod = clazzFrom.getMethod(<span class="string">"get"</span> + field);</div><div class="line">                    value = fromGetMethod.invoke(objectFrom);</div><div class="line"></div><div class="line">                    <span class="comment">//设置值</span></div><div class="line">                    toSetMethod.invoke(objectTo, value);</div><div class="line">                &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>再使用之前我们首先需要构建好主的数据表，然后<code>new</code>一个日志表的对象。</p>
<p>在<code>setLogValueModelToModel()</code>方法中：</p>
<ul>
<li>分别获得数据表和日志表对象的类类型。</li>
<li>获取到日志对象的所有方法集合。</li>
<li>遍历该集合，并拿到该方法的名称。</li>
<li>只取其中set开头的方法，也就是set方法。因为我们需要在循环中为日志对象的每一个字段赋值。 </li>
<li>之后截取方法名称获得具体的字段名称。</li>
<li>用之前截取的字段名称，通过<code>getMethod()</code>方法返回数据表中的该字段的<code>getter</code>方法。</li>
<li>相当于执行了<code>String content = content.getContent();</code></li>
<li>执行该方法获得该字段具体的值。</li>
<li>利用当前循环的<code>setter</code>方法为日志对象的每一个字段赋值。</li>
<li>相当于执行了<code>log.setContent(&quot;asdsf&quot;);</code></li>
</ul>
<p>其中字段名称为<code>LogId</code>时跳出了当前循环，因为LogId是日志表的主键，是不需要赋值的。</p>
<p>当循环结束时，日志对象也就构建完成了。之后只需要保存到数据库中即可。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>反射其实是非常耗资源的，再使用过程中还是要慎用。<br>其中对method、field、constructor等对象做缓存也是很有必要的。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea69c8052e.jpg&quot; alt=&quot;构建日志对象.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;相信做Java的童鞋或多或少都听过反射，这也应该是Java从入门到进阶的必经之路。&lt;/p&gt;
&lt;p&gt;但是在我们的实际开发中直接使用它们的几率貌似还是比较少的，（&lt;code&gt;除了造轮子或者是Spring Mybatis这些框架外&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;所以这里介绍一个在实际开发中还是小有用处的反射实例。&lt;/p&gt;
&lt;h1 id=&quot;传统日志&quot;&gt;&lt;a href=&quot;#传统日志&quot; class=&quot;headerlink&quot; title=&quot;传统日志&quot;&gt;&lt;/a&gt;传统日志&lt;/h1&gt;&lt;p&gt;有关反射的一些基本知识就不说了，可以自行&lt;code&gt;Google&lt;/code&gt;，也可以看下&lt;a href=&quot;http://crossoverjie.top/2016/05/10/java-reflect/&quot;&gt;反射入门&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;日志相信大家都不陌生，在实际开发中一些比较敏感的数据表我们需要对它的每一次操作都记录下来。&lt;/p&gt;
&lt;p&gt;先来看看传统的写法：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insertSelective&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Content content = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Content() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    content.setContent(&lt;span class=&quot;string&quot;&gt;&quot;asdsf&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    content.setCreatedate(&lt;span class=&quot;string&quot;&gt;&quot;2016-12-09&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentService.insertSelective(content) ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ContentLog log = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ContentLog();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    log.setContentid(content.getContentid());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    log.setContent(&lt;span class=&quot;string&quot;&gt;&quot;asdsf&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    log.setCreatedate(&lt;span class=&quot;string&quot;&gt;&quot;2016-12-09&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    contentLogService.insertSelective(log);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;非常简单，就是在保存完数据表之后再把相同的数据保存到日志表中。&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="Reflect" scheme="http://crossoverJie.github.io/tags/Reflect/"/>
    
  </entry>
  
  <entry>
    <title>SSM(八)动态切换数据源</title>
    <link href="http://crossoverJie.github.io/2017/01/05/SSM8/"/>
    <id>http://crossoverJie.github.io/2017/01/05/SSM8/</id>
    <published>2017-01-04T19:44:54.000Z</published>
    <updated>2017-05-07T04:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/07/590ea8fc28454.jpg" alt="SSM(八)动态切换数据源.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>在现在开发的过程中应该大多数朋友都有遇到过切换数据源的需求。比如现在常用的数据库读写分离，或者就是有两个数据库的情况，这些都需要用到切换数据源。</p>
</blockquote>
<h1 id="手动切换数据源"><a href="#手动切换数据源" class="headerlink" title="手动切换数据源"></a>手动切换数据源</h1><p>使用<code>Spring</code>的<code>AbstractRoutingDataSource</code>类来进行拓展多数据源。</p>
<p>该类就相当于一个<code>dataSource</code>的路由，用于根据<code>key</code>值来进行切换对应的<code>dataSource</code>。</p>
<p>下面简单来看下<code>AbstractRoutingDataSource</code>类的几段关键源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	<span class="keyword">return</span> determineTargetDataSource().getConnection();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">	<span class="keyword">return</span> determineTargetDataSource().getConnection(username, password);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Retrieve the current target DataSource. Determines the</div><div class="line"> * &#123;<span class="doctag">@link</span> #determineCurrentLookupKey() current lookup key&#125;, performs</div><div class="line"> * a lookup in the &#123;<span class="doctag">@link</span> #setTargetDataSources targetDataSources&#125; map,</div><div class="line"> * falls back to the specified</div><div class="line"> * &#123;<span class="doctag">@link</span> #setDefaultTargetDataSource default target DataSource&#125; if necessary.</div><div class="line"> * <span class="doctag">@see</span> #determineCurrentLookupKey()</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">	Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">"DataSource router not initialized"</span>);</div><div class="line">	Object lookupKey = determineCurrentLookupKey();</div><div class="line">	DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</div><div class="line">	<span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</div><div class="line">		dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot determine target DataSource for lookup key ["</span> + lookupKey + <span class="string">"]"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> dataSource;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Determine the current lookup key. This will typically be</div><div class="line"> * implemented to check a thread-bound transaction context.</div><div class="line"> * &lt;p&gt;Allows for arbitrary keys. The returned key needs</div><div class="line"> * to match the stored lookup key type, as resolved by the</div><div class="line"> * &#123;<span class="doctag">@link</span> #resolveSpecifiedLookupKey&#125; method.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure></p>
<p>可以看到其中获取链接的方法<code>getConnection()</code>调用的<code>determineTargetDataSource</code>则是关键方法。该方法用于返回我们使用的数据源。<br><a id="more"></a></p>
<p>其中呢又是<code>determineCurrentLookupKey()</code>方法来返回当前数据源的<code>key</code>值。<br>之后通过该key值在<code>resolvedDataSources</code>这个map中找到对应的<code>value</code>(该value就是数据源)。</p>
<p><code>resolvedDataSources</code>这个map则是在：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.targetDataSources == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Property 'targetDataSources' is required"</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.resolvedDataSources = <span class="keyword">new</span> HashMap&lt;Object, DataSource&gt;(<span class="keyword">this</span>.targetDataSources.size());</div><div class="line">	<span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; entry : <span class="keyword">this</span>.targetDataSources.entrySet()) &#123;</div><div class="line">		Object lookupKey = resolveSpecifiedLookupKey(entry.getKey());</div><div class="line">		DataSource dataSource = resolveSpecifiedDataSource(entry.getValue());</div><div class="line">		<span class="keyword">this</span>.resolvedDataSources.put(lookupKey, dataSource);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.defaultTargetDataSource != <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">this</span>.resolvedDefaultDataSource = resolveSpecifiedDataSource(<span class="keyword">this</span>.defaultTargetDataSource);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法通过<code>targetDataSources</code>这个map来进行赋值的。<code>targetDataSources</code>则是我们在配置文件中进行赋值的，下面会讲到。</p>
<p>再来看看<code>determineCurrentLookupKey()</code>方法，从<code>protected</code>来修饰就可以看出是需要我们来进行重写的。</p>
<h2 id="DynamicDataSource-和-DataSourceHolder"><a href="#DynamicDataSource-和-DataSourceHolder" class="headerlink" title="DynamicDataSource 和 DataSourceHolder"></a>DynamicDataSource 和 DataSourceHolder</h2><p>于是我新增了<code>DynamicDataSource</code>类，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> *         Date: 2017/1/2 上午12:22</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> DataSourceHolder.getDataSources();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码很简单，继承了<code>AbstractRoutingDataSource</code>类并重写了其中的<code>determineCurrentLookupKey()</code>方法。</p>
<p>这里直接用<code>DataSourceHolder</code>返回了一个数据源。</p>
<p><code>DataSourceHolder</code>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.util;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:动态数据源</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> *         Date: 2017/1/2 上午12:19</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; dataSources = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDataSources</span><span class="params">(String dataSource)</span> </span>&#123;</div><div class="line">        dataSources.set(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDataSources</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dataSources.get();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里我使用了<code>ThreadLocal</code>来保存了数据源，关于<code>ThreadLocal</code>的知识点可以查看以下这篇文章：<br><a href="http://qifuguang.me/2015/09/02/%5BJava%E5%B9%B6%E5%8F%91%E5%8C%85%E5%AD%A6%E4%B9%A0%E4%B8%83%5D%E8%A7%A3%E5%AF%86ThreadLocal/" target="_blank" rel="external">解密ThreadLocal</a></p>
<p>之后在<code>Spring</code>的配置文件中配置我们的数据源，就是上文讲到的<code>为targetDataSources赋值</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ssm1DataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 指定连接数据库的驱动 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</div><div class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ssm2DataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 指定连接数据库的驱动 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url2&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user2&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password2&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">"20"</span>/&gt;</div><div class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.util.DynamicDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ssm1DataSource"</span> <span class="attr">value-ref</span>=<span class="string">"ssm1DataSource"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"ssm2DataSource"</span> <span class="attr">value-ref</span>=<span class="string">"ssm2DataSource"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--默认数据源--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"ssm1DataSource"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这里分别配置了两个数据源：<code>ssm1DataSource</code>和<code>ssm2DataSource</code>。<br>之后再通过<code>Spring</code>的依赖注入方式将两个数据源设置进<code>targetDataSources</code>。</p>
<p>接下来的用法相比大家也应该猜到了。</p>
<blockquote>
<p>就是在每次调用数据库之前我们都要先通过<code>DataSourceHolder</code>来设置当前的数据源。看下demo：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPrimaryKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    DataSourceHolder.setDataSources(Constants.DATASOURCE_TWO);</div><div class="line">    Datasource datasource = dataSourceService.selectByPrimaryKey(<span class="number">7</span>);</div><div class="line">    System.out.println(JSON.toJSONString(datasource));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>详见我的单测。</p>
<p>使用起来也是非常简单。但是不知道大家注意到没有，这样的做法槽点很多：</p>
<ol>
<li>每次使用需要手动切换，总有一些人会忘记写(比如我)。</li>
<li>如果是后期需求变了，查询其他的表了还得一个个改回来。</li>
</ol>
<p>那有没有什么方法可以自动的帮我们切换呢？</p>
<p>肯定是有的，大家应该也想得到。就是利用<code>Spring</code>的<code>AOP</code>了。</p>
<h1 id="自动切换数据源"><a href="#自动切换数据源" class="headerlink" title="自动切换数据源"></a>自动切换数据源</h1><p>首先要定义好我们的切面类<code>DataSourceExchange</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:拦截器方法</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> chenjiec</div><div class="line"> *         Date: 2017/1/3 上午12:34</div><div class="line"> * <span class="doctag">@since</span> JDK 1.7</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceExchange</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> point</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint point)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//获取目标对象的类类型</span></div><div class="line">        Class&lt;?&gt; aClass = point.getTarget().getClass();</div><div class="line"></div><div class="line">        <span class="comment">//获取包名用于区分不同数据源</span></div><div class="line">        String whichDataSource = aClass.getName().substring(<span class="number">25</span>, aClass.getName().lastIndexOf(<span class="string">"."</span>));</div><div class="line">        <span class="keyword">if</span> (<span class="string">"ssmone"</span>.equals(whichDataSource)) &#123;</div><div class="line">            DataSourceHolder.setDataSources(Constants.DATASOURCE_ONE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            DataSourceHolder.setDataSources(Constants.DATASOURCE_TWO);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行后将数据源置为空</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">        DataSourceHolder.setDataSources(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>逻辑也比较简单，就是在执行数据库操作之前做一个切面。</p>
<ul>
<li>通过<code>JoinPoint</code>对象获取目标对象。</li>
<li>在目标对象中获取包名来区分不同的数据源。</li>
<li>根据不同数据源来进行赋值。</li>
<li>执行完毕之后将数据源清空。</li>
</ul>
<p>关于一些<code>JoinPoint</code>的API：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.aspectj.lang;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.SourceLocation;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JoinPoint</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">toString</span><span class="params">()</span></span>;         <span class="comment">//连接点所在位置的相关信息</span></div><div class="line">    <span class="function">String <span class="title">toShortString</span><span class="params">()</span></span>;     <span class="comment">//连接点所在位置的简短相关信息</span></div><div class="line">    <span class="function">String <span class="title">toLongString</span><span class="params">()</span></span>;     <span class="comment">//连接点所在位置的全部相关信息</span></div><div class="line">    <span class="function">Object <span class="title">getThis</span><span class="params">()</span></span>;         <span class="comment">//返回AOP代理对象</span></div><div class="line">    <span class="function">Object <span class="title">getTarget</span><span class="params">()</span></span>;       <span class="comment">//返回目标对象</span></div><div class="line">    Object[] getArgs();       <span class="comment">//返回被通知方法参数列表</span></div><div class="line">    <span class="function">Signature <span class="title">getSignature</span><span class="params">()</span></span>;  <span class="comment">//返回当前连接点签名</span></div><div class="line">    <span class="function">SourceLocation <span class="title">getSourceLocation</span><span class="params">()</span></span>;<span class="comment">//返回连接点方法所在类文件中的位置</span></div><div class="line">    <span class="function">String <span class="title">getKind</span><span class="params">()</span></span>;        <span class="comment">//连接点类型</span></div><div class="line">    <span class="function">StaticPart <span class="title">getStaticPart</span><span class="params">()</span></span>; <span class="comment">//返回连接点静态部分</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了通过<code>包名</code>来区分不同数据源，我将目录结构稍微调整了下：<br><img src="http://img.blog.csdn.net/20170105010819866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjE3OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="2"></p>
<p>将两个不同的数据源的实现类放到不同的包中，这样今后如果还需要新增其他数据源也可以灵活的切换。</p>
<p>看下<code>Spring</code>的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceExchange"</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.util.DataSourceExchange"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!--配置切面拦截方法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--将com.crossoverJie.service包下的所有select开头的方法加入拦截</span></div><div class="line">    去掉select则加入所有方法</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"controllerMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></div><div class="line">    execution(* com.crossoverJie.service.*.select*(..))"/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"selectMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></div><div class="line">    execution(* com.crossoverJie.dao..*Mapper.select*(..))"/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"methodCacheInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"controllerMethodPointcut"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--所有数据库操作的方法加入切面--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"dataSourceExchange"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"dataSourcePointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.crossoverJie.service.*.*(..))"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"dataSourcePointcut"</span> <span class="attr">method</span>=<span class="string">"before"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"dataSourcePointcut"</span> <span class="attr">method</span>=<span class="string">"after"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是在我们上一篇整合<a href="http://crossoverjie.top/2016/12/18/SSM7/" target="_blank" rel="external">redis缓存</a>的基础上进行修改的。<br>这样缓存和多数据源都满足了。</p>
<p>实际使用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectByPrimaryKey</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Rediscontent rediscontent = rediscontentService.selectByPrimaryKey(<span class="number">30</span>);</div><div class="line">    System.out.println(JSON.toJSONString(rediscontent));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://img.blog.csdn.net/20170105012845706?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjE3OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="3"><br>这样看起来就和使用一个数据源这样简单，再也不用关心切换的问题了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不过按照这样的写法是无法做到在一个事务里控制两个数据源的。这个我还在学习中，有相关经验的大牛不妨指点一下。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea8fc28454.jpg&quot; alt=&quot;SSM(八)动态切换数据源.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在现在开发的过程中应该大多数朋友都有遇到过切换数据源的需求。比如现在常用的数据库读写分离，或者就是有两个数据库的情况，这些都需要用到切换数据源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;手动切换数据源&quot;&gt;&lt;a href=&quot;#手动切换数据源&quot; class=&quot;headerlink&quot; title=&quot;手动切换数据源&quot;&gt;&lt;/a&gt;手动切换数据源&lt;/h1&gt;&lt;p&gt;使用&lt;code&gt;Spring&lt;/code&gt;的&lt;code&gt;AbstractRoutingDataSource&lt;/code&gt;类来进行拓展多数据源。&lt;/p&gt;
&lt;p&gt;该类就相当于一个&lt;code&gt;dataSource&lt;/code&gt;的路由，用于根据&lt;code&gt;key&lt;/code&gt;值来进行切换对应的&lt;code&gt;dataSource&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面简单来看下&lt;code&gt;AbstractRoutingDataSource&lt;/code&gt;类的几段关键源码：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Connection &lt;span class=&quot;title&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; determineTargetDataSource().getConnection();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Connection &lt;span class=&quot;title&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String username, String password)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; SQLException &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; determineTargetDataSource().getConnection(username, password);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Retrieve the current target DataSource. Determines the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #determineCurrentLookupKey() current lookup key&amp;#125;, performs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * a lookup in the &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #setTargetDataSources targetDataSources&amp;#125; map,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * falls back to the specified&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #setDefaultTargetDataSource default target DataSource&amp;#125; if necessary.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &lt;span class=&quot;doctag&quot;&gt;@see&lt;/span&gt; #determineCurrentLookupKey()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; DataSource &lt;span class=&quot;title&quot;&gt;determineTargetDataSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Assert.notNull(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.resolvedDataSources, &lt;span class=&quot;string&quot;&gt;&quot;DataSource router not initialized&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	Object lookupKey = determineCurrentLookupKey();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	DataSource dataSource = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.resolvedDataSources.get(lookupKey);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dataSource == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.lenientFallback || lookupKey == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		dataSource = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.resolvedDefaultDataSource;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (dataSource == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;string&quot;&gt;&quot;Cannot determine target DataSource for lookup key [&quot;&lt;/span&gt; + lookupKey + &lt;span class=&quot;string&quot;&gt;&quot;]&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataSource;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * Determine the current lookup key. This will typically be&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * implemented to check a thread-bound transaction context.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;lt;p&amp;gt;Allows for arbitrary keys. The returned key needs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * to match the stored lookup key type, as resolved by the&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; * &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; #resolveSpecifiedLookupKey&amp;#125; method.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt; Object &lt;span class=&quot;title&quot;&gt;determineCurrentLookupKey&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到其中获取链接的方法&lt;code&gt;getConnection()&lt;/code&gt;调用的&lt;code&gt;determineTargetDataSource&lt;/code&gt;则是关键方法。该方法用于返回我们使用的数据源。&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="AOP" scheme="http://crossoverJie.github.io/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>GoodBye 2016,Welcome 2017 | 码农砌墙记</title>
    <link href="http://crossoverJie.github.io/2016/12/31/GoodBye%202016,Welcome%202017%20%7C%20%E7%A0%81%E5%86%9C%E7%A0%8C%E5%A2%99%E8%AE%B0/"/>
    <id>http://crossoverJie.github.io/2016/12/31/GoodBye 2016,Welcome 2017 | 码农砌墙记/</id>
    <published>2016-12-31T15:35:14.000Z</published>
    <updated>2017-05-07T04:49:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><img src="https://ooo.0o0.ooo/2017/05/07/590ea6ebdbc57.jpg" alt="agenda-1928416_1920.jpg"></p>
<p>早在这个月初的时候我就很想写一篇年终总结了，因为这一年相对于去年确实是经历的太多了。<br>结果一直等到31号，在家里和媳妇吃完晚饭就马上打开电脑开码。</p>
<h1 id="五月二十三-第一次跳槽"><a href="#五月二十三-第一次跳槽" class="headerlink" title="五月二十三-第一次跳槽"></a>五月二十三-第一次跳槽</h1><blockquote>
<p><strong>根据整年的时间线开始第一件大事自然就是换公司了。</strong></p>
</blockquote>
<p>先来点前景提要:我是14年11月份参加工作的。当时其实还没有毕业就在一家给大型企业做定制软件开发的公司实习。刚开始工作的时候什么事情都觉得非常新奇，一个在学校学的东西能运用到实际开发中并能给用户带来便利让我觉得做码农真是一件非常正确的选择啊(ps当时真是太年轻)。</p>
<p>后来真是造化弄人，当时负责我参与的这个项目的负责人跳槽了，我自然就成了整个公司最熟悉此项目的人了。现在不得不佩服公司老板真是心大啊，居然让一个实习生来负责这个项目。就这样我成了整个项目的负责人，从之后的开发到测试到上线到后面的维护几乎都是我一个人在负责。<br>来一张当时上线的截图：<br><img src="https://ooo.0o0.ooo/2017/05/07/590ea72eac0e7.jpg" alt="QQ20161231-222737@2x.jpg"></p>
<p>由于这次项目的顺利验收，公司也对我越来越信任。之后也就理所当然的又负责了几个项目。<br><a id="more"></a></p>
<blockquote>
<p>虽然离开了但真的非常感谢公司当时对一个什么都不懂的新人给予信任。</p>
</blockquote>
<p>之后随着技术的提升我接触了github、v站这样的技术论坛，逐渐的发现天外有天，我这点雕虫小技真的完全不算什么，真正机遇与挑战并存的地方是互联网。</p>
<p>但是此时我已经在这家公司做了一年多了，突然离开这个舒适圈来到一个陌生的环境是需要很大勇气的，或者说需要一个刺激点。</p>
<p>正好<a href="http://tengj.top" target="_blank" rel="external">@嘟爷</a>成了这个导火索。那个时候我正在搭我的个人博客正好看到了他的文章，觉得写得非常好。而且正好他也正准备转向互联网，于是我给他写了一封很长的邮件说了我心中的一些疑惑与顾虑让他给点建议。</p>
<p>在他的建议之下我才开始投递简历准备换一家互联网公司，感谢嘟爷给了我一个这么正确的建议。</p>
<p>之后我顺利的进入了一个创业公司，开始了<code>狭义</code>的互联网开发道路，为什么是狭义请接着往后看。</p>
<h1 id="搭建个人博客"><a href="#搭建个人博客" class="headerlink" title="搭建个人博客"></a>搭建个人博客</h1><blockquote>
<p>搭建博客这事也是必须的拿出来说一说的。</p>
</blockquote>
<p>上面说到我看了嘟爷的博客才开始搭建自己的博客，到现在为止由于我的拖延症(<code>加上是真的懒</code>)一共写了20篇。不能说写的有多好，但确实是我在工作和学习中的一些总结。</p>
<p>让我意外的是我博客的访问量，下图是我<code>cnzz</code>的统计截图：<br><img src="http://img.blog.csdn.net/20161231225404369?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjE3OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="2"></p>
<h1 id="六月二十一-开源项目"><a href="#六月二十一-开源项目" class="headerlink" title="六月二十一-开源项目"></a>六月二十一-开源项目</h1><p>关于开源项目，之前我在<code>github</code>上面看很多优秀的开源项目，也很佩服那些作者，于是就想着自己能不能也搞一个，但是一来就造个轮子对我来说确实有点不现实。</p>
<p>于是我换了一个思路，由于现在我勉强也不算是新入门的菜鸟了，但我是从菜鸟过来的，深知刚开始的时候找资料的痛苦。不是资料太老就是没有体系，讲一点是一点的那种。</p>
<p>于是就有了现在这个项目:<br><code>会不定期更新一些在实际开发中使用的技巧(ps:目前不是很忙基本上一周一更)。 没有复杂的业务流程，更不是XXXX系统，只有一些技术的分享。</code></p>
<p>从六月二十一号到现在还是有100多颗星了：<br><img src="http://img.blog.csdn.net/20161231230128550?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjE3OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="3"></p>
<h1 id="九月二十三-第二次跳槽"><a href="#九月二十三-第二次跳槽" class="headerlink" title="九月二十三-第二次跳槽"></a>九月二十三-第二次跳槽</h1><p>看到这里是不是觉得我有病啊，怎么又是跳槽。。。</p>
<p>其实我也不想，我在上面说到开始了我的<code>狭义</code>互联网开发，为什么是狭义呢？</p>
<p>因为做了一段时间才发现这个项目除了是部署在云服务器上和有一个微信端之外和我之前所做的项目貌似没有本质上的区别，还是一个管理系统。</p>
<p>这里我不评价公司的业务，但是公司的技术总监在修改问题的时候是直接在云服务器上登陆数据库删除数据，会不会觉得很奇葩。最奇葩的是删除的时候忘了写<code>where</code>条件导致把整张表的数据都删了，这个时候如果是你你会不会怀疑那啥。。</p>
<p>除此之外技术总监本人还是挺好的，不过我更觉得他适合做销售总监。</p>
<p>加上后来公司的业务没有发展起来，所做的系统又老是出问题(联想上文)，加上还在流传我们技术部要裁人。那我还不如自己走(现在V站逛多了突然觉得好亏)。</p>
<p>于是我开始了我的第二次跳槽，前后时间才间隔4个月，不得不感慨命运弄人啊。</p>
<p>之后我来到现在这家员工5000余人的真正的互联网公司，开始了真正意义的互联网开发。这里必须得感谢我的面试官也是我现在这个项目的leader，给了我这个互联网菜鸟机会。</p>
<p>不过命运总是如此的相识，明年也就是下周他就换部门了，意味着现在这个项目我又成<code>负责人</code>了。希望一切顺利吧。</p>
<h1 id="技术相关"><a href="#技术相关" class="headerlink" title="技术相关"></a>技术相关</h1><p>前面说到我是九月份的时候才进入这家正真意义的互联网公司的，所以体术提升最明显也是在这段时间。</p>
<p>这段时间所学的起码是我在前面两家公司一年都学不到的，这里我大致列了一下：</p>
<ul>
<li>熟悉了一个互联网产品的生命周期(关于开发、测试、预发布、灰度以及上线)</li>
<li>熟悉了一些关于<code>并发</code>、<code>主从</code>、<code>缓存</code>、<code>调度</code>、<code>容器</code>这些主流的技术。</li>
<li>最重要的一点，学会了不加班不舒服斯基。</li>
</ul>
<h1 id="身体相关"><a href="#身体相关" class="headerlink" title="身体相关"></a>身体相关</h1><p>不知是错觉还是什么，感觉今年看到<code>IT</code>行业猝死或者是出事的新闻越来越多，加上我这个今年才22岁的青年有时候也会腰疼脖子酸，导致我对于身体也是越来越担忧。</p>
<p>其实我从初中的时候就开始打篮球，在工作之前也是对篮球完全是痴迷的状态，每天不打球就浑身难受。刚工作的那段时间还能坚持每周末去打球，但是今年能做到一个月打一次都非常难得了。。</p>
<p>再此，我立个<code>flag</code>，明天下午出去打球，明年坚持至少每两周打一次球。</p>
<h1 id="2017小目标"><a href="#2017小目标" class="headerlink" title="2017小目标"></a>2017小目标</h1><p>到这里也基本上总结的差不多了，还有半个小时就是17年了。</p>
<p>还是定一个17年的小目标吧：</p>
<blockquote>
<ul>
<li>博客坚持写，至少保持两周一更。</li>
<li>开源项目坚持维护，争取造一个轮子出来。</li>
<li>坚持锻炼，我还得养家糊口。</li>
<li>最后希望家人朋友都平平安安。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea6ebdbc57.jpg&quot; alt=&quot;agenda-1928416_1920.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;早在这个月初的时候我就很想写一篇年终总结了，因为这一年相对于去年确实是经历的太多了。&lt;br&gt;结果一直等到31号，在家里和媳妇吃完晚饭就马上打开电脑开码。&lt;/p&gt;
&lt;h1 id=&quot;五月二十三-第一次跳槽&quot;&gt;&lt;a href=&quot;#五月二十三-第一次跳槽&quot; class=&quot;headerlink&quot; title=&quot;五月二十三-第一次跳槽&quot;&gt;&lt;/a&gt;五月二十三-第一次跳槽&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;根据整年的时间线开始第一件大事自然就是换公司了。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先来点前景提要:我是14年11月份参加工作的。当时其实还没有毕业就在一家给大型企业做定制软件开发的公司实习。刚开始工作的时候什么事情都觉得非常新奇，一个在学校学的东西能运用到实际开发中并能给用户带来便利让我觉得做码农真是一件非常正确的选择啊(ps当时真是太年轻)。&lt;/p&gt;
&lt;p&gt;后来真是造化弄人，当时负责我参与的这个项目的负责人跳槽了，我自然就成了整个公司最熟悉此项目的人了。现在不得不佩服公司老板真是心大啊，居然让一个实习生来负责这个项目。就这样我成了整个项目的负责人，从之后的开发到测试到上线到后面的维护几乎都是我一个人在负责。&lt;br&gt;来一张当时上线的截图：&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea72eac0e7.jpg&quot; alt=&quot;QQ20161231-222737@2x.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于这次项目的顺利验收，公司也对我越来越信任。之后也就理所当然的又负责了几个项目。&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://crossoverJie.github.io/categories/blog/"/>
    
    
      <category term="总结" scheme="http://crossoverJie.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>SSM(七)在JavaWeb应用中使用Redis</title>
    <link href="http://crossoverJie.github.io/2016/12/18/SSM7/"/>
    <id>http://crossoverJie.github.io/2016/12/18/SSM7/</id>
    <published>2016-12-18T05:44:54.000Z</published>
    <updated>2017-05-07T04:49:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/07/590ea75de0d84.jpg" alt="redis封面.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于最近换(mang)了(de)家(yi)公(bi)司接触了新的东西所以很久没有更新了。<br>这次谈谈Redis，关于<code>Redis</code>应该很多朋友就算没有用过也听过，算是这几年最流行的<code>NoSql</code>之一了。<br><code>Redis</code>的应用场景非常多这里就不一一列举了，这次就以一个最简单的也最常用的 <strong>缓存数据</strong> 来举例。<br>先来看一张效果图：</p>
<p><img src="https://dn-mhke0kuv.qbox.me/6ea54b0dca15c3628c9f.gif" alt="01.gif"><br><a id="more"></a><br>作用就是在每次查询接口的时候首先判断<code>Redis</code>中是否有缓存，有的话就读取，没有就查询数据库并保存到<code>Redis</code>中，下次再查询的话就会直接从缓存中读取了。<br><code>Redis</code>中的结果：<br><img src="https://dn-mhke0kuv.qbox.me/7d31e66e85cf06538085.gif" alt="02.gif"><br>之后查询redis发现确实是存进来了。</p>
<h1 id="Redis安装与使用"><a href="#Redis安装与使用" class="headerlink" title="Redis安装与使用"></a>Redis安装与使用</h1><p>首先第一步自然是安装<code>Redis</code>。我是在我<code>VPS</code>上进行安装的，操作系统是<code>CentOS6.5</code>。</p>
<ul>
<li><p>下载Redis<a href="https://redis.io/download" target="_blank" rel="external">https://redis.io/download</a>，我机器上安装的是<code>3.2.5</code></p>
</li>
<li><p>将下载下来的’reidis-3.2.5-tar.gz’上传到<code>usr/local</code>这个目录进行解压。</p>
</li>
<li><p>进入该目录。<br><img src="http://img.blog.csdn.net/20161218204129539?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMTg2NjE3OTM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="03.jpg"></p>
</li>
<li><p>编译安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>redis.conf</code>配置文件。</p>
</li>
</ul>
<p>这里我只是简单的加上密码而已。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi redis.conf</div><div class="line">requirepass 你的密码</div></pre></td></tr></table></figure></p>
<ul>
<li>启动Redis</li>
</ul>
<p>启动时候要选择我们之前修改的配置文件才能使配置文件生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">进入src目录</div><div class="line">cd /usr/local/redis-3.2.5/src</div><div class="line">启动服务</div><div class="line">./redis-server ../redis.conf</div></pre></td></tr></table></figure></p>
<ul>
<li>登陆redis<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./redis-cli -a 你的密码</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="Spring整合Redis"><a href="#Spring整合Redis" class="headerlink" title="Spring整合Redis"></a>Spring整合Redis</h1><p>这里我就直接开始用Spring整合毕竟在实际使用中都是和<code>Spring</code>一起使用的。</p>
<ul>
<li>修改<code>Spring</code>配置文件<br>加入以下内容：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jedis 配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWait&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- redis服务器中心 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.host&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.password&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.timeout&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- cache配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"methodCacheInterceptor"</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.intercept.MethodCacheInterceptor"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redisUtil"</span> <span class="attr">ref</span>=<span class="string">"redisUtil"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisUtil"</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.util.RedisUtil"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redisTemplate"</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--配置切面拦截方法 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--将com.crossoverJie.service包下的所有select开头的方法加入拦截</span></div><div class="line">        去掉select则加入所有方法w</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"controllerMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></div><div class="line">        execution(* com.crossoverJie.service.*.select*(..))"/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"selectMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></div><div class="line">        execution(* com.crossoverJie.dao..*Mapper.select*(..))"/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"methodCacheInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"controllerMethodPointcut"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div><div class="line">``` </div><div class="line">更多的配置可以直接在源码里面查看：[https://github.com/crossoverJie/SSM/blob/master/src/main/resources/spring-mybatis.xml](https://github.com/crossoverJie/SSM/blob/master/src/main/resources/spring-mybatis.xml)。</div><div class="line">以上都写有注释，也都是一些简单的配置相信都能看懂。</div><div class="line">下面我会着重说下如何配置缓存的。</div><div class="line"></div><div class="line"># Spring切面使用缓存</div><div class="line">Spring的`AOP`真是是一个好东西，还不太清楚是什么的同学建议先自行`Google`下吧。</div><div class="line">在不使用切面的时候如果我们想给某个方法加入缓存的话肯定是在方法返回之前就要加入相应的逻辑判断，只有一个或几个倒还好，如果有几十上百个的话那GG了，而且维护起来也特别麻烦。</div><div class="line">&gt; 好在Spring的AOP可以帮我们解决这个问题。</div><div class="line">&gt; 这次就在我们需要加入缓存方法的切面加入这个逻辑，并且只需要一个配置即可搞定，就是上文中所提到的配置文件，如下：</div><div class="line"></div><div class="line">```xml</div><div class="line">    <span class="comment">&lt;!--配置切面拦截方法 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--将com.crossoverJie.service包下的所有select开头的方法加入拦截</span></div><div class="line">        去掉select则加入所有方法w</div><div class="line">        --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"controllerMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></div><div class="line">        execution(* com.crossoverJie.service.*.select*(..))"/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"selectMethodPointcut"</span> <span class="attr">expression</span>=<span class="string">"</span></span></div><div class="line">        execution(* com.crossoverJie.dao..*Mapper.select*(..))"/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"methodCacheInterceptor"</span> <span class="attr">pointcut-ref</span>=<span class="string">"controllerMethodPointcut"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里我们使用表达式<code>execution(* com.crossoverJie.service.*.select*(..))</code>来拦截<code>service</code>中所有以<code>select</code>开头的方法。这样只要我们要将加入的缓存的方法以select命名开头的话每次进入方法之前都会进入我们自定义的<code>MethodCacheInterceptor</code>拦截器。<br>这里贴一下<code>MethodCacheInterceptor</code>中处理逻辑的核心方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object value = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        String targetName = invocation.getThis().getClass().getName();</div><div class="line">        String methodName = invocation.getMethod().getName();</div><div class="line">        <span class="comment">// 不需要缓存的内容</span></div><div class="line">        <span class="comment">//if (!isAddCache(StringUtil.subStrForLastDot(targetName), methodName)) &#123;</span></div><div class="line">        <span class="keyword">if</span> (!isAddCache(targetName, methodName)) &#123;</div><div class="line">            <span class="comment">// 执行方法返回结果</span></div><div class="line">            <span class="keyword">return</span> invocation.proceed();</div><div class="line">        &#125;</div><div class="line">        Object[] arguments = invocation.getArguments();</div><div class="line">        String key = getCacheKey(targetName, methodName, arguments);</div><div class="line">        logger.debug(<span class="string">"redisKey: "</span> + key);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 判断是否有缓存</span></div><div class="line">            <span class="keyword">if</span> (redisUtil.exists(key)) &#123;</div><div class="line">                <span class="keyword">return</span> redisUtil.get(key);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 写入缓存</span></div><div class="line">            value = invocation.proceed();</div><div class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> String tkey = key;</div><div class="line">                <span class="keyword">final</span> Object tvalue = value;</div><div class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (tkey.startsWith(<span class="string">"com.service.impl.xxxRecordManager"</span>)) &#123;</div><div class="line">                            redisUtil.set(tkey, tvalue, xxxRecordManagerTime);</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tkey.startsWith(<span class="string">"com.service.impl.xxxSetRecordManager"</span>)) &#123;</div><div class="line">                            redisUtil.set(tkey, tvalue, xxxSetRecordManagerTime);</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            redisUtil.set(tkey, tvalue, defaultCacheExpireTime);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> invocation.proceed();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>先是查看了当前方法是否在我们自定义的方法中，如果不是的话就直接返回，不进入拦截器。</li>
<li>之后利用反射获取的类名、方法名、参数生成<code>redis</code>的<code>key</code>。</li>
<li>用key在redis中查询是否已经有缓存。</li>
<li>有缓存就直接返回缓存内容，不再继续查询数据库。</li>
<li>如果没有缓存就查询数据库并将返回信息加入到redis中。</li>
</ul>
<h2 id="使用PageHelper"><a href="#使用PageHelper" class="headerlink" title="使用PageHelper"></a>使用PageHelper</h2><p>这次为了分页方便使用了比较流行的<code>PageHelper</code>来帮我们更简单的进行分页。<br>首先是新增一个mybatis的配置文件<code>mybatis-config</code>：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE configuration</span></div><div class="line">        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</div><div class="line">        "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageHelper"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dialect"</span> <span class="attr">value</span>=<span class="string">"mysql"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 该参数默认为false --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 和startPage中的pageNum效果一样 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"offsetAsPageNum"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 该参数默认为false --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 设置为true时，使用RowBounds分页会进行count查询 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rowBoundsWithCount"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） &lt;property name="pageSizeZero" value="true"/&gt; --&gt;</span></div><div class="line"></div><div class="line">            <span class="comment">&lt;!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 --&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 不理解该含义的前提下，不要随便复制该配置 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"params"</span> <span class="attr">value</span>=<span class="string">"pageNum=start;pageSize=limit;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着在mybatis的配置文件中引入次配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--加入PageHelper--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着在service方法中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> PageEntity&lt;Rediscontent&gt; <span class="title">selectByPage</span><span class="params">(Integer pageNum, Integer pageSize)</span> </span>&#123;</div><div class="line">    PageHelper.startPage(pageNum, pageSize);</div><div class="line">    <span class="comment">//因为是demo，所以这里默认没有查询条件。</span></div><div class="line">    List&lt;Rediscontent&gt; rediscontents = rediscontentMapper.selectByExample(<span class="keyword">new</span> RediscontentExample());</div><div class="line">    PageEntity&lt;Rediscontent&gt; rediscontentPageEntity = <span class="keyword">new</span> PageEntity&lt;Rediscontent&gt;();</div><div class="line">    rediscontentPageEntity.setList(rediscontents);</div><div class="line">    <span class="keyword">int</span> size = rediscontentMapper.selectByExample(<span class="keyword">new</span> RediscontentExample()).size();</div><div class="line">    rediscontentPageEntity.setCount(size);</div><div class="line">    <span class="keyword">return</span> rediscontentPageEntity;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只需要使用<code>PageHelper.startPage(pageNum, pageSize);</code>方法就可以帮我们简单的分页了。<br>这里我自定义了一个分页工具类<code>PageEntity</code>来更方便的帮我们在之后生成<code>JSON</code>数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 分页实体</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageEntity</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;T&gt; list;<span class="comment">// 分页后的数据</span></div><div class="line">    <span class="keyword">private</span> Integer count;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(Integer count)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.count = count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>更多<code>PageHelper</code>的使用请查看一下链接：<br><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="external">https://github.com/pagehelper/Mybatis-PageHelper</a></p>
<h1 id="前端联调"><a href="#前端联调" class="headerlink" title="前端联调"></a>前端联调</h1><p>接下来看下控制层<code>RedisController</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.Rediscontent;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.RediscontentService;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.util.CommonUtil;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.util.PageEntity;</div><div class="line"><span class="keyword">import</span> com.github.pagehelper.PageHelper;</div><div class="line"><span class="keyword">import</span> net.sf.json.JSONArray;</div><div class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/redis"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RedisController.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RediscontentService rediscontentService;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/redis_list"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">club_list</span><span class="params">(HttpServletResponse response,</span></span></div><div class="line">                          @RequestParam(value = <span class="string">"page"</span>, defaultValue = <span class="string">"0"</span>) <span class="keyword">int</span> page,</div><div class="line">                          @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"pageSize"</span>, defaultValue = <span class="string">"0"</span>)</span> <span class="keyword">int</span> pageSize) &#123;</div><div class="line">        JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</div><div class="line">        JSONObject jo = <span class="keyword">new</span> JSONObject();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            JSONArray ja = <span class="keyword">new</span> JSONArray();</div><div class="line">            PageHelper.startPage(<span class="number">1</span>, <span class="number">10</span>);</div><div class="line">            PageEntity&lt;Rediscontent&gt; rediscontentPageEntity = rediscontentService.selectByPage(page, pageSize);</div><div class="line">            <span class="keyword">for</span> (Rediscontent rediscontent : rediscontentPageEntity.getList()) &#123;</div><div class="line">                JSONObject jo1 = <span class="keyword">new</span> JSONObject();</div><div class="line">                jo1.put(<span class="string">"rediscontent"</span>, rediscontent);</div><div class="line">                ja.add(jo1);</div><div class="line">            &#125;</div><div class="line">            jo.put(<span class="string">"redisContents"</span>, ja);</div><div class="line">            jo.put(<span class="string">"count"</span>, rediscontentPageEntity.getCount());</div><div class="line">            jsonObject = CommonUtil.parseJson(<span class="string">"1"</span>, <span class="string">"成功"</span>, jo);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            jsonObject = CommonUtil.parseJson(<span class="string">"2"</span>, <span class="string">"操作异常"</span>, <span class="string">""</span>);</div><div class="line">            logger.error(e.getMessage(), e);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//构建返回</span></div><div class="line">        CommonUtil.responseBuildJson(response, jsonObject);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里就不做过多解释了，就是从redis或者是service中查询出数据并返回。</p>
<p>前端的显示界面在<a href="https://github.com/crossoverJie/SSM/blob/master/src/main/webapp/redis/showRedis.jsp" target="_blank" rel="external">https://github.com/crossoverJie/SSM/blob/master/src/main/webapp/redis/showRedis.jsp</a>中(并不是前端，将就看)。<br>其中核心的<code>redis_list.js</code>的代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page = <span class="number">1</span>,</div><div class="line">    rows = <span class="number">10</span>;</div><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    initJqPaginator();</div><div class="line">    <span class="comment">//加载</span></div><div class="line">    load_redis_list();</div><div class="line">    $(<span class="string">".query_but"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//查询按钮</span></div><div class="line">        page = <span class="number">1</span>;</div><div class="line">        load_redis_list();</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//初始化分页</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initJqPaginator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $.jqPaginator(<span class="string">'#pagination'</span>, &#123;</div><div class="line">        <span class="attr">totalPages</span>: <span class="number">100</span>,</div><div class="line">        <span class="attr">visiblePages</span>: <span class="number">10</span>,</div><div class="line">        <span class="attr">currentPage</span>: <span class="number">1</span>,</div><div class="line">        <span class="attr">first</span>: <span class="string">'&lt;li class="prev"&gt;&lt;a href="javascript:;"&gt;首页&lt;/a&gt;&lt;/li&gt;'</span>,</div><div class="line">        <span class="attr">last</span>: <span class="string">'&lt;li class="prev"&gt;&lt;a href="javascript:;"&gt;末页&lt;/a&gt;&lt;/li&gt;'</span>,</div><div class="line">        <span class="attr">prev</span>: <span class="string">'&lt;li class="prev"&gt;&lt;a href="javascript:;"&gt;上一页&lt;/a&gt;&lt;/li&gt;'</span>,</div><div class="line">        <span class="attr">next</span>: <span class="string">'&lt;li class="next"&gt;&lt;a href="javascript:;"&gt;下一页&lt;/a&gt;&lt;/li&gt;'</span>,</div><div class="line">        <span class="attr">page</span>: <span class="string">'&lt;li class="page"&gt;&lt;a href="javascript:;"&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt;'</span>,</div><div class="line">        <span class="attr">onPageChange</span>: <span class="function"><span class="keyword">function</span> (<span class="params">num, type</span>) </span>&#123;</div><div class="line">            page = num;</div><div class="line">            <span class="keyword">if</span> (type == <span class="string">"change"</span>) &#123;</div><div class="line">                load_redis_list();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//列表</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_club_list</span>(<span class="params">redisContens</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> phone = <span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> html = <span class="string">'&lt;div class="product_box"&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="br"&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_link"&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_phc"&gt;'</span></div><div class="line">        + <span class="string">'&lt;img class="phc" src="" &gt;'</span></div><div class="line">        + <span class="string">'&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;span class="product_name"&gt;'</span> + redisContens.id + <span class="string">'&lt;/span&gt;&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_link toto"&gt;'</span> + redisContens.content + <span class="string">'&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_link toto"&gt;'</span></div><div class="line">        + <span class="string">'&lt;span&gt;'</span> + <span class="string">""</span> + <span class="string">'&lt;/span&gt;'</span></div><div class="line">        + <span class="string">'&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_link toto"&gt;'</span></div><div class="line">        + <span class="string">'&lt;span&gt;'</span> + phone + <span class="string">'&lt;/span&gt;&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_link toto"&gt;'</span></div><div class="line">        + <span class="string">'&lt;span&gt;'</span> + <span class="number">0</span> + <span class="string">'&lt;/span&gt;&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;div class="product_link toto product_operation"&gt;'</span></div><div class="line">        + <span class="string">'&lt;span onclick="edit_club('</span> + <span class="number">0</span> + <span class="string">')"&gt;编辑&lt;/span&gt;'</span></div><div class="line">        + <span class="string">'&lt;span onclick="edit_del('</span> + <span class="number">0</span> + <span class="string">')"&gt;删除&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;'</span></div><div class="line">        + <span class="string">'&lt;/div&gt;'</span>;</div><div class="line">    <span class="keyword">return</span> html;</div><div class="line">&#125;</div><div class="line"><span class="comment">//加载列表</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_redis_list</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> name = $(<span class="string">"#name"</span>).val();</div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">url</span>: getPath() + <span class="string">'/redis/redis_list'</span>,</div><div class="line">        <span class="attr">async</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">data</span>: &#123;<span class="attr">name</span>: name, <span class="attr">page</span>: page, <span class="attr">pageSize</span>: rows&#125;,</div><div class="line">        <span class="attr">datatype</span>: <span class="string">'json'</span>,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (data.result == <span class="number">1</span>) &#123;</div><div class="line">                $(<span class="string">".product_length_number"</span>).html(data.data.count);</div><div class="line">                <span class="keyword">var</span> html = <span class="string">""</span>;</div><div class="line">                <span class="keyword">var</span> count = data.data.count;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.data.redisContents.length; i++) &#123;</div><div class="line">                    <span class="keyword">var</span> redisContent = data.data.redisContents[i];</div><div class="line">                    html += create_club_list(redisContent.rediscontent);</div><div class="line">                &#125;</div><div class="line">                $(<span class="string">".product_content"</span>).html(html);</div><div class="line">                <span class="comment">//这里是分页的插件</span></div><div class="line">                $(<span class="string">'#pagination'</span>).jqPaginator(<span class="string">'option'</span>, &#123;</div><div class="line">                    <span class="attr">totalPages</span>: (<span class="built_in">Math</span>.ceil(count / rows) &lt; <span class="number">1</span> ? <span class="number">1</span> : <span class="built_in">Math</span>.ceil(count / rows)),</div><div class="line">                    <span class="attr">currentPage</span>: page</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                alert(data.msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    $(<span class="string">".product_box:even"</span>).css(<span class="string">"background"</span>, <span class="string">"#e6e6e6"</span>);<span class="comment">//隔行变色</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实就是一个简单的请求接口，并根据返回数据动态生成<code>Dom</code>而已。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是一个简单的<code>redis</code>的应用。<br>redis的应用场景还非常的多，比如现在我所在做的一个项目就有用来处理短信验证码的业务场景，之后有时间可以写一个demo。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea75de0d84.jpg&quot; alt=&quot;redis封面.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;由于最近换(mang)了(de)家(yi)公(bi)司接触了新的东西所以很久没有更新了。&lt;br&gt;这次谈谈Redis，关于&lt;code&gt;Redis&lt;/code&gt;应该很多朋友就算没有用过也听过，算是这几年最流行的&lt;code&gt;NoSql&lt;/code&gt;之一了。&lt;br&gt;&lt;code&gt;Redis&lt;/code&gt;的应用场景非常多这里就不一一列举了，这次就以一个最简单的也最常用的 &lt;strong&gt;缓存数据&lt;/strong&gt; 来举例。&lt;br&gt;先来看一张效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dn-mhke0kuv.qbox.me/6ea54b0dca15c3628c9f.gif&quot; alt=&quot;01.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="Redis" scheme="http://crossoverJie.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>SSM(六)跨域传输</title>
    <link href="http://crossoverJie.github.io/2016/10/18/SSM6/"/>
    <id>http://crossoverJie.github.io/2016/10/18/SSM6/</id>
    <published>2016-10-18T05:44:54.000Z</published>
    <updated>2017-05-07T04:51:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/07/590ea7bd9ef94.jpg" alt="跨域.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知大家在平时的开发过程中有没有遇到过跨域访问资源的问题，我不巧在上周就碰到一个这样的问题，幸运的是在公司前端同学的帮忙下解决了该问题。</p>
<h2 id="什么是跨域问题？"><a href="#什么是跨域问题？" class="headerlink" title="什么是跨域问题？"></a>什么是跨域问题？</h2><ol>
<li>只要协议、域名、端口有任何一个不同，都被当作是不同的域</li>
<li>只要是在不同域中是无法进行通信的。</li>
</ol>
<a id="more"></a>
<p>基于以上的的出发点，我们又有跨域共享资源的需求(<code>譬如现在流行的前后端分离之后分别部署的情况</code>)，本文所采用的解决办法是<code>JSONP</code>，说到<code>JSONP</code>就会首先想到<code>JSON</code>。虽然只有一字之差但意义却完全不一样，首先科普一下<code>JSON</code>。</p>
<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><blockquote>
<p>其实现在<code>JSON</code>已经是相当流行了，只要涉及到前后端的数据交互大都都是采用的JSON(不管是web还是android和IOS)，所以我这里就举一个例子，就算是没有用过的同学也能很快明白其中的意思。</p>
</blockquote>
<h2 id="PostMan"><a href="#PostMan" class="headerlink" title="PostMan"></a>PostMan</h2><p>首先给大家安利一款后端开发的利器<code>PostMan</code>,可以用于模拟几乎所有的<code>HTTP</code>请求，在开发阶段调试后端接口非常有用。<br>这是一个Chrome插件，可以直接在google商店搜索直接下载(当然前提你懂得)。<br>之后界面就如下：<br><img src="http://img.blog.csdn.net/20161018003136470" alt="2">。<br>界面非常简洁，有点开发经验的童鞋应该都会使用，不太会用的直接google下就可以了比较简单。<br>接着我们就可以利用<code>PostMan</code>来发起一次请求获取<code>JSON</code>了。这里以我<code>SSM</code>项目为例,也正好有暴露一个JSON的接口。地址如下:<br><a href="http://www.crossoverjie.top/SSM/content_load" target="_blank" rel="external">http://www.crossoverjie.top/SSM/content_load</a>。<br>直接在<code>POSTMAN</code>中的地址栏输入该地址，采用<code>GET</code>的方式请求，之后所返回的就是JSON格式的字符串。<br>由于<code>Javascript</code>原生的就支持JSON，所以解析起来非常方便。</p>
<h1 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h1><p>好了，终于可以谈谈<code>JSONP</code>了。之前说道<code>JSONP</code>是用来解决跨域问题的，那么他是如何解决的呢。<br>经过我们开发界的前辈们发现，HTML中拥有<code>SRC</code>属性的标签都不受跨域的影响，比如：<code>&lt;script&gt;、&lt;img&gt;、&lt;iframe&gt;</code>标签。<br>由于JS原生支持JSON的解析，于是我们采用<code>&lt;script&gt;</code>的方式来处理跨域解析，代码如下一看就明白。<br>web端:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">type</span>: <span class="string">"get"</span>,</div><div class="line">                <span class="attr">async</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">url</span>: <span class="string">"http://www.crossoverjie.top/SSM/jsonpInfo?callback=getUser&amp;userId=3"</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">"jsonp"</span>,</div><div class="line">                <span class="attr">jsonp</span>: <span class="string">"callback"</span>,<span class="comment">//一般默认为:callback</span></div><div class="line">                jsonpCallback:<span class="string">"getUser"</span>,<span class="comment">//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写"?"，jQuery会自动为你处理数据</span></div><div class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</div><div class="line">                    <span class="comment">/**</span></div><div class="line">                     * 获得服务器返回的信息。</div><div class="line">                     * 可以做具体的业务处理。</div><div class="line">                     */</div><div class="line">                    alert(<span class="string">'用户信息：ID： '</span> + json.userId + <span class="string">' ，姓名： '</span> + json.username + <span class="string">'。'</span>);</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    alert(<span class="string">'fail'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">oncontextmenu</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其中我们采用了JQuery给我封装好的函数，这样就可以自动帮我们解析了。<br>首先我们来看下代码中的<a href="http://www.crossoverjie.top/SSM/jsonpInfo?callback=getUser&amp;userId=3" target="_blank" rel="external">http://www.crossoverjie.top/SSM/jsonpInfo?callback=getUser&amp;userId=3</a>这个地址返回的是什么内容，还是放到<code>POSTMAN</code>中执行如下：<br><img src="http://img.blog.csdn.net/20161018005211291" alt="3">。<br>可以看到我们所传递的<code>callback</code>参数带着查询的数据又原封不动的返回给我们了，这样的话即使我们不使用<code>JQuery</code>给我封装好的函数，我们自定义一个和<code>callback</code>名称一样的函数一样是可以解析其中的数据的，只是<code>Jquery</code>帮我们做了而已。</p>
<p>前端没问题了，那么后端又是如何实现的呢？也很简单，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/jsonpInfo"</span>,method = &#123; RequestMethod.GET &#125;)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">jsonpInfo</span><span class="params">(String callback,Integer userId)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    User user = userService.getUserById(userId);</div><div class="line">    JSONPObject jsonpObject = <span class="keyword">new</span> JSONPObject(callback,user) ;</div><div class="line">    <span class="keyword">return</span> jsonpObject ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>后端采用了<code>jackson</code>中的<code>JSONPObject</code>这个类的一个构造方法，只需要将<code>callback</code>字段和需要转成<code>JSON</code>字符串的对象放进去即可。<br>需要主要的是需要使用<code>@ResponseBody</code>注解才能成功返回。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实网上还有其他的方法来处理跨域问题，不过我觉得这样的方式最为简单。同样JSONP也是有缺点的，比如：只支持<code>GET</code>方式的HTTP请求。<br>以上代码依然在博主的<a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">SSM</a>项目中，如有需要可以直接<code>FORK</code>。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a></p>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea7bd9ef94.jpg&quot; alt=&quot;跨域.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;不知大家在平时的开发过程中有没有遇到过跨域访问资源的问题，我不巧在上周就碰到一个这样的问题，幸运的是在公司前端同学的帮忙下解决了该问题。&lt;/p&gt;
&lt;h2 id=&quot;什么是跨域问题？&quot;&gt;&lt;a href=&quot;#什么是跨域问题？&quot; class=&quot;headerlink&quot; title=&quot;什么是跨域问题？&quot;&gt;&lt;/a&gt;什么是跨域问题？&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;只要协议、域名、端口有任何一个不同，都被当作是不同的域&lt;/li&gt;
&lt;li&gt;只要是在不同域中是无法进行通信的。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="JSONP" scheme="http://crossoverJie.github.io/tags/JSONP/"/>
    
      <category term="JSON" scheme="http://crossoverJie.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Linux（二）服务器运行环境配置</title>
    <link href="http://crossoverJie.github.io/2016/09/20/Linux-normal2/"/>
    <id>http://crossoverJie.github.io/2016/09/20/Linux-normal2/</id>
    <published>2016-09-20T11:45:17.000Z</published>
    <updated>2017-05-07T04:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ooo.0o0.ooo/2017/05/07/590ea8312b227.jpg" alt="linux2.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Linux相信对大多数程序员来说都不陌生，毕竟在服务器端依然还是霸主地位而且丝毫没有退居二线的意思，以至于现在几乎每一个软件开发的相关人员都得或多或少的知道一些Linux的相关内容，本文将介绍如何在刚拿到一台云服务器(采用<code>centos</code>)来进行运行环境的搭建，包括<code>JDK</code>、<code>Mysql</code>、<code>Tomcat</code>以及<code>nginx</code>。相信对于小白来说很有必要的，也是我个人的一个记录。</p>
<blockquote>
<p>该服务器的用途是用于部署JavaEE项目。<br>部署之后的效果图如下:<br><img src="https://ooo.0o0.ooo/2017/05/07/590ea878f1a8b.jpg" alt="mac背景.jpg"><br><a id="more"></a></p>
</blockquote>
<h1 id="JDK安装"><a href="#JDK安装" class="headerlink" title="JDK安装"></a>JDK安装</h1><p>由于我们之后需要部署的是<code>JavaEE</code>项目，所以首先第一步就是安装JDK了。</p>
<h2 id="卸载自带的openJDK"><a href="#卸载自带的openJDK" class="headerlink" title="卸载自带的openJDK"></a>卸载自带的openJDK</h2><p>现在的服务器拿来之后一般都是默认给我们安装一个<code>openJDK</code>，首先我们需要卸载掉。</p>
<ol>
<li>使用<code>rpm -qa | grep java</code>命令查看系统中是否存在有Java。</li>
<li>使用<code>rpm -e --nodeps 相关应用名称</code>来进行卸载。(相关应用名称就是上一个命令中显示出来的名称复制到这里卸载即可)。</li>
</ol>
<h2 id="下载并安装JDK"><a href="#下载并安装JDK" class="headerlink" title="下载并安装JDK"></a>下载并安装JDK</h2><ol>
<li>之后是下载<code>ORACLE</code>所提供的JDK，<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">传送门</a>根据自己系统的情况下载对应版本即可。笔者使用的是<code>jdk-8u101-linux-x64.rpm</code>版本。</li>
<li>然后使用FTP工具上传到<code>/usr/java</code>目录下即可，没有<code>java</code>目录新建一个即可。</li>
<li>然后使用<code>rpm -ivh jdk-8u101-linux-x64.rpm</code>命令进行解压安装。</li>
</ol>
<h2 id="profile文件配置"><a href="#profile文件配置" class="headerlink" title="profile文件配置"></a>profile文件配置</h2><p>安装完成之后使用<code>vi /etc/profile</code>命令编辑<code>profile</code>文件(注意该文件路径是指根目录下的etc文件夹不要找错了)。<br>在该文件中加入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/java/jdk-8u101-linux-x64</div><div class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div></pre></td></tr></table></figure></p>
<p>保存之后运行<code>source /etc/profile</code>使配置生效。</p>
<h2 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h2><p>之后我们使用在<code>windows</code>平台也有的命令<code>java -version</code>，如果输出如图：<br><img src="http://img.blog.csdn.net/20160920000008974" alt="2"><br>表示安装成功。</p>
<h1 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h1><h2 id="卸载自带的Mysql"><a href="#卸载自带的Mysql" class="headerlink" title="卸载自带的Mysql"></a>卸载自带的Mysql</h2><p>首先第一步还是要卸载掉自带的mysql。<br><code>rpm -e --nodeps mysql</code>命令和之前一样只是把应用名称换成mysql了而已。</p>
<h2 id="使用yum来安装mysql"><a href="#使用yum来安装mysql" class="headerlink" title="使用yum来安装mysql"></a>使用<code>yum</code>来安装mysql</h2><p>之后我们采用<code>yum</code>来安装mysql。这样的方式最简单便捷。<br><code>yum install -y mysql-server mysql mysql-deve</code>执行该命令直到出现<code>Complete!</code>提示之后表示安装成功。<br><code>rpm -qi mysql-server</code>之后使用该命令可以查看我们安装的mysql信息。</p>
<h2 id="mysql相关配置"><a href="#mysql相关配置" class="headerlink" title="mysql相关配置"></a>mysql相关配置</h2><p>使用<code>service mysqld start</code>来启动mysql服务(第一次会输出很多信息)，之后就不会了。<br>然后我们可以使用<code>chkconfig mysqld on</code>命令将mysql设置为开机启动。<br>输入<code>chkconfig --list | grep mysql</code>命令显示如下图：<br><img src="http://img.blog.csdn.net/20160920120817031" alt="3"><br>表示设置成功。<br>使用<code>mysqladmin -u root password &#39;root&#39;</code>为<code>root</code>账户设置密码。</p>
<h2 id="设置远程使用"><a href="#设置远程使用" class="headerlink" title="设置远程使用"></a>设置远程使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;123456&apos; with grant option;</div><div class="line"># root是用户名，%代表任意主机，&apos;123456&apos;指定的登录密码（这个和本地的root密码可以设置不同的，互不影响）</div><div class="line">flush privileges; # 重载系统权限</div><div class="line">exit;</div></pre></td></tr></table></figure>
<h2 id="验证使用"><a href="#验证使用" class="headerlink" title="验证使用"></a>验证使用</h2><p>使用<code>mysql -u root -proot</code>来登录mysql。如果出现以下界面表示设置成功。<br><img src="http://img.blog.csdn.net/20160920121542492" alt="4"></p>
<h1 id="Tomcat安装"><a href="#Tomcat安装" class="headerlink" title="Tomcat安装"></a>Tomcat安装</h1><p><code>Tomcat</code>也是我们运行<code>JavaEE</code>项目必备的一个中间件。</p>
<ol>
<li>第一步需要下载linux的Tomcat，<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">传送门</a>。根据自己系统版本进行下载即可。之后将<code>apache-tomcat-8.5.5.tar.gz</code>上传到<code>/usr/local</code>目录中。</li>
<li>解压该压缩包<code>tar -zxv -f apache-tomcat-8.5.5.tar.gz</code>,再使用<code>mv apache-tomcat-8.5.5  tomcat</code>将解压的Tomcat移动到外层的<code>Tomcat</code>目录中。</li>
<li>进入<code>/usr/local/tomcat/apache-tomcat-8.5.5/bin</code>目录使用<code>./startup.bat</code>命令启动tomcat。</li>
<li>因为tomcat使用的默认端口是<code>8080</code>，linux防火墙默认是不能访问的，需要手动将其打开。使用<code>vi + /etc/sysconfig/iptables</code>编辑<code>iptables</code>(注意etc目录是根目录下的)，加入以下代码:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT</div><div class="line">-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里我们开放了8080和80端口，之后安装nginx就不用在开放了。</p>
<blockquote>
<p>ps:这里用到了简单的vim命令。按<code>i</code>进入插入模式，输入上面两段代码。之后按<code>esc</code>退出插入模式。再按<code>:wq</code>保存关闭即可。<br>之后使用<code>service iptables restart</code>命令重启防火墙即可。在浏览器输入服务器的<code>ip+8080</code>如果出现Tomcat的欢迎页即表明<code>Tomcat</code>安装成功。</p>
</blockquote>
<h1 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h1><p>最后是安装<code>nginx</code>，这里我们还是使用最简单的<code>yum</code>的方式来进行安装。</p>
<ul>
<li><p>首先使用以下几个命令安装必备的几个库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y install pcre*</div><div class="line">yum -y install openssl*</div><div class="line">yum -y install gcc</div></pre></td></tr></table></figure>
</li>
<li><p>之后安装nginx。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/</div><div class="line">wget http://nginx.org/download/nginx-1.4.2.tar.gz</div><div class="line">tar -zxvf nginx-1.4.2.tar.gz</div><div class="line">cd nginx-1.4.2  </div><div class="line">./configure --prefix=/usr/local/nginx --with-http_stub_status_module</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>之后就可以使用<code>/usr/local/nginx/sbin/nginx</code>命令来启动nginx了。输入服务器的IP地址，如果出现nginx的欢迎界面表示安装成功了。</li>
</ul>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>这里我就简单贴以下我的配置，主要就是配置一个<code>upstream,</code>之后在<code>server</code>中引用配置的那个<code>upstream</code>即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">#user  nobody;</div><div class="line">worker_processes  1;</div><div class="line"></div><div class="line">#error_log  logs/error.log;</div><div class="line">#error_log  logs/error.log  notice;</div><div class="line">#error_log  logs/error.log  info;</div><div class="line"></div><div class="line">#pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections  1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"></div><div class="line">    #access_log  logs/access.log  main;</div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    #tcp_nopush     on;</div><div class="line"></div><div class="line">    #keepalive_timeout  0;</div><div class="line">    keepalive_timeout  65;</div><div class="line"></div><div class="line">    #gzip  on;</div><div class="line"></div><div class="line">    upstream crossover_main &#123;</div><div class="line">        server 127.0.0.1:8080;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  www.crossoverjie.top;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location  / &#123;</div><div class="line">             proxy_pass http://crossover_main/examples/;</div><div class="line">             proxy_set_header Host $http_host;</div><div class="line">             proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line">             index  index.jsp;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        #error_page  404              /404.html;</div><div class="line"></div><div class="line">        # redirect server error pages to the static page /50x.html</div><div class="line">        #</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">            root   html;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    proxy_pass   http://127.0.0.1;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">        #</div><div class="line">        #location ~ \.php$ &#123;</div><div class="line">        #    root           html;</div><div class="line">        #    fastcgi_pass   127.0.0.1:9000;</div><div class="line">        #    fastcgi_index  index.php;</div><div class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</div><div class="line">        #    include        fastcgi_params;</div><div class="line">        #&#125;</div><div class="line"></div><div class="line">        # deny access to .htaccess files, if Apache&apos;s document root</div><div class="line">        # concurs with nginx&apos;s one</div><div class="line">        #</div><div class="line">        #location ~ /\.ht &#123;</div><div class="line">        #    deny  all;</div><div class="line">        #&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       8000;</div><div class="line">    #    listen       somename:8080;</div><div class="line">    #    server_name  somename  alias  another.alias;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line"></div><div class="line">    # HTTPS server</div><div class="line">    #</div><div class="line">    #server &#123;</div><div class="line">    #    listen       443;</div><div class="line">    #    server_name  localhost;</div><div class="line"></div><div class="line">    #    ssl                  on;</div><div class="line">    #    ssl_certificate      cert.pem;</div><div class="line">    #    ssl_certificate_key  cert.key;</div><div class="line"></div><div class="line">    #    ssl_session_timeout  5m;</div><div class="line"></div><div class="line">    #    ssl_protocols  SSLv2 SSLv3 TLSv1;</div><div class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</div><div class="line">    #    ssl_prefer_server_ciphers   on;</div><div class="line"></div><div class="line">    #    location / &#123;</div><div class="line">    #        root   html;</div><div class="line">    #        index  index.html index.htm;</div><div class="line">    #    &#125;</div><div class="line">    #&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>之后我们在地址栏输入服务器的IP地址(如果有域名解析了服务器的IP可以直接输入域名)就会进入我们在<code>upstream</code>中配置的地址加上在<code>server</code>中的地址。根据我这里的配置最后解析地址就是<code>http://127.0.0.1:8080/examples</code>应该是很好理解的。最终的结果是我在片头放的那张截图一样。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一个简单的基于centOS的运行环境配置，对于小白练手应该是够了，有不清楚和错误的地方欢迎指出反正我也不会回复。<br><img src="http://i.imgur.com/wQmHabT.gif" alt="4"></p>
<blockquote>
<p>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。</p>
<p>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea8312b227.jpg&quot; alt=&quot;linux2.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Linux相信对大多数程序员来说都不陌生，毕竟在服务器端依然还是霸主地位而且丝毫没有退居二线的意思，以至于现在几乎每一个软件开发的相关人员都得或多或少的知道一些Linux的相关内容，本文将介绍如何在刚拿到一台云服务器(采用&lt;code&gt;centos&lt;/code&gt;)来进行运行环境的搭建，包括&lt;code&gt;JDK&lt;/code&gt;、&lt;code&gt;Mysql&lt;/code&gt;、&lt;code&gt;Tomcat&lt;/code&gt;以及&lt;code&gt;nginx&lt;/code&gt;。相信对于小白来说很有必要的，也是我个人的一个记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该服务器的用途是用于部署JavaEE项目。&lt;br&gt;部署之后的效果图如下:&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/07/590ea878f1a8b.jpg&quot; alt=&quot;mac背景.jpg&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux笔记" scheme="http://crossoverJie.github.io/categories/Linux%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://crossoverJie.github.io/tags/Linux/"/>
    
      <category term="centos" scheme="http://crossoverJie.github.io/tags/centos/"/>
    
      <category term="nginx" scheme="http://crossoverJie.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>SSM(五)基于webSocket的聊天室</title>
    <link href="http://crossoverJie.github.io/2016/09/04/SSM5/"/>
    <id>http://crossoverJie.github.io/2016/09/04/SSM5/</id>
    <published>2016-09-04T13:20:17.000Z</published>
    <updated>2016-09-04T16:22:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160901003737732" alt="o"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>不知大家在平时的需求中有没有遇到需要实时处理信息的情况，如站内信，订阅，聊天之类的。在这之前我们通常想到的方法一般都是采用轮训的方式每隔一定的时间向服务器发送请求从而获得最新的数据，但这样会浪费掉很多的资源并且也不是实时的，于是随着<code>HTML5</code>的推出带来了<code>websocket</code>可以根本的解决以上问题实现真正的实时传输。</p>
<h2 id="websocket是什么？"><a href="#websocket是什么？" class="headerlink" title="websocket是什么？"></a>websocket是什么？</h2><p>至于<code>websocket</code>是什么、有什么用这样的问题一Google一大把，这里我就简要的说些<code>websocket</code>再本次实例中的作用吧。<br>由于在本次实例中需要实现的是一个聊天室，一个实时的聊天室。如下图：<br><img src="http://i.imgur.com/6of3Z5K.gif" alt="1.gif"><br><a id="more"></a><br>采用<code>websocket</code>之后可以让前端和和后端像C/S模式一样实时通信，不再需要每次单独发送请求。由于是基于H5的所以对于老的浏览器如IE7、IE8之类的就没办法了，不过H5是大势所趋这点不用担心。</p>
<h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><p>既然推出了<code>websocket</code>，作为现在主流的Java肯定也有相应的支持，所以在<code>JavaEE7</code>之后也对<code>websocket</code>做出了规范，所以本次的代码理论上是要运行在<code>Java1.7</code>+和<code>Tomcat7.0+</code>之上的。<br>看过我前面几篇文章的朋友应该都知道本次实例也是运行在之前的<a href="https://github.com/crossoverjie/ssm" target="_blank" rel="external">SSM</a>之上的，所以这里就不再赘述了。<br>首先第一步需要加入<code>websocket</code>的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.websocket/javax.websocket-api --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.websocket<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.websocket-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>以上就是使用<code>websocket</code>所需要用到的包。<code>spring-websocket</code>这个主要是在之后需要在<code>websocket</code>的后端注入<code>service</code>所需要的。<br>之后再看一下后端的核心代码<code>MyWebSocket.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.controller;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by Administrator on 2016/8/7.</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.Content;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.ContentService;</div><div class="line"><span class="keyword">import</span> org.apache.camel.BeanInject;</div><div class="line"><span class="keyword">import</span> org.apache.camel.EndpointInject;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.support.SpringBeanAutowiringSupport;</div><div class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.SpringConfigurator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnClose;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnError;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</div><div class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</div><div class="line"><span class="keyword">import</span> javax.websocket.Session;</div><div class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</div><div class="line"></div><div class="line"><span class="comment">//该注解用来指定一个URI，客户端可以通过这个URI来连接到WebSocket。</span></div><div class="line"><span class="comment">/**</span></div><div class="line">  类似Servlet的注解mapping。无需在web.xml中配置。</div><div class="line"> * configurator = SpringConfigurator.class是为了使该类可以通过Spring注入。</div><div class="line"> */</div><div class="line"><span class="meta">@ServerEndpoint</span>(value = <span class="string">"/websocket"</span>,configurator = SpringConfigurator.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocket</span> </span>&#123;</div><div class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyWebSocket</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> ContentService contentService ;</div><div class="line"></div><div class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></div><div class="line">    <span class="comment">// 若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;MyWebSocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;MyWebSocket&gt;();</div><div class="line"></div><div class="line">    <span class="comment">//与客户端的连接会话，需要通过它来给客户端发送数据</span></div><div class="line">    <span class="keyword">private</span> Session session;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 连接建立成功调用的方法</div><div class="line">     * <span class="doctag">@param</span> session  可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据</div><div class="line">     */</div><div class="line">    <span class="meta">@OnOpen</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.session = session;</div><div class="line">        webSocketSet.add(<span class="keyword">this</span>);     <span class="comment">//加入set中</span></div><div class="line">        addOnlineCount();           <span class="comment">//在线数加1</span></div><div class="line">        System.out.println(<span class="string">"有新连接加入！当前在线人数为"</span> + getOnlineCount());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 连接关闭调用的方法</div><div class="line">     */</div><div class="line">    <span class="meta">@OnClose</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</div><div class="line">        webSocketSet.remove(<span class="keyword">this</span>);  <span class="comment">//从set中删除</span></div><div class="line">        subOnlineCount();           <span class="comment">//在线数减1</span></div><div class="line">        System.out.println(<span class="string">"有一连接关闭！当前在线人数为"</span> + getOnlineCount());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 收到客户端消息后调用的方法</div><div class="line">     * <span class="doctag">@param</span> message 客户端发送过来的消息</div><div class="line">     * <span class="doctag">@param</span> session 可选的参数</div><div class="line">     */</div><div class="line">    <span class="meta">@OnMessage</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"来自客户端的消息:"</span> + message);</div><div class="line">        <span class="comment">//群发消息</span></div><div class="line">        <span class="keyword">for</span>(MyWebSocket item: webSocketSet)&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                item.sendMessage(message);</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发生错误时调用</div><div class="line">     * <span class="doctag">@param</span> session</div><div class="line">     * <span class="doctag">@param</span> error</div><div class="line">     */</div><div class="line">    <span class="meta">@OnError</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"发生错误"</span>);</div><div class="line">        error.printStackTrace();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这个方法与上面几个方法不一样。没有用注解，是根据自己需要添加的方法。</div><div class="line">     * <span class="doctag">@param</span> message</div><div class="line">     * <span class="doctag">@throws</span> IOException</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        <span class="comment">//保存数据到数据库</span></div><div class="line">        Content content = <span class="keyword">new</span> Content() ;</div><div class="line">        content.setContent(message);</div><div class="line">        SimpleDateFormat sm = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:dd"</span>) ;</div><div class="line">        content.setCreateDate(sm.format(<span class="keyword">new</span> Date()));</div><div class="line">        contentService.insertSelective(content) ;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</div><div class="line">        <span class="comment">//this.session.getAsyncRemote().sendText(message);</span></div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> onlineCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        MyWebSocket.onlineCount++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        MyWebSocket.onlineCount--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是整个<code>websocket</code>的后端代码。看起来也比较简单主要就是使用那几个注解。每当有一个客户端连入、关闭、发送消息都会调用各自注解的方法。这里我讲一下<code>sendMessage()</code>这个方法。</p>
<h2 id="websocket绕坑"><a href="#websocket绕坑" class="headerlink" title="websocket绕坑"></a>websocket绕坑</h2><p>在<code>sendMessage()</code>方法中我只想实现一个简单的功能，就是将每次的聊天记录都存到数据库中。看似一个简单的功能硬是花了我半天的时间。<br>我先是按照以前的惯性思维只需要在这个类中注入<code>service</code>即可。但是无论怎么弄每次都注入不进来都是<code>null</code>。<br>最后没办法只有google了，最后终于在神级社区<code>StackOverFlow</code>中找到了答案，就是前边所说的需要添加的第二个    <code>maven</code>依赖，然后加入<code>@ServerEndpoint(value = &quot;/websocket&quot;,configurator = SpringConfigurator.class)</code>这个注解即可利用<code>Spring</code>注入了。接着就可以做消息的保存了。</p>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>前端我采用了Bootstrap做的，不太清楚Bootstrap的童鞋建议先看下<a href="http://www.bootcss.com/" target="_blank" rel="external">官方文档</a>也比较简单。还是先贴一下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">import</span>=<span class="string">"java.util.*"</span> <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">    <span class="attr">String</span> <span class="attr">path</span> = <span class="string">request.getContextPath();</span></div><div class="line">    <span class="attr">String</span> <span class="attr">basePath</span> = <span class="string">request.getScheme()</span> + "<span class="attr">:</span>//" + <span class="attr">request.getServerName</span>() + "<span class="attr">:</span>" + <span class="attr">request.getServerPort</span>() + <span class="attr">path</span> + "/";</div><div class="line">%&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"&lt;%=basePath%&gt;"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span></span></div><div class="line">          <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- WARNING: Respond.js doesn't work if you view the page via file:// --&gt;</span></div><div class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></div><div class="line">    &lt;script src="//cdn.bootcss.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;script src="//cdn.bootcss.com/respond.js/1.4.2/respond.min.js"&gt;&lt;/script&gt;</div><div class="line">    &lt;![endif]--&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/ueditor/ueditor.config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/ueditor/ueditor.all.min.js"</span>&gt;</span><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--建议手动加在语言，避免在ie下有时因为加载语言失败导致编辑器加载失败--&gt;</span></div><div class="line">    <span class="comment">&lt;!--这里加载的语言文件会覆盖你在配置项目里添加的语言类型，比如你在配置项目里配置的是英文，这里加载的中文，那最后就是中文--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/ueditor/lang/zh-cn/zh-cn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">data</span>=<span class="string">"/ssm"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"send()"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"closeWebSocket()"</span>&gt;</span>关闭连接<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>聊天室<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span></div><div class="line">                    在线人数<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"onlineCount"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span>人</div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"editor"</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">style</span>=<span class="string">"width:1024px;height:200px;"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"sendMsg();"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">    var ue = UE.getEditor('editor');</div><div class="line">    var websocket = null;</div><div class="line"></div><div class="line">    //判断当前浏览器是否支持WebSocket</div><div class="line">    if ('WebSocket' in window) &#123;</div><div class="line">        websocket = new WebSocket("ws://192.168.0.102:8080/ssm/websocket");</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        alert("对不起！你的浏览器不支持webSocket")</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //连接发生错误的回调方法</div><div class="line">    websocket.onerror = function () &#123;</div><div class="line">        setMessageInnerHTML("error");</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //连接成功建立的回调方法</div><div class="line">    websocket.onopen = function (event) &#123;</div><div class="line">        setMessageInnerHTML("加入连接");</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //接收到消息的回调方法</div><div class="line">    websocket.onmessage = function (event) &#123;</div><div class="line">        setMessageInnerHTML(event.data);</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //连接关闭的回调方法</div><div class="line">    websocket.onclose = function () &#123;</div><div class="line">        setMessageInnerHTML("断开连接");</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，</div><div class="line">    // 防止连接还没断开就关闭窗口，server端会抛异常。</div><div class="line">    window.onbeforeunload = function () &#123;</div><div class="line">        var is = confirm("确定关闭窗口？");</div><div class="line">        if (is)&#123;</div><div class="line">            websocket.close();</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //将消息显示在网页上</div><div class="line">    function setMessageInnerHTML(innerHTML) &#123;</div><div class="line">        $("#msg").append(innerHTML+"<span class="tag">&lt;<span class="name">br</span>/&gt;</span>")</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    //关闭连接</div><div class="line">    function closeWebSocket() &#123;</div><div class="line">        websocket.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //发送消息</div><div class="line">    function send() &#123;</div><div class="line">        var message = $("#text").val() ;</div><div class="line">        websocket.send(message);</div><div class="line">        $("#text").val("") ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    function sendMsg()&#123;</div><div class="line">        var msg = ue.getContent();</div><div class="line">        websocket.send(msg);</div><div class="line">        ue.setContent('');</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- jQuery (necessary for Bootstrap's JavaScript plugins) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.3/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/js/Globals.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%=path%&gt;/js/websocket.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>其实其中重要的就是那几个JS方法，都写有注释。需要注意的是这里<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//判断当前浏览器是否支持WebSocket</span></div><div class="line"><span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</div><div class="line">    websocket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://192.168.0.102:8080/ssm/websocket"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"对不起！你的浏览器不支持webSocket"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当项目跑起来之后需要将这里的地址改为你项目的地址即可。<br>哦对了，我在这里采用了百度的一个<code>Ueditor</code>的富文本编辑器(虽然百度搜索我现在很少用了，但是这个编辑器确实还不错)，这个编辑器也比较简单只需要个性化的配置一下个人的需求即可。</p>
<h2 id="Ueditor相关配置"><a href="#Ueditor相关配置" class="headerlink" title="Ueditor相关配置"></a>Ueditor相关配置</h2><p>直接使用我项目运行的童鞋就不需要重新下载了，我将资源放在了webapp目录下的ueditor文件夹下面的。<br>值得注意的是我们首先需要将<code>jsp--&gt;lib</code>下的jar包加入到项目中。加好之后会出现一个想下的箭头表示已经引入成功。<br><img src="http://i.imgur.com/ZtHInpF.png" alt="">，之后修改该目录下的<code>config.json</code>文件，主要修改以下内容即可：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">"imageAllowFiles": [".png", ".jpg", ".jpeg", ".gif", ".bmp"], /* 上传图片格式显示 */</div><div class="line">"imageCompressEnable": true, /* 是否压缩图片,默认是true */</div><div class="line">"imageCompressBorder": 1600, /* 图片压缩最长边限制 */</div><div class="line">"imageInsertAlign": "none", /* 插入的图片浮动方式 */</div><div class="line">"imageUrlPrefix": "http://192.168.0.102:8080/ssm", /* 图片访问路径前缀 */</div><div class="line">"imagePathFormat": "/ueditor/jsp/upload/image/&#123;yyyy&#125;&#123;mm&#125;&#123;dd&#125;/&#123;time&#125;&#123;rand:6&#125;",</div></pre></td></tr></table></figure></p>
<p>这里主要是要修改<code>imageUrlPrefix</code>为你自己的项目地址就可以了。<code>ueditor</code>一个我认为很不错的就是他支持图片、多图、截图上传，而且都不需要手动编写后端接口，所有上传的文件、图片都会保存到项目发布出去的<code>jsp--&gt;upload</code>文件夹下一看就明白了。更多关于<code>ueditor</code>的配置可以查看<a href="http://ueditor.baidu.com/website/" target="_blank" rel="external">官网</a>。</p>
<blockquote>
<p>其中值得注意一点的是，由于项目采用了<code>Spring MVC</code>并拦截了所有的请求，导致静态资源不能访问，如果是需要用到上传<code>txt</code>文件之类的需求可以参照<code>web.xml</code>中修改，如下:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.txt<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>这样就可以访问txt文件了，如果还需要上传PPT之类的就以此类推。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这样一个简单的基于<code>websocket</code>的聊天室就算完成了，感兴趣的朋友可以将项目部署到外网服务器上这样好基友之间就可以愉快的聊(zhuang)天(bi)了。<br>当然这只是一个简单的项目，感兴趣的朋友再这基础之上加入实时在线人数，用户名和IP之类的。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。<br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160901003737732&quot; alt=&quot;o&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;不知大家在平时的需求中有没有遇到需要实时处理信息的情况，如站内信，订阅，聊天之类的。在这之前我们通常想到的方法一般都是采用轮训的方式每隔一定的时间向服务器发送请求从而获得最新的数据，但这样会浪费掉很多的资源并且也不是实时的，于是随着&lt;code&gt;HTML5&lt;/code&gt;的推出带来了&lt;code&gt;websocket&lt;/code&gt;可以根本的解决以上问题实现真正的实时传输。&lt;/p&gt;
&lt;h2 id=&quot;websocket是什么？&quot;&gt;&lt;a href=&quot;#websocket是什么？&quot; class=&quot;headerlink&quot; title=&quot;websocket是什么？&quot;&gt;&lt;/a&gt;websocket是什么？&lt;/h2&gt;&lt;p&gt;至于&lt;code&gt;websocket&lt;/code&gt;是什么、有什么用这样的问题一Google一大把，这里我就简要的说些&lt;code&gt;websocket&lt;/code&gt;再本次实例中的作用吧。&lt;br&gt;由于在本次实例中需要实现的是一个聊天室，一个实时的聊天室。如下图：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/6of3Z5K.gif&quot; alt=&quot;1.gif&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="websocket" scheme="http://crossoverJie.github.io/tags/websocket/"/>
    
      <category term="HTML5" scheme="http://crossoverJie.github.io/tags/HTML5/"/>
    
      <category term="ueditor" scheme="http://crossoverJie.github.io/tags/ueditor/"/>
    
  </entry>
  
  <entry>
    <title>SSM(四)WebService入门详解</title>
    <link href="http://crossoverJie.github.io/2016/08/02/SSM4/"/>
    <id>http://crossoverJie.github.io/2016/08/02/SSM4/</id>
    <published>2016-08-02T09:28:00.000Z</published>
    <updated>2016-08-02T13:40:26.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.blog.csdn.net/20160802154107534" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>webservice这个不知道大家首次接触的时候是怎么理解的，反正我记得我当时第一次接触这个东西的时候以为又是一个XX框架，觉得还挺高大上。然而这一切在之后我使用过后才发现这些全都是YY。<br>那么webservice到底是什么呢，根据我自己的理解：简单来说就像是一个公开的接口，其他系统不管你是用什么语言来编写的都可以调用这个接口，并可以返回相应的数据给你。就像是现在很多的天气应用，他们肯定不会自己去搞一个气象局之类的部门去监测天气，大多都是直接调用一个天气接口，然后返回天气数据，相关应用就可以将这些信息展示给用户了。<br>通常来说发布这类接口的应用都是用一两种语言来编写即可，但是调用这个接口应用可能会是各种语言来编写的，为了满足这样的需求webservice出现了。</p>
<blockquote>
<p>简单来说webservice就是为了满足以上需求而定义出来的规范。</p>
</blockquote>
<hr>
<h1 id="Spring整合CXF"><a href="#Spring整合CXF" class="headerlink" title="Spring整合CXF"></a>Spring整合CXF</h1><p>在Java中实现webservice有多种方法，java本身在jdk1.7之后也对webservice有了默认的实现，但是在我们实际开发中一般还是会使用框架来，比如这里所提到的CXF就有着广泛的应用。<br>废话我就不多说了，直接讲Spring整合CXF，毕竟现在的JavaEE开发是离不开Spring了。<br>该项目还是基于之前的<a href="https://github.com/crossoverjie/SSM" target="_blank" rel="external">SSM</a>进行开发的。</p>
<h2 id="加入maven依赖"><a href="#加入maven依赖" class="headerlink" title="加入maven依赖"></a>加入maven依赖</h2><p>第一步肯定是要加入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--cxf--&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxws --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-core --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>接着我们需要配置一个CXF的servlet：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--定义一个cxf的servlet--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CXFServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/webservice/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>之后只要我们访问webservice/*这个地址就会进入CXF的servlet中。</p>
<h2 id="整合Spring配置"><a href="#整合Spring配置" class="headerlink" title="整合Spring配置"></a>整合Spring配置</h2><p>接下来是最重要的一部，用Spring整合CXF：<br>在这之前我有新建一个CXF的包，如下图：<br><img src="http://img.blog.csdn.net/20160802160407964" alt="目录结构"><br>这里有两个主要类</p>
<ul>
<li>HelloWorld接口。</li>
<li>实现HelloWorld接口的HelloWorldImpl类。<br>代码如下：<br>HelloWorld.java<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.cxf;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.jws.WebService;</div><div class="line"></div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String str)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中就只定义了一个简单的<code>say()</code>方法。<br>HelloWorldImpl.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.cxf.impl;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.cxf.HelloWorld;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> javax.jws.WebService;</div><div class="line"><span class="meta">@Component</span>(<span class="string">"helloWorld"</span>)</div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldImpl</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">say</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Hello"</span>+str;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里就是对<code>say()</code>方法的简单实现。<br>接下来就是整合Spring了，由于需要使用到CXF的标签，所以我们需要添加额外的命名路径如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;beans xmlns="http://www.springframework.org/schema/beans"</div><div class="line">       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"</div><div class="line">       xmlns:p="http://www.springframework.org/schema/p"</div><div class="line">       xmlns:aop="http://www.springframework.org/schema/aop"</div><div class="line">       xmlns:context="http://www.springframework.org/schema/context"</div><div class="line">       xmlns:jee="http://www.springframework.org/schema/jee"</div><div class="line">       xmlns:tx="http://www.springframework.org/schema/tx"</div><div class="line">       xmlns:jaxws="http://cxf.apache.org/jaxws"</div><div class="line">       xsi:schemaLocation="</div><div class="line">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd</div><div class="line">        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd</div><div class="line">        http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd"&gt;</div><div class="line"></div><div class="line"></div><div class="line">    &lt;import resource="classpath:META-INF/cxf/cxf.xml"/&gt;</div><div class="line">    &lt;import resource="classpath:META-INF/cxf/cxf-servlet.xml"/&gt;</div><div class="line">    &lt;!-- 自动扫描webService --&gt;</div><div class="line">    &lt;context:component-scan base-package="com.crossoverJie.cxf" /&gt;</div><div class="line">    &lt;!-- 定义webservice的发布接口  --&gt;</div><div class="line">    &lt;jaxws:endpoint</div><div class="line">            implementor="#helloWorld"</div><div class="line">            address="/HelloWorld"</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure>
<p>更加具体的配置可以查看官方给出的文档:<a href="http://cxf.apache.org/docs/how-do-i-develop-a-service.html" target="_blank" rel="external">http://cxf.apache.org/docs/how-do-i-develop-a-service.html</a>。<br><code>#helloWorld</code>指的是我们在<code>HelloWorldImpl</code>类中所自定义的名字，<code>/HelloWorld</code>则是我们需要访问的地址。<br>之后我们运行项目输入该地址：<a href="http://127.0.0.1:8080/ssm/webservice/HelloWorld?wsdl" target="_blank" rel="external">http://127.0.0.1:8080/ssm/webservice/HelloWorld?wsdl</a>如果出现如下界面：<br><img src="http://img.blog.csdn.net/20160802170000891" alt="xml">则说明我们的webservice发布成功了。<br>接下来只需要通过客户端调用这个接口即可获得返回结果了。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是一个简单的webservice入门实例，更多的关于CXF拦截器，客户端调用就没有做过多介绍，后续有时间的话再接着更新。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。<br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20160802154107534&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;webservice这个不知道大家首次接触的时候是怎么理解的，反正我记得我当时第一次接触这个东西的时候以为又是一个XX框架，觉得还挺高大上。然而这一切在之后我使用过后才发现这些全都是YY。&lt;br&gt;那么webservice到底是什么呢，根据我自己的理解：简单来说就像是一个公开的接口，其他系统不管你是用什么语言来编写的都可以调用这个接口，并可以返回相应的数据给你。就像是现在很多的天气应用，他们肯定不会自己去搞一个气象局之类的部门去监测天气，大多都是直接调用一个天气接口，然后返回天气数据，相关应用就可以将这些信息展示给用户了。&lt;br&gt;通常来说发布这类接口的应用都是用一两种语言来编写即可，但是调用这个接口应用可能会是各种语言来编写的，为了满足这样的需求webservice出现了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单来说webservice就是为了满足以上需求而定义出来的规范。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;Spring整合CXF&quot;&gt;&lt;a href=&quot;#Spring整合CXF&quot; class=&quot;headerlink&quot; title=&quot;Spring整合CXF&quot;&gt;&lt;/a&gt;Spring整合CXF&lt;/h1&gt;&lt;p&gt;在Java中实现webservice有多种方法，java本身在jdk1.7之后也对webservice有了默认的实现，但是在我们实际开发中一般还是会使用框架来，比如这里所提到的CXF就有着广泛的应用。&lt;br&gt;废话我就不多说了，直接讲Spring整合CXF，毕竟现在的JavaEE开发是离不开Spring了。&lt;br&gt;该项目还是基于之前的&lt;a href=&quot;https://github.com/crossoverjie/SSM&quot;&gt;SSM&lt;/a&gt;进行开发的。&lt;/p&gt;
&lt;h2 id=&quot;加入maven依赖&quot;&gt;&lt;a href=&quot;#加入maven依赖&quot; class=&quot;headerlink&quot; title=&quot;加入maven依赖&quot;&gt;&lt;/a&gt;加入maven依赖&lt;/h2&gt;&lt;p&gt;第一步肯定是要加入maven依赖：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--cxf--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-frontend-jaxws --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cxf-rt-frontend-jaxws&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-core --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cxf-core&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.cxf/cxf-rt-transports-http --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.apache.cxf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;cxf-rt-transports-http&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.1.6&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
      <category term="CXF" scheme="http://crossoverJie.github.io/tags/CXF/"/>
    
  </entry>
  
  <entry>
    <title>SSM(三)Shiro使用详解</title>
    <link href="http://crossoverJie.github.io/2016/07/15/SSM3/"/>
    <id>http://crossoverJie.github.io/2016/07/15/SSM3/</id>
    <published>2016-07-15T12:29:37.000Z</published>
    <updated>2016-08-02T13:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/58tv80u.jpg" alt=""></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相比有做过企业级开发的童鞋应该都有做过权限安全之类的功能吧，最先开始我采用的是建<code>用户表</code>,<code>角色表</code>,<code>权限表</code>，之后在拦截器中对每一个请求进行拦截，再到数据库中进行查询看当前用户是否有该权限，这样的设计能满足大多数中小型系统的需求。不过这篇所介绍的Shiro能满足之前的所有需求，并且使用简单，安全性高，而且现在越来越的多企业都在使用Shiro，这应该是一个收入的你的技能库。</p>
<hr>
<h1 id="创建自定义MyRealm类"><a href="#创建自定义MyRealm类" class="headerlink" title="创建自定义MyRealm类"></a>创建自定义<code>MyRealm</code>类</h1><p>有关Shiro的基础知识我这里就不过多介绍了，直接来干货，到最后会整合Spring来进行权限验证。<br>首先在使用Shiro的时候我们要考虑在什么样的环境下使用：</p>
<ul>
<li>登录的验证</li>
<li>对指定角色的验证</li>
<li>对URL的验证</li>
</ul>
<a id="more"></a>
<p>基本上我们也就这三个需求，所以同时我们也需要三个方法：</p>
<ol>
<li><code>findUserByUserName(String username)</code>根据username查询用户，之后Shiro会根据查询出来的User的密码来和提交上来的密码进行比对。</li>
<li><code>findRoles(String username)</code>根据username查询该用户的所有角色，用于角色验证。</li>
<li><code>findPermissions(String username)</code>根据username查询他所拥有的权限信息，用于权限判断。</li>
</ol>
<p>下面我贴一下我的mapper代码(PS:该项目依然是基于之前的SSM，不太清楚整合的请看<a href="http://crossoverjie.top/2016/06/28/SSM1/" target="_blank" rel="external">SSM一</a>)。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.crossoverJie.dao.T_userDao"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"com.crossoverJie.pojo.T_user"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"userName"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"roleId"</span> <span class="attr">column</span>=<span class="string">"roleId"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span> &gt;</span></div><div class="line">        id, username, password,roleId</div><div class="line">    <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByUsername"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></div><div class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></div><div class="line">        from t_user where userName=#&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findRoles"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></div><div class="line">        select r.roleName from t_user u,t_role r where u.roleId=r.id and u.userName=#&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findPermissions"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"String"</span>&gt;</span></div><div class="line">        select p.permissionName from t_user u,t_role r,t_permission p</div><div class="line">        where u.roleId=r.id and p.roleId=r.id and u.userName=#&#123;userName&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>很简单只有三个方法，分别对应上面所说的三个方法。对<code>sql</code>稍微熟悉点的童鞋应该都能看懂，不太清楚就拷到数据库中执行一下就行了，数据库的<code>Sql</code>也在我的<code>github</code>上。实体类就比较简单了，就只有四个字段以及get,set方法。我就这里就不贴了，具体可以去<code>github</code>上<code>fork</code>我的源码。</p>
<p>现在就需要创建自定义的<code>MyRealm</code>类，这个还是比较重要的。继承至<code>Shiro</code>的<code>AuthorizingRealm</code>类，用于处理自己的验证逻辑，下面贴一下我的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.shiro;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.T_user;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.T_userService;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.SimpleAuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IDEA</div><div class="line"> * Created by $&#123;jie.chen&#125; on 2016/7/14.</div><div class="line"> * Shiro自定义域</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> T_userService t_userService;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 用于的权限的认证。</div><div class="line">     * <span class="doctag">@param</span> principalCollection</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</div><div class="line">        String username = principalCollection.getPrimaryPrincipal().toString() ;</div><div class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo() ;</div><div class="line">        Set&lt;String&gt; roleName = t_userService.findRoles(username) ;</div><div class="line">        Set&lt;String&gt; permissions = t_userService.findPermissions(username) ;</div><div class="line">        info.setRoles(roleName);</div><div class="line">        info.setStringPermissions(permissions);</div><div class="line">        <span class="keyword">return</span> info;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首先执行这个登录验证</div><div class="line">     * <span class="doctag">@param</span> token</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> AuthenticationException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span></span></div><div class="line">            <span class="keyword">throws</span> AuthenticationException &#123;</div><div class="line">        <span class="comment">//获取用户账号</span></div><div class="line">        String username = token.getPrincipal().toString() ;</div><div class="line">        T_user user = t_userService.findUserByUsername(username) ;</div><div class="line">        <span class="keyword">if</span> (user != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//将查询到的用户账号和密码存放到 authenticationInfo用于后面的权限判断。第三个参数随便放一个就行了。</span></div><div class="line">            AuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(user.getUserName(),user.getPassword(),</div><div class="line">                    <span class="string">"a"</span>) ;</div><div class="line">            <span class="keyword">return</span> authenticationInfo ;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span>  <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>继承<code>AuthorizingRealm</code>类之后就需要覆写它的两个方法，<code>doGetAuthorizationInfo</code>,<code>doGetAuthenticationInfo</code>，这两个方法的作用我都有写注释，逻辑也比较简单。<br><code>doGetAuthenticationInfo</code>是用于登录验证的，在登录的时候需要将数据封装到<code>Shiro</code>的一个<code>token</code>中，执行shiro的<code>login()</code>方法，之后只要我们将<code>MyRealm</code>这个类配置到Spring中，登录的时候<code>Shiro</code>就会自动的调用<code>doGetAuthenticationInfo()</code>方法进行验证。<br>哦对了，忘了贴下登录的<code>Controller</code>了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.T_user;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.service.T_userService;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.UsernamePasswordToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.ui.Model;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.annotation.Resource;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IDEA</div><div class="line"> * Created by $&#123;jie.chen&#125; on 2016/7/14.</div><div class="line"> * 后台Controller</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">T_userController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span></div><div class="line">    <span class="keyword">private</span> T_userService t_userService ;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/loginAdmin"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(T_user user, Model model)</span></span>&#123;</div><div class="line">        Subject subject = SecurityUtils.getSubject() ;</div><div class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(user.getUserName(),user.getPassword()) ;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            subject.login(token);</div><div class="line">            <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">            <span class="comment">//这里将异常打印关闭是因为如果登录失败的话会自动抛异常</span></div><div class="line"><span class="comment">//            e.printStackTrace();</span></div><div class="line">            model.addAttribute(<span class="string">"error"</span>,<span class="string">"用户名或密码错误"</span>) ;</div><div class="line">            <span class="keyword">return</span> <span class="string">"../../login"</span> ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"admin"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/student"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">student</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/teacher"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">teacher</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要就是<code>login()</code>方法。逻辑比较简单，只是登录验证的时候不是像之前那样直接查询数据库然后返回是否有用户了，而是调用<code>subject</code>的<code>login()</code>方法,就是我上面提到的，调用<code>login()</code>方法时<code>Shiro</code>会自动调用我们自定义的<code>MyRealm</code>类中的<code>doGetAuthenticationInfo()</code>方法进行验证的，验证逻辑是先根据用户名查询用户，如果查询到的话再将查询到的用户名和密码放到<code>SimpleAuthenticationInfo</code>对象中，Shiro会自动根据用户输入的密码和查询到的密码进行匹配，如果匹配不上就会抛出异常，匹配上之后就会执行<code>doGetAuthorizationInfo()</code>进行相应的权限验证。<br><code>doGetAuthorizationInfo()</code>方法的处理逻辑也比较简单，根据用户名获取到他所拥有的角色以及权限，然后赋值到<code>SimpleAuthorizationInfo</code>对象中即可，Shiro就会按照我们配置的XX角色对应XX权限来进行判断，这个配置在下面的整合中会讲到。</p>
<hr>
<h1 id="整合Spring"><a href="#整合Spring" class="headerlink" title="整合Spring"></a>整合Spring</h1><p>接下来应该是大家比较关系的一步：整合<code>Spring</code>。<br>我是在之前的<code>Spring SpringMVC Mybatis</code>的基础上进行整合的。</p>
<h2 id="web-xml配置"><a href="#web-xml配置" class="headerlink" title="web.xml配置"></a>web.xml配置</h2><p>首先我们需要在<code>web.xml</code>进行配置Shiro的过滤器。<br>我只贴Shiro部分的，其余的和之前配置是一样的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- shiro过滤器定义 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>配置还是比较简单的，这样会过滤所有的请求。<br>之后我们还需要在Spring中配置一个<code>shiroFilter</code>的bean。</p>
<h2 id="spring-mybatis-xml配置"><a href="#spring-mybatis-xml配置" class="headerlink" title="spring-mybatis.xml配置"></a>spring-mybatis.xml配置</h2><p>由于这里配置较多，我就全部贴一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.crossoverJie"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></div><div class="line">          <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</div><div class="line">        <span class="comment">&lt;!-- 指定连接数据库的驱动 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span></span></div><div class="line">                  <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapping/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.crossoverJie.dao"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置自定义Realm --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myRealm"</span> <span class="attr">class</span>=<span class="string">"com.crossoverJie.shiro.MyRealm"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 安全管理器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"myRealm"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Shiro过滤器 核心--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Shiro的核心安全接口,这个属性是必须的 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 身份认证失败，则跳转到登录页面的配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login.jsp"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 权限认证失败，则跳转到指定页面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">"/nopower.jsp"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- Shiro连接约束配置,即过滤链的定义 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--anon 表示匿名访问，不需要认证以及授权--&gt;</span></div><div class="line">                /loginAdmin=anon</div><div class="line"></div><div class="line">                <span class="comment">&lt;!--authc表示需要认证 没有进行身份认证是不能进行访问的--&gt;</span></div><div class="line">                /admin*=authc</div><div class="line"></div><div class="line"></div><div class="line">                /student=roles[teacher]</div><div class="line">                /teacher=perms["user:create"]</div><div class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 保证实现了Shiro内部lifecycle函数的bean执行 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 开启Shiro注解 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span></span></div><div class="line">          <span class="attr">depends-on</span>=<span class="string">"lifecycleBeanPostProcessor"</span>/&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在这里我们配置了上文中所提到的自定义<code>myRealm</code>,这样Shiro就可以按照我们自定义的逻辑来进行权限验证了。其余的都比较简单，看注释应该都能明白。<br>着重讲解一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--anon 表示匿名访问，不需要认证以及授权--&gt;</span></div><div class="line">        /loginAdmin=anon</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--authc表示需要认证 没有进行身份认证是不能进行访问的--&gt;</span></div><div class="line">        /admin*=authc</div><div class="line"></div><div class="line"></div><div class="line">        /student=roles[teacher]</div><div class="line">        /teacher=perms["user:create"]</div><div class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<ul>
<li>/loginAdmin=anon的意思的意思是，发起/loginAdmin这个请求是不需要进行身份认证的，这个请求在这次项目中是一个登录请求，一般对于这样的请求都是不需要身份认证的。</li>
<li>/admin*=authc表示 /admin,/admin1,/admin2这样的请求都是需要进行身份认证的，不然是不能访问的。</li>
<li>/student=roles[teacher]表示访问/student请求的用户必须是<code>teacher</code>角色，不然是不能进行访问的。</li>
<li>/teacher=perms[“user:create”]表示访问/teacher请求是需要当前用户具有<code>user:create</code>权限才能进行访问的。<br>更多相关权限过滤的资料可以访问shiro的官方介绍：<a href="http://shiro.apache.org/spring.html" target="_blank" rel="external">传送门</a></li>
</ul>
<hr>
<h1 id="使用Shiro标签库"><a href="#使用Shiro标签库" class="headerlink" title="使用Shiro标签库"></a>使用Shiro标签库</h1><p>Shiro还有着强大标签库，可以在前端帮我获取信息和做判断。<br>我贴一下我这里登录完成之后显示的界面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%--</span></span></div><div class="line">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></div><div class="line">  <span class="attr">User:</span> <span class="attr">Administrator</span></div><div class="line">  <span class="attr">Date:</span> <span class="attr">2016</span>/<span class="attr">7</span>/<span class="attr">14</span></div><div class="line">  <span class="attr">Time:</span> <span class="attr">13:17</span></div><div class="line">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></div><div class="line"><span class="attr">--</span>%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"shiro"</span> <span class="attr">uri</span>=<span class="string">"http://shiro.apache.org/tags"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>后台<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span></div><div class="line">    这是admin角色登录：<span class="tag">&lt;<span class="name">shiro:principal</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:principal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span></div><div class="line">    有user:create权限信息</div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">登录成功</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>要想使用Shiro标签，只需要引入一下标签即可：<br><code>&lt;%@ taglib prefix=&quot;shiro&quot; uri=&quot;http://shiro.apache.org/tags&quot; %&gt;</code><br>其实英语稍微好点的童鞋应该都能看懂。下面我大概介绍下一些标签的用法：</p>
<ul>
<li><shiro:hasrole name="admin">具有<code>admin</code>角色才会显示标签内的信息。</shiro:hasrole></li>
<li><shiro:principal></shiro:principal>获取用户信息。默认调用<code>Subject.getPrincipal()</code>获取，即 Primary Principal。</li>
<li><shiro:haspermission name="user:create"> 用户拥有<code>user:create</code>这个权限才回显示标签内的信息。<br>更多的标签可以查看官网：<a href="http://shiro.apache.org/webapp-tutorial.html" target="_blank" rel="external">传送门</a></shiro:haspermission></li>
</ul>
<hr>
<h1 id="整体测试"><a href="#整体测试" class="headerlink" title="整体测试"></a>整体测试</h1><p><img src="http://i.imgur.com/Vmg8LLA.png" alt=""><br>这是我的测试数据。<br>首先来验证一下登录：<br>先输入一个错误的账号和密码：<br><img src="http://i.imgur.com/5LXP14s.gif" alt="1.gif"></p>
<p>接下来输入一个正确的：<br><img src="http://i.imgur.com/zbJxEfO.gif" alt="2.gif"><br>可以看到我登录的用户是<code>crossoverJie</code>他是有<code>admin</code>的角色，并且拥有<code>user:*</code>(ps:系统数据详见上面的数据库截图)的权限，所以在这里：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"admin"</span>&gt;</span>   </div><div class="line">    这是admin角色登录：<span class="tag">&lt;<span class="name">shiro:principal</span>&gt;</span><span class="tag">&lt;/<span class="name">shiro:principal</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span></div><div class="line">    有user:create权限信息</div><div class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>是能显示出标签内的信息，并把用户信息也显示出来了。<br>接着我们来访问一下<code>/student</code>这个请求，因为在Spring的配置文件中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--anon 表示匿名访问，不需要认证以及授权--&gt;</span></div><div class="line">        /loginAdmin=anon</div><div class="line"></div><div class="line">        <span class="comment">&lt;!--authc表示需要认证 没有进行身份认证是不能进行访问的--&gt;</span></div><div class="line">        /admin*=authc</div><div class="line"></div><div class="line"></div><div class="line">        /student=roles[teacher]</div><div class="line">        /teacher=perms["user:create"]</div><div class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>只有<code>teacher</code>角色才能访问<code>/student</code>这个请求的：<br><img src="http://i.imgur.com/0LmdgCW.gif" alt="3.gif"><br>果然，Shiro做了安全控制是不能进行访问的。<br>然后我们换<code>aaa</code>用户登录，他正好是<code>teacher</code>角色，看能不能访问<code>/student</code>。<br><img src="http://i.imgur.com/XjeLdmF.gif" alt="4.gif"><br>果然是能访问的。<br>因为我在控制器里访问<code>/student</code>返回的是同一个界面所以看到的还是这个界面。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/teacher"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">teacher</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"admin"</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并且没有显示之前Shiro标签内的内容。<br>其他的我就不测了，大家可以自己在数据库里加一些数据，或者是改下拦截的权限多试试，这样对Shiro的理解就会更加深刻。</p>
<hr>
<h1 id="MD5加密"><a href="#MD5加密" class="headerlink" title="MD5加密"></a>MD5加密</h1><p>Shiro还封装了一个我认为非常不错的功能，那就是MD5加密，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.shiro;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.Md5Hash;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created with IDEA</div><div class="line"> * 基于Shiro的MD5加密</div><div class="line"> * Created by $&#123;jie.chen&#125; on 2016/7/13.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MD5Util</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String str,String salt)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Md5Hash(str,salt).toString() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        String md5 = md5(<span class="string">"abc123"</span>,<span class="string">"crossoverjie"</span>) ;</div><div class="line">        System.out.println(md5);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码非常简单，只需要调用<code>Md5Hash(str,salt)</code>方法即可，这里多了一个参数，第一个参数不用多解释，是需要加密的字符串。第二个参数<code>salt</code>中文翻译叫盐，加密的时候我们传一个字符串进去，只要这个salt不被泄露出去，那原则上加密之后是无法被解密的，在存用户密码的时候可以使用，感觉还是非常屌的。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是Shiro实际使用的案例，将的比较初略，但是关于Shiro的核心东西都在里面了。大家可以去我的github上下载源码，只要按照我给的数据库就没有问题，项目跑起来之后试着改下里面的东西可以加深对Shiro的理解。</p>
<blockquote>
<p>项目地址：<a href="https://github.com/crossoverJie/SSM.git" target="_blank" rel="external">https://github.com/crossoverJie/SSM.git</a><br>个人博客地址：<a href="http://crossoverjie.top" target="_blank" rel="external">http://crossoverjie.top</a>。<br>GitHub地址：<a href="https://github.com/crossoverJie" target="_blank" rel="external">https://github.com/crossoverJie</a>。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/58tv80u.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;相比有做过企业级开发的童鞋应该都有做过权限安全之类的功能吧，最先开始我采用的是建&lt;code&gt;用户表&lt;/code&gt;,&lt;code&gt;角色表&lt;/code&gt;,&lt;code&gt;权限表&lt;/code&gt;，之后在拦截器中对每一个请求进行拦截，再到数据库中进行查询看当前用户是否有该权限，这样的设计能满足大多数中小型系统的需求。不过这篇所介绍的Shiro能满足之前的所有需求，并且使用简单，安全性高，而且现在越来越的多企业都在使用Shiro，这应该是一个收入的你的技能库。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;创建自定义MyRealm类&quot;&gt;&lt;a href=&quot;#创建自定义MyRealm类&quot; class=&quot;headerlink&quot; title=&quot;创建自定义MyRealm类&quot;&gt;&lt;/a&gt;创建自定义&lt;code&gt;MyRealm&lt;/code&gt;类&lt;/h1&gt;&lt;p&gt;有关Shiro的基础知识我这里就不过多介绍了，直接来干货，到最后会整合Spring来进行权限验证。&lt;br&gt;首先在使用Shiro的时候我们要考虑在什么样的环境下使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录的验证&lt;/li&gt;
&lt;li&gt;对指定角色的验证&lt;/li&gt;
&lt;li&gt;对URL的验证&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
      <category term="Shiro" scheme="http://crossoverJie.github.io/tags/Shiro/"/>
    
  </entry>
  
  <entry>
    <title>SSM(二)Lucene全文检索</title>
    <link href="http://crossoverJie.github.io/2016/07/06/SSM2/"/>
    <id>http://crossoverJie.github.io/2016/07/06/SSM2/</id>
    <published>2016-07-06T13:57:41.000Z</published>
    <updated>2017-07-29T11:50:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2017/07/29/597c7694a0f58.jpeg" alt="pexels-photo-257875.jpeg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>大家平时肯定都有用过全文检索工具，最常用的百度谷歌就是其中的典型。如果自己能够做一个那是不是想想就逼格满满呢。<a href="http://lucene.apache.org/" target="_blank" rel="external">Apache</a>就为我们提供了这样一个框架，以下就是在实际开发中加入Lucene的一个小Demo。</p>
</blockquote>
<hr>
<h1 id="获取Maven依赖"><a href="#获取Maven依赖" class="headerlink" title="获取Maven依赖"></a>获取Maven依赖</h1><p>首先看一下实际运行的效果图：<br><img src="http://i.imgur.com/pTTnv3R.png" alt=""><br><img src="http://i.imgur.com/nRcHFQg.png" alt=""><br><a id="more"></a><br>这个项目是基于之前使用IDEA搭建的SSM的基础上进行增加的，建议小白先看下一我。<a href="http://crossoverjie.top/2016/06/28/SSM1/" target="_blank" rel="external">上一篇博客</a>，以及共享在Github上的<a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">源码</a>。<br>以下是Lucene所需要的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--加入lucene--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-queryparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-common --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--lucene中文分词--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-smartcn --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-analyzers-smartcn<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--lucene高亮--&gt;</span></div><div class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-highlighter --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.lucene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lucene-highlighter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lucene.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>具体的用途我都写有注释。<br>在IDEA中修改了Pom.xml文件之后只需要点击如图所示的按钮即可重新获取依赖：<br><img src="http://i.imgur.com/0XU7DjK.png" alt=""></p>
<hr>
<h1 id="编写Lucene工具类"><a href="#编写Lucene工具类" class="headerlink" title="编写Lucene工具类"></a>编写Lucene工具类</h1><p>这个工具类中的具体代码我就不单独提出来说了，每个关键的地方我都写有注释，不清楚的再讨论。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.crossoverJie.lucene;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.crossoverJie.pojo.User;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.TokenStream;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Document;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.Field;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.StringField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.document.TextField;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.index.*;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.queryparser.classic.QueryParser;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.*;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.search.highlight.*;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.Directory;</div><div class="line"><span class="keyword">import</span> org.apache.lucene.store.FSDirectory;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.StringReader;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.LinkedList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> com.crossoverJie.util.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 博客索引类</div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuceneIndex</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Directory dir=<span class="keyword">null</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 获取IndexWriter实例</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> IndexWriter <span class="title">getWriter</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 生成的索引我放在了C盘，可以根据自己的需要放在具体位置</div><div class="line">		 */</div><div class="line">		dir= FSDirectory.open(Paths.get(<span class="string">"C://lucene"</span>));</div><div class="line">		SmartChineseAnalyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line">		IndexWriterConfig iwc=<span class="keyword">new</span> IndexWriterConfig(analyzer);</div><div class="line">		IndexWriter writer=<span class="keyword">new</span> IndexWriter(dir, iwc);</div><div class="line">		<span class="keyword">return</span> writer;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 添加博客索引</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIndex</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		IndexWriter writer=getWriter();</div><div class="line">		Document doc=<span class="keyword">new</span> Document();</div><div class="line">		doc.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>,String.valueOf(user.getUserId()), Field.Store.YES));</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * yes是会将数据存进索引，如果查询结果中需要将记录显示出来就要存进去，如果查询结果</div><div class="line">		 * 只是显示标题之类的就可以不用存，而且内容过长不建议存进去</div><div class="line">		 * 使用TextField类是可以用于查询的。</div><div class="line">		 */</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"username"</span>, user.getUsername(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>,user.getDescription(), Field.Store.YES));</div><div class="line">		writer.addDocument(doc);</div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 更新博客索引</div><div class="line">	 * <span class="doctag">@param</span> user</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateIndex</span><span class="params">(User user)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		IndexWriter writer=getWriter();</div><div class="line">		Document doc=<span class="keyword">new</span> Document();</div><div class="line">		doc.add(<span class="keyword">new</span> StringField(<span class="string">"id"</span>,String.valueOf(user.getUserId()), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"username"</span>, user.getUsername(), Field.Store.YES));</div><div class="line">		doc.add(<span class="keyword">new</span> TextField(<span class="string">"description"</span>,user.getDescription(), Field.Store.YES));</div><div class="line">		writer.updateDocument(<span class="keyword">new</span> Term(<span class="string">"id"</span>, String.valueOf(user.getUserId())), doc);</div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 删除指定博客的索引</div><div class="line">	 * <span class="doctag">@param</span> userId</div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteIndex</span><span class="params">(String userId)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		IndexWriter writer=getWriter();</div><div class="line">		writer.deleteDocuments(<span class="keyword">new</span> Term(<span class="string">"id"</span>, userId));</div><div class="line">		writer.forceMergeDeletes(); <span class="comment">// 强制删除</span></div><div class="line">		writer.commit();</div><div class="line">		writer.close();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 查询用户</div><div class="line">	 * <span class="doctag">@param</span> q 查询关键字</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 * <span class="doctag">@throws</span> Exception</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">searchBlog</span><span class="params">(String q)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 注意的是查询索引的位置得是存放索引的位置，不然会找不到。</div><div class="line">		 */</div><div class="line">		dir= FSDirectory.open(Paths.get(<span class="string">"C://lucene"</span>));</div><div class="line">		IndexReader reader = DirectoryReader.open(dir);</div><div class="line">		IndexSearcher is=<span class="keyword">new</span> IndexSearcher(reader);</div><div class="line">		BooleanQuery.Builder booleanQuery = <span class="keyword">new</span> BooleanQuery.Builder();</div><div class="line">		SmartChineseAnalyzer analyzer=<span class="keyword">new</span> SmartChineseAnalyzer();</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * username和description就是我们需要进行查找的两个字段</div><div class="line">		 * 同时在存放索引的时候要使用TextField类进行存放。</div><div class="line">		 */</div><div class="line">		QueryParser parser=<span class="keyword">new</span> QueryParser(<span class="string">"username"</span>,analyzer);</div><div class="line">		Query query=parser.parse(q);</div><div class="line">		QueryParser parser2=<span class="keyword">new</span> QueryParser(<span class="string">"description"</span>,analyzer);</div><div class="line">		Query query2=parser2.parse(q);</div><div class="line">		booleanQuery.add(query, BooleanClause.Occur.SHOULD);</div><div class="line">		booleanQuery.add(query2, BooleanClause.Occur.SHOULD);</div><div class="line">		TopDocs hits=is.search(booleanQuery.build(), <span class="number">100</span>);</div><div class="line">		QueryScorer scorer=<span class="keyword">new</span> QueryScorer(query);</div><div class="line">		Fragmenter fragmenter = <span class="keyword">new</span> SimpleSpanFragmenter(scorer);</div><div class="line">		<span class="comment">/**</span></div><div class="line">		 * 这里可以根据自己的需要来自定义查找关键字高亮时的样式。</div><div class="line">		 */</div><div class="line">		SimpleHTMLFormatter simpleHTMLFormatter=<span class="keyword">new</span> SimpleHTMLFormatter(<span class="string">"&lt;b&gt;&lt;font color='red'&gt;"</span>,<span class="string">"&lt;/font&gt;&lt;/b&gt;"</span>);</div><div class="line">		Highlighter highlighter=<span class="keyword">new</span> Highlighter(simpleHTMLFormatter, scorer);</div><div class="line">		highlighter.setTextFragmenter(fragmenter);</div><div class="line">		List&lt;User&gt; userList=<span class="keyword">new</span> LinkedList&lt;User&gt;();</div><div class="line">		<span class="keyword">for</span>(ScoreDoc scoreDoc:hits.scoreDocs)&#123;</div><div class="line">			Document doc=is.doc(scoreDoc.doc);</div><div class="line">			User user=<span class="keyword">new</span> User();</div><div class="line">			user.setUserId(Integer.parseInt(doc.get((<span class="string">"id"</span>))));</div><div class="line">			user.setDescription(doc.get((<span class="string">"description"</span>)));</div><div class="line">			String username=doc.get(<span class="string">"username"</span>);</div><div class="line">			String description=doc.get(<span class="string">"description"</span>);</div><div class="line">			<span class="keyword">if</span>(username!=<span class="keyword">null</span>)&#123;</div><div class="line">				TokenStream tokenStream = analyzer.tokenStream(<span class="string">"username"</span>, <span class="keyword">new</span> StringReader(username));</div><div class="line">				String husername=highlighter.getBestFragment(tokenStream, username);</div><div class="line">				<span class="keyword">if</span>(StringUtil.isEmpty(husername))&#123;</div><div class="line">					user.setUsername(username);</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					user.setUsername(husername);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span>(description!=<span class="keyword">null</span>)&#123;</div><div class="line">				TokenStream tokenStream = analyzer.tokenStream(<span class="string">"description"</span>, <span class="keyword">new</span> StringReader(description));</div><div class="line">				String hContent=highlighter.getBestFragment(tokenStream, description);</div><div class="line">				<span class="keyword">if</span>(StringUtil.isEmpty(hContent))&#123;</div><div class="line">					<span class="keyword">if</span>(description.length()&lt;=<span class="number">200</span>)&#123;</div><div class="line">						user.setDescription(description);</div><div class="line">					&#125;<span class="keyword">else</span>&#123;</div><div class="line">						user.setDescription(description.substring(<span class="number">0</span>, <span class="number">200</span>));</div><div class="line">					&#125;</div><div class="line">				&#125;<span class="keyword">else</span>&#123;</div><div class="line">					user.setDescription(hContent);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			userList.add(user);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> userList;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="查询Controller的编写"><a href="#查询Controller的编写" class="headerlink" title="查询Controller的编写"></a>查询Controller的编写</h1><p>接下来是查询Controller：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/q"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">search</span><span class="params">(@RequestParam(value = <span class="string">"q"</span>, required = <span class="keyword">false</span>,defaultValue = <span class="string">""</span>)</span> String q,</span></div><div class="line">                     @<span class="title">RequestParam</span><span class="params">(value = <span class="string">"page"</span>, required = <span class="keyword">false</span>, defaultValue = <span class="string">"1"</span>)</span> String page,</div><div class="line">                     Model model,</div><div class="line">                     HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    LuceneIndex luceneIndex = <span class="keyword">new</span> LuceneIndex() ;</div><div class="line">    List&lt;User&gt; userList = luceneIndex.searchBlog(q);</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 关于查询之后的分页我采用的是每次分页发起的请求都是将所有的数据查询出来，</div><div class="line">     * 具体是第几页再截取对应页数的数据，典型的拿空间换时间的做法，如果各位有什么</div><div class="line">     * 高招欢迎受教。</div><div class="line">     */</div><div class="line">    Integer toIndex = userList.size() &gt;= Integer.parseInt(page) * <span class="number">5</span> ? Integer.parseInt(page) * <span class="number">5</span> : userList.size();</div><div class="line">    List&lt;User&gt; newList = userList.subList((Integer.parseInt(page) - <span class="number">1</span>) * <span class="number">5</span>, toIndex);</div><div class="line">    model.addAttribute(<span class="string">"userList"</span>,newList) ;</div><div class="line">    String s = <span class="keyword">this</span>.genUpAndDownPageCode(Integer.parseInt(page), userList.size(), q, <span class="number">5</span>, request.getServletContext().</div><div class="line">            getContextPath());</div><div class="line">    model.addAttribute(<span class="string">"pageHtml"</span>,s) ;</div><div class="line">    model.addAttribute(<span class="string">"q"</span>,q) ;</div><div class="line">    model.addAttribute(<span class="string">"resultTotal"</span>,userList.size()) ;</div><div class="line">    model.addAttribute(<span class="string">"pageTitle"</span>,<span class="string">"搜索关键字'"</span> + q + <span class="string">"'结果页面"</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">"queryResult"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中有用到一个<code>genUpAndDownPageCode()</code>方法来生成分页的Html代码，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 查询之后的分页</div><div class="line"> * <span class="doctag">@param</span> page</div><div class="line"> * <span class="doctag">@param</span> totalNum</div><div class="line"> * <span class="doctag">@param</span> q</div><div class="line"> * <span class="doctag">@param</span> pageSize</div><div class="line"> * <span class="doctag">@param</span> projectContext</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">genUpAndDownPageCode</span><span class="params">(<span class="keyword">int</span> page,Integer totalNum,String q,Integer pageSize,String projectContext)</span></span>&#123;</div><div class="line">    <span class="keyword">long</span> totalPage=totalNum%pageSize==<span class="number">0</span>?totalNum/pageSize:totalNum/pageSize+<span class="number">1</span>;</div><div class="line">    StringBuffer pageCode=<span class="keyword">new</span> StringBuffer();</div><div class="line">    <span class="keyword">if</span>(totalPage==<span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        pageCode.append(<span class="string">"&lt;nav&gt;"</span>);</div><div class="line">        pageCode.append(<span class="string">"&lt;ul class='pager' &gt;"</span>);</div><div class="line">        <span class="keyword">if</span>(page&gt;<span class="number">1</span>)&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li&gt;&lt;a href='"</span>+projectContext+<span class="string">"/q?page="</span>+(page-<span class="number">1</span>)+<span class="string">"&amp;q="</span>+q+<span class="string">"'&gt;上一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li class='disabled'&gt;&lt;a href='#'&gt;上一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(page&lt;totalPage)&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li&gt;&lt;a href='"</span>+projectContext+<span class="string">"/q?page="</span>+(page+<span class="number">1</span>)+<span class="string">"&amp;q="</span>+q+<span class="string">"'&gt;下一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            pageCode.append(<span class="string">"&lt;li class='disabled'&gt;&lt;a href='#'&gt;下一页&lt;/a&gt;&lt;/li&gt;"</span>);</div><div class="line">        &#125;</div><div class="line">        pageCode.append(<span class="string">"&lt;/ul&gt;"</span>);</div><div class="line">        pageCode.append(<span class="string">"&lt;/nav&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> pageCode.toString();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码比较简单，就是根据的页数、总页数来生成分页代码，对了我前端采用的是现在流行的Bootstrap，这个有不会的可以去他<a href="http://www.bootcss.com/" target="_blank" rel="external">官网</a>看看，比较简单易上手。接下来只需要编写显示界面就大功告成了。<br><img src="http://i.imgur.com/NUZM7Bc.png" alt=""></p>
<hr>
<h1 id="显示界面"><a href="#显示界面" class="headerlink" title="显示界面"></a>显示界面</h1><p>我只贴关键代码，具体的可以去Github上查看。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">c:choose</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">c:when</span> <span class="attr">test</span>=<span class="string">"$&#123;userList.size()==0 &#125;"</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"padding-top: 20px"</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>$&#123;q&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span>未查询到结果，请换个关键字试试！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">c:when</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">c:otherwise</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">style</span>=<span class="string">"padding-top: 20px"</span>&gt;</span></div><div class="line">                            查询<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>$&#123;q&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span>关键字，约$&#123;resultTotal&#125;条记录！</div><div class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">var</span>=<span class="string">"u"</span> <span class="attr">items</span>=<span class="string">"$&#123;userList &#125;"</span> <span class="attr">varStatus</span>=<span class="string">"status"</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading "</span>&gt;</span></div><div class="line"></div><div class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></div><div class="line">                                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">                                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></div><div class="line">                                                <span class="tag">&lt;<span class="name">b</span>&gt;</span></div><div class="line">                                                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=path %&gt;/user/showUser/$&#123;u.userId&#125;"</span>&gt;</span>$&#123;u.username&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                                                <span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">                                                <span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">                                                    $&#123;u.description&#125;</div><div class="line">                                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-2"</span>&gt;</span></div><div class="line">                                        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted text-right"</span>&gt;</span></div><div class="line">                                                $&#123;u.password&#125;</div><div class="line">                                        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-comment"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">							 $&#123;u.password&#125;</div><div class="line">							<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">                                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">c:otherwise</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">c:choose</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>利用<code>JSTL</code>标签即可将数据循环展示出来，关键字就不需要单独做处理了，在后台查询的时候已经做了修改了。</p>
<hr>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于全文检索的框架不止<code>Lucene</code>还有<code>solr</code>，具体谁好有什么区别我也不太清楚，准备下来花点时间研究下。哦对了，最近又有点想做<code>Android</code>开发了，感觉做点东西能够实实在在的摸得到逼格确实要高些(现在主要在做后端开发)，感兴趣的朋友可以关注下。哦对了，直接运行我代码的朋友要下注意：</p>
<ul>
<li>首先要将数据库倒到自己的MySQL上<img src="http://i.imgur.com/rSodBB5.png" alt=""></li>
<li>之后在首次运行的时候需要点击<img src="http://i.imgur.com/jQySeaf.png" alt="">重新生成索引按钮生成一遍索引之后才能进行搜索，因为现在的数据是直接存到数据库中的，并没有在新增的时候就增加索引，在实际开发的时候需要在新增数据那里再生成一份索引，就直接调用<code>LuceneIndex</code>类中的<code>addIndex</code>方法传入实体即可，再做更新、删除操作的时候也同样需要对索引做操作。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2017/07/29/597c7694a0f58.jpeg&quot; alt=&quot;pexels-photo-257875.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;大家平时肯定都有用过全文检索工具，最常用的百度谷歌就是其中的典型。如果自己能够做一个那是不是想想就逼格满满呢。&lt;a href=&quot;http://lucene.apache.org/&quot;&gt;Apache&lt;/a&gt;就为我们提供了这样一个框架，以下就是在实际开发中加入Lucene的一个小Demo。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;获取Maven依赖&quot;&gt;&lt;a href=&quot;#获取Maven依赖&quot; class=&quot;headerlink&quot; title=&quot;获取Maven依赖&quot;&gt;&lt;/a&gt;获取Maven依赖&lt;/h1&gt;&lt;p&gt;首先看一下实际运行的效果图：&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/pTTnv3R.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://i.imgur.com/nRcHFQg.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverJie.github.io/categories/SSM/"/>
    
    
      <category term="Java" scheme="http://crossoverJie.github.io/tags/Java/"/>
    
      <category term="IDEA" scheme="http://crossoverJie.github.io/tags/IDEA/"/>
    
      <category term="Lucene" scheme="http://crossoverJie.github.io/tags/Lucene/"/>
    
  </entry>
  
</feed>
