<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>crossoverJie&#39;s Blog</title>
  <subtitle>baller</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://crossoverjie.top/"/>
  <updated>2018-07-29T07:32:28.954Z</updated>
  <id>http://crossoverjie.top/</id>
  
  <author>
    <name>crossoverJie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何优雅的使用和理解线程池</title>
    <link href="http://crossoverjie.top/2018/07/29/java-senior/ThreadPool/"/>
    <id>http://crossoverjie.top/2018/07/29/java-senior/ThreadPool/</id>
    <published>2018-07-28T18:00:16.000Z</published>
    <updated>2018-07-29T07:32:28.954Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftpwh3a2szj31kw11xh84.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时接触过多线程开发的童鞋应该都或多或少了解过线程池，之前发布的《阿里巴巴 Java 手册》里也有一条：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftpxf3x1epj30la03s0tl.jpg" alt=""></p>
<p>可见线程池的重要性。</p>
<p>简单来说使用线程池有以下几个目的：</p>
<ul>
<li>线程是稀缺资源，不能频繁的创建。</li>
<li>解耦作用；线程的创建于执行完全分开，方便维护。</li>
<li>应当将其放入一个池子中，可以给其他任务进行复用。</li>
</ul>
<h2 id="线程池原理"><a href="#线程池原理" class="headerlink" title="线程池原理"></a>线程池原理</h2><p>谈到线程池就会想到池化技术，其中最核心的思想就是把宝贵的资源放到一个池子中；每次使用都从里面获取，用完之后又放回池子供其他人使用，有点吃大锅饭的意思。</p>
<p>那在 Java 中又是如何实现的呢？</p>
<p>在 JDK 1.5 之后推出了相关的 api，常见的创建线程池方式有以下几种：</p>
<ul>
<li><code>Executors.newCachedThreadPool()</code>：无限线程池。</li>
<li><code>Executors.newFixedThreadPool(nThreads)</code>：创建固定大小的线程池。</li>
<li><code>Executors.newSingleThreadExecutor()</code>：创建单个线程的线程池。</li>
</ul>
<a id="more"></a>
<p>其实看这三种方式创建的源码就会发现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际上还是利用 <code>ThreadPoolExecutor</code> 类实现的。</p>
<p>所以我们重点来看下 <code>ThreadPoolExecutor</code> 是怎么玩的。</p>
<p>首先是创建线程的 api：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)</div></pre></td></tr></table></figure>
<p>这几个核心参数的作用：</p>
<ul>
<li><code>corePoolSize</code> 为线程池的基本大小。</li>
<li><code>maximumPoolSize</code> 为线程池最大线程大小。</li>
<li><code>keepAliveTime</code> 和 <code>unit</code> 则是线程空闲后的存活时间。</li>
<li><code>workQueue</code> 用于存放任务的阻塞队列。</li>
<li><code>handler</code> 当队列和最大线程池都满了之后的饱和策略。</li>
</ul>
<p>了解了这几个参数再来看看实际的运用。</p>
<p>通常我们都是使用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">threadPool.execute(<span class="keyword">new</span> Job());</div></pre></td></tr></table></figure>
<p>这样的方式来提交一个任务到线程池中，所以核心的逻辑就是 <code>execute()</code> 函数了。</p>
<p>在具体分析之前先了解下线程池中所定义的状态，这些状态都和线程的执行密切相关：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftq1ks5qywj30jn03i3za.jpg" alt=""></p>
<ul>
<li><code>RUNNING</code> 自然是运行状态，指可以接受任务执行队列里的任务</li>
<li><code>SHUTDOWN</code> 指调用了 <code>shutdown()</code> 方法，不再接受新任务了，但是队列里的任务得执行完毕。</li>
<li><code>STOP</code> 指调用了 <code>shutdownNow()</code> 方法，不再接受新任务，同时抛弃阻塞队列里的所有任务并中断所有正在执行任务。</li>
<li><code>TIDYING</code> 所有任务都执行完毕，在调用 <code>shutdown()/shutdownNow()</code> 中都会尝试更新为这个状态。</li>
<li><code>TERMINATED</code> 终止状态，当执行 <code>terminated()</code> 后会更新为这个状态。</li>
</ul>
<p>用图表示为：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftq2nxlwe5j30sp0ba0ts.jpg" alt=""></p>
<p>然后看看 <code>execute()</code> 方法是如何处理的：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftq283zi91j30ky08mwgb.jpg" alt=""></p>
<ol>
<li>获取当前线程池的状态。</li>
<li>当前线程数量小于 coreSize 时创建一个新的线程运行。</li>
<li>如果当前线程处于运行状态，并且写入阻塞队列成功。</li>
<li>双重检查，再次获取线程状态；如果线程状态变了（非运行状态）就需要从阻塞队列移除任务，并尝试判断线程是否全部执行完毕。同时执行拒绝策略。</li>
<li>如果当前线程池为空就新创建一个线程并执行。</li>
<li>如果在第三步的判断为非运行状态，尝试新建线程，如果失败则执行拒绝策略。</li>
</ol>
<p>这里借助《聊聊并发》的一张图来描述这个流程：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftq2vzuv5rj30dw085q3i.jpg" alt=""></p>
<h3 id="如何配置线程"><a href="#如何配置线程" class="headerlink" title="如何配置线程"></a>如何配置线程</h3><p>流程聊完了再来看看上文提到了几个核心参数应该如何配置呢？</p>
<p>有一点是肯定的，线程池肯定是不是越大越好。</p>
<p>通常我们是需要根据这批任务执行的性质来确定的。</p>
<ul>
<li>IO 密集型任务：由于线程并不是一直在运行，所以可以尽可能的多配置线程，比如 CPU 个数 * 2 </li>
<li>CPU 密集型任务（大量复杂的运算）应当分配较少的线程，比如 CPU 个数相当的大小。</li>
</ul>
<p>当然这些都是经验值，最好的方式还是根据实际情况测试得出最佳配置。</p>
<h3 id="优雅的关闭线程池"><a href="#优雅的关闭线程池" class="headerlink" title="优雅的关闭线程池"></a>优雅的关闭线程池</h3><p>有运行任务自然也有关闭任务，从上文提到的 5 个状态就能看出如何来关闭线程池。</p>
<p>其实无非就是两个方法 <code>shutdown()/shutdownNow()</code>。</p>
<p>但他们有着重要的区别：</p>
<ul>
<li><code>shutdown()</code> 执行后停止接受新任务，会把队列的任务执行完毕。</li>
<li><code>shutdownNow()</code> 也是停止接受新任务，但会中断所有的任务，将线程池状态变为 stop。</li>
</ul>
<blockquote>
<p>两个方法都会中断线程，用户可自行判断是否需要响应中断。</p>
</blockquote>
<p><code>shutdownNow()</code> 要更简单粗暴，可以根据实际场景选择不同的方法。</p>
<p>我通常是按照以下方式关闭线程池的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++) &#123;</div><div class="line">    pool.execute(<span class="keyword">new</span> Job());</div><div class="line">&#125;</div><div class="line"></div><div class="line">pool.shutdown();</div><div class="line"></div><div class="line"><span class="keyword">while</span> (!pool.awaitTermination(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</div><div class="line">    LOGGER.info(<span class="string">"线程还在执行。。。"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</div><div class="line">LOGGER.info(<span class="string">"一共处理了【&#123;&#125;】"</span>, (end - start));</div></pre></td></tr></table></figure>
<p><code>pool.awaitTermination(1, TimeUnit.SECONDS)</code> 会每隔一秒钟检查一次是否执行完毕（状态为 <code>TERMINATED</code>），当从 while 循环退出时就表明线程池已经完全终止了。</p>
<h2 id="SpringBoot-使用线程池"><a href="#SpringBoot-使用线程池" class="headerlink" title="SpringBoot 使用线程池"></a>SpringBoot 使用线程池</h2><p>2018 年了，SpringBoot 盛行；来看看在 SpringBoot 中应当怎么配置和使用线程池。</p>
<p>既然用了 SpringBoot ，那自然得发挥 Spring 的特性，所以需要 Spring 来帮我们管理线程池：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreadPoolConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 消费队列线程</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span>(value = <span class="string">"consumerQueueThreadPool"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ExecutorService <span class="title">buildConsumerQueueThreadPool</span><span class="params">()</span></span>&#123;</div><div class="line">        ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</div><div class="line">                .setNameFormat(<span class="string">"consumer-queue-thread-%d"</span>).build();</div><div class="line"></div><div class="line">        ExecutorService pool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">5</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;Runnable&gt;(<span class="number">5</span>),namedThreadFactory,<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pool ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Resource</span>(name = <span class="string">"consumerQueueThreadPool"</span>)</div><div class="line"><span class="keyword">private</span> ExecutorService consumerQueueThreadPool;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//消费队列</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        consumerQueueThreadPool.execute(<span class="keyword">new</span> ConsumerQueueThread());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实也挺简单，就是创建了一个线程池的 bean，在使用时直接从 Spring 中取出即可。</p>
<h2 id="监控线程池"><a href="#监控线程池" class="headerlink" title="监控线程池"></a>监控线程池</h2><p>谈到了 SpringBoot，也可利用它 actuator 组件来做线程池的监控。</p>
<p>线程怎么说都是稀缺资源，对线程池的监控可以知道自己任务执行的状况、效率等。</p>
<p>关于 actuator 就不再细说了，感兴趣的可以看看<a href="http://t.cn/ReimM0o" target="_blank" rel="external">这篇</a>，有详细整理过如何暴露监控端点。</p>
<p>其实 ThreadPool 本身已经提供了不少 api 可以获取线程状态：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftq3xsrbs6j30bg0bpgnb.jpg" alt=""></p>
<p>很多方法看名字就知道其含义，只需要将这些信息暴露到 SpringBoot 的监控端点中，我们就可以在可视化页面查看当前的线程池状态了。</p>
<p>甚至我们可以继承线程池扩展其中的几个函数来自定义监控逻辑：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftq40lkw9jj30mq07rmyt.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftq41asf8rj30kq07cabd.jpg" alt=""></p>
<p>看这些名称和定义都知道，这是让子类来实现的。</p>
<p>可以在线程执行前、后、终止状态执行自定义逻辑。</p>
<h2 id="线程池隔离"><a href="#线程池隔离" class="headerlink" title="线程池隔离"></a>线程池隔离</h2><blockquote>
<p>线程池看似很美好，但也会带来一些问题。</p>
</blockquote>
<p>如果我们很多业务都依赖于同一个线程池,当其中一个业务因为各种不可控的原因消耗了所有的线程，导致线程池全部占满。</p>
<p>这样其他的业务也就不能正常运转了，这对系统的打击是巨大的。</p>
<p>比如我们 Tomcat 接受请求的线程池，假设其中一些响应特别慢，线程资源得不到回收释放；线程池慢慢被占满，最坏的情况就是整个应用都不能提供服务。</p>
<p>所以我们需要将线程池<strong>进行隔离</strong>。</p>
<p>通常的做法是按照业务进行划分：</p>
<blockquote>
<p>比如下单的任务用一个线程池，获取数据的任务用另一个线程池。这样即使其中一个出现问题把线程池耗尽，那也不会影响其他的任务运行。</p>
</blockquote>
<h3 id="hystrix-隔离"><a href="#hystrix-隔离" class="headerlink" title="hystrix 隔离"></a>hystrix 隔离</h3><p>这样的需求 <a href="https://github.com/Netflix/Hystrix" target="_blank" rel="external">Hystrix</a> 已经帮我们实现了。</p>
<blockquote>
<p>Hystrix 是一款开源的容错插件，具有依赖隔离、系统容错降级等功能。</p>
</blockquote>
<p>下面来看看 <code>Hystrix</code> 简单的应用：</p>
<p>首先需要定义两个线程池，分别用于执行订单、处理用户。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:订单服务</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> *         Date: 2018/7/28 16:43</div><div class="line"> * <span class="doctag">@since</span> JDK 1.8</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandOrder</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(CommandOrder.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String orderName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandOrder</span><span class="params">(String orderName)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(</div><div class="line">                <span class="comment">//服务分组</span></div><div class="line">                HystrixCommandGroupKey.Factory.asKey(<span class="string">"OrderGroup"</span>))</div><div class="line">                <span class="comment">//线程分组</span></div><div class="line">                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"OrderPool"</span>))</div><div class="line"></div><div class="line">                <span class="comment">//线程池配置</span></div><div class="line">                .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</div><div class="line">                        .withCoreSize(<span class="number">10</span>)</div><div class="line">                        .withKeepAliveTimeMinutes(<span class="number">5</span>)</div><div class="line">                        .withMaxQueueSize(<span class="number">10</span>)</div><div class="line">                        .withQueueSizeRejectionThreshold(<span class="number">10000</span>))</div><div class="line"></div><div class="line">                .andCommandPropertiesDefaults(</div><div class="line">                        HystrixCommandProperties.Setter()</div><div class="line">                                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD))</div><div class="line">        )</div><div class="line">        ;</div><div class="line">        <span class="keyword">this</span>.orderName = orderName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"orderName=[&#123;&#125;]"</span>, orderName);</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"OrderName="</span> + orderName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Function:用户服务</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> crossoverJie</div><div class="line"> *         Date: 2018/7/28 16:43</div><div class="line"> * <span class="doctag">@since</span> JDK 1.8</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandUser</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(CommandUser.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CommandUser</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(</div><div class="line">                <span class="comment">//服务分组</span></div><div class="line">                HystrixCommandGroupKey.Factory.asKey(<span class="string">"UserGroup"</span>))</div><div class="line">                <span class="comment">//线程分组</span></div><div class="line">                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"UserPool"</span>))</div><div class="line"></div><div class="line">                <span class="comment">//线程池配置</span></div><div class="line">                .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter()</div><div class="line">                        .withCoreSize(<span class="number">10</span>)</div><div class="line">                        .withKeepAliveTimeMinutes(<span class="number">5</span>)</div><div class="line">                        .withMaxQueueSize(<span class="number">10</span>)</div><div class="line">                        .withQueueSizeRejectionThreshold(<span class="number">10000</span>))</div><div class="line"></div><div class="line">                <span class="comment">//线程池隔离</span></div><div class="line">                .andCommandPropertiesDefaults(</div><div class="line">                        HystrixCommandProperties.Setter()</div><div class="line">                                .withExecutionIsolationStrategy(HystrixCommandProperties.ExecutionIsolationStrategy.THREAD))</div><div class="line">        )</div><div class="line">        ;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"userName=[&#123;&#125;]"</span>, userName);</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"userName="</span> + userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><code>api</code> 特别简洁易懂，具体详情请查看官方文档。</p>
<p>然后模拟运行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    CommandOrder commandPhone = <span class="keyword">new</span> CommandOrder(<span class="string">"手机"</span>);</div><div class="line">    CommandOrder command = <span class="keyword">new</span> CommandOrder(<span class="string">"电视"</span>);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//阻塞方式执行</span></div><div class="line">    String execute = commandPhone.execute();</div><div class="line">    LOGGER.info(<span class="string">"execute=[&#123;&#125;]"</span>, execute);</div><div class="line"></div><div class="line">    <span class="comment">//异步非阻塞方式</span></div><div class="line">    Future&lt;String&gt; queue = command.queue();</div><div class="line">    String value = queue.get(<span class="number">200</span>, TimeUnit.MILLISECONDS);</div><div class="line">    LOGGER.info(<span class="string">"value=[&#123;&#125;]"</span>, value);</div><div class="line"></div><div class="line"></div><div class="line">    CommandUser commandUser = <span class="keyword">new</span> CommandUser(<span class="string">"张三"</span>);</div><div class="line">    String name = commandUser.execute();</div><div class="line">    LOGGER.info(<span class="string">"name=[&#123;&#125;]"</span>, name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>运行结果：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftq4e0ukubj30ps04gtak.jpg" alt=""></p>
<p>可以看到两个任务分成了两个线程池运行，他们之间互不干扰。</p>
<p>获取任务任务结果支持同步阻塞和异步非阻塞方式，可自行选择。</p>
<p>它的实现原理其实容易猜到：</p>
<blockquote>
<p>利用一个 Map 来存放不同业务对应的线程池。</p>
</blockquote>
<p>通过刚才的构造函数也能证明：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftq4i6xy2qj30uo09adhp.jpg" alt=""></p>
<p>还要注意的一点是：</p>
<blockquote>
<p>自定义的 Command 并不是一个单例，每次执行需要 new 一个实例，不然会报 <code>This instance can only be executed once. Please instantiate a new instance.</code> 异常。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>池化技术确实在平时应用广泛，熟练掌握能提高不少效率。</p>
<p>文末的 hystrix 源码：</p>
<p><a href="https://github.com/crossoverJie/Java-Interview/tree/master/src/main/java/com/crossoverjie/hystrix" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/tree/master/src/main/java/com/crossoverjie/hystrix</a></p>
<p>最后插播个小广告：</p>
<p><a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">Java-Interview</a> 截止目前将近 8K star。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftq4ygnncrj30ru09p40i.jpg" alt=""></p>
<p>这次定个小目标：争取冲击 <code>1W star</code>。</p>
<p>感谢各位老铁的支持与点赞。</p>
<p><strong>欢迎关注公众号一起交流：</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1ftpwh3a2szj31kw11xh84.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;平时接触过多线程开发的童鞋应该都或多或少了解过线程池，之前发布的《阿里巴巴 Java 手册》里也有一条：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1ftpxf3x1epj30la03s0tl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可见线程池的重要性。&lt;/p&gt;
&lt;p&gt;简单来说使用线程池有以下几个目的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程是稀缺资源，不能频繁的创建。&lt;/li&gt;
&lt;li&gt;解耦作用；线程的创建于执行完全分开，方便维护。&lt;/li&gt;
&lt;li&gt;应当将其放入一个池子中，可以给其他任务进行复用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;线程池原理&quot;&gt;&lt;a href=&quot;#线程池原理&quot; class=&quot;headerlink&quot; title=&quot;线程池原理&quot;&gt;&lt;/a&gt;线程池原理&lt;/h2&gt;&lt;p&gt;谈到线程池就会想到池化技术，其中最核心的思想就是把宝贵的资源放到一个池子中；每次使用都从里面获取，用完之后又放回池子供其他人使用，有点吃大锅饭的意思。&lt;/p&gt;
&lt;p&gt;那在 Java 中又是如何实现的呢？&lt;/p&gt;
&lt;p&gt;在 JDK 1.5 之后推出了相关的 api，常见的创建线程池方式有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Executors.newCachedThreadPool()&lt;/code&gt;：无限线程池。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Executors.newFixedThreadPool(nThreads)&lt;/code&gt;：创建固定大小的线程池。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Executors.newSingleThreadExecutor()&lt;/code&gt;：创建单个线程的线程池。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="ThreadPool" scheme="http://crossoverjie.top/tags/ThreadPool/"/>
    
      <category term="Hystirx" scheme="http://crossoverjie.top/tags/Hystirx/"/>
    
  </entry>
  
  <entry>
    <title>HashMap? ConcurrentHashMap? 相信看完这篇没人能难住你！</title>
    <link href="http://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/"/>
    <id>http://crossoverjie.top/2018/07/23/java-senior/ConcurrentHashMap/</id>
    <published>2018-07-22T17:10:16.000Z</published>
    <updated>2018-07-24T05:22:32.413Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fthz5oibm0j31kw11xu0g.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Map 这样的 <code>Key Value</code> 在软件开发中是非常经典的结构，常用于在内存中存放数据。</p>
<p>本篇主要想讨论 ConcurrentHashMap 这样一个并发容器，在正式开始之前我觉得有必要谈谈 HashMap，没有它就不会有后面的 ConcurrentHashMap。</p>
<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>众所周知 HashMap 底层是基于 <code>数组 + 链表</code> 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。</p>
<h3 id="Base-1-7"><a href="#Base-1-7" class="headerlink" title="Base 1.7"></a>Base 1.7</h3><p>1.7 中的数据结构图：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ftiv16vu4aj30i30k4q47.jpg" alt=""></p>
<a id="more"></a>
<p>先来看看 1.7 中的实现。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fti10f33ssj30rq0lq0wf.jpg" alt=""></p>
<p>这是 HashMap 中比较核心的几个成员变量；看看分别是什么意思？</p>
<ol>
<li>初始化桶大小，因为底层是数组，所以这是数组默认的大小。</li>
<li>桶最大值。</li>
<li>默认的负载因子（0.75）</li>
<li><code>table</code> 真正存放数据的数组。</li>
<li><code>Map</code> 存放数量的大小。</li>
<li>桶大小，可在初始化时显式指定。</li>
<li>负载因子，可在初始化时显式指定。</li>
</ol>
<p>重点解释下负载因子：</p>
<p>由于给定的 HashMap 的容量大小是固定的，比如默认初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                           loadFactor);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    threshold = initialCapacity;</div><div class="line">    init();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 <code>16 * 0.75 = 12</code> 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p>
<p>因此通常建议能提前预估 HashMap 的大小最好，尽量的减少扩容带来的性能损耗。</p>
<p>根据代码可以看到其实真正存放数据的是 </p>
<p><code>transient Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</code> </p>
<p>这个数组，那么它又是如何定义的呢？</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fti1v5hei4j30l40d4q4q.jpg" alt=""></p>
<p>Entry 是 HashMap 中的一个内部类，从他的成员变量很容易看出：</p>
<ul>
<li>key 就是写入时的键。</li>
<li>value 自然就是值。</li>
<li>开始的时候就提到 HashMap 是由数组和链表组成，所以这个 next 就是用于实现链表结构。</li>
<li>hash 存放的是当前 key 的 hashcode。</li>
</ul>
<p>知晓了基本结构，那来看看其中重要的写入、获取函数：</p>
<h4 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</div><div class="line">        inflateTable(threshold);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> putForNullKey(value);</div><div class="line">    <span class="keyword">int</span> hash = hash(key);</div><div class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            e.recordAccess(<span class="keyword">this</span>);</div><div class="line">            <span class="keyword">return</span> oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>判断当前数组是否需要初始化。</li>
<li>如果 key 为空，则 put 一个空值进去。</li>
<li>根据 key 计算出 hashcode。</li>
<li>根据计算出的 hashcode 定位出所在桶。</li>
<li>如果桶是一个链表则需要遍历判断里面的 hashcode、key 是否和传入 key 相等，如果相等则进行覆盖，并返回原来的值。</li>
<li>如果桶是空的，说明当前位置没有数据存入；新增一个 Entry 对象写入当前位置。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</div><div class="line">        resize(<span class="number">2</span> * table.length);</div><div class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</div><div class="line">        bucketIndex = indexFor(hash, table.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createEntry(hash, key, value, bucketIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用 addEntry 写入 Entry 时需要判断是否需要扩容。</p>
<p>如果需要就进行两倍扩充，并将当前的 key 重新 hash 并定位。</p>
<p>而在 <code>createEntry</code> 中会将当前位置的桶传入到新建的桶中，如果当前桶有值就会在位置形成链表。</p>
<h4 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h4><p>再来看看 get 函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> getForNullKey();</div><div class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</div><div class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</div><div class="line">         e != <span class="keyword">null</span>;</div><div class="line">         e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>首先也是根据 key 计算出 hashcode，然后定位到具体的桶中。</li>
<li>判断该位置是否为链表。</li>
<li>不是链表就根据 <code>key、key 的 hashcode</code> 是否相等来返回值。</li>
<li>为链表则需要遍历直到 key 及 hashcode 相等时候就返回值。</li>
<li>啥都没取到就直接返回 null 。</li>
</ul>
<h3 id="Base-1-8"><a href="#Base-1-8" class="headerlink" title="Base 1.8"></a>Base 1.8</h3><p>不知道 1.7 的实现大家看出需要优化的点没有？</p>
<p>其实一个很明显的地方就是：</p>
<blockquote>
<p>当 Hash 冲突严重时，在桶上形成的链表会变的越来越长，这样在查询时的效率就会越来越低；时间复杂度为 <code>O(N)</code>。</p>
</blockquote>
<p>因此 1.8 中重点优化了这个查询效率。</p>
<p>1.8 HashMap 结构图：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ftivc5xwb2j30lh0c5dgh.jpg" alt=""></p>
<p>先来看看几个核心的成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The maximum capacity, used if a higher value is implicitly specified</div><div class="line"> * by either of the constructors with arguments.</div><div class="line"> * MUST be a power of two &lt;= 1&lt;&lt;30.</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The load factor used when none specified in constructor.</div><div class="line"> */</div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Holds cached entrySet(). Note that AbstractMap fields are used</div><div class="line"> * for keySet() and values().</div><div class="line"> */</div><div class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The number of key-value mappings contained in this map.</div><div class="line"> */</div><div class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</div></pre></td></tr></table></figure>
<p>和 1.7 大体上都差不多，还是有几个重要的区别：</p>
<ul>
<li><code>TREEIFY_THRESHOLD</code> 用于判断是否需要将链表转换为红黑树的阈值。</li>
<li>HashEntry 修改为 Node。</li>
</ul>
<p>Node 的核心组成其实也是和 1.7 中的 HashEntry 一样，存放的都是 <code>key value hashcode next</code> 等数据。</p>
<p>再来看看核心方法。</p>
<h4 id="put-方法-1"><a href="#put-方法-1" class="headerlink" title="put 方法"></a>put 方法</h4><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ftius4g5wuj30pz0lk0x9.jpg" alt=""></p>
<p>看似要比 1.7 的复杂，我们一步步拆解：</p>
<ol>
<li>判断当前桶是否为空，空的就需要初始化（resize 中会判断是否进行初始化）。</li>
<li>根据当前 key 的 hashcode 定位到具体的桶中并判断是否为空，为空表明没有 Hash 冲突就直接在当前位置创建一个新桶即可。</li>
<li>如果当前桶有值（ Hash 冲突），那么就要比较当前桶中的 <code>key、key 的 hashcode</code> 与写入的 key 是否相等，相等就赋值给 <code>e</code>,在第 8 步的时候会统一进行赋值及返回。</li>
<li>如果当前桶为红黑树，那就要按照红黑树的方式写入数据。</li>
<li>如果是个链表，就需要将当前的 key、value 封装成一个新节点写入到当前桶的后面（形成链表）。</li>
<li>接着判断当前链表的大小是否大于预设的阈值，大于时就要转换为红黑树。</li>
<li>如果在遍历过程中找到 key 相同时直接退出遍历。</li>
<li>如果 <code>e != null</code> 就相当于存在相同的 key,那就需要将值覆盖。</li>
<li>最后判断是否需要进行扩容。</li>
</ol>
<h4 id="get-方法-1"><a href="#get-方法-1" class="headerlink" title="get 方法"></a>get 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt; e;</div><div class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</div><div class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">            <span class="keyword">return</span> first;</div><div class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">            <span class="keyword">do</span> &#123;</div><div class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                    <span class="keyword">return</span> e;</div><div class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>get 方法看起来就要简单许多了。</p>
<ul>
<li>首先将 key hash 之后取得所定位的桶。</li>
<li>如果桶为空则直接返回 null 。</li>
<li>否则判断桶的第一个位置(有可能是链表、红黑树)的 key 是否为查询的 key，是就直接返回 value。</li>
<li>如果第一个不匹配，则判断它的下一个是红黑树还是链表。</li>
<li>红黑树就按照树的查找方式返回值。</li>
<li>不然就按照链表的方式遍历匹配返回值。</li>
</ul>
<p>从这两个核心方法（get/put）可以看出 1.8 中对大链表做了优化，修改为红黑树之后查询效率直接提高到了 <code>O(logn)</code>。</p>
<p>但是 HashMap 原有的问题也都存在，比如在并发场景下使用时容易出现死循环。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            map.put(UUID.randomUUID().toString(), <span class="string">""</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是为什么呢？简单分析下。</p>
<p>看过上文的还记得在 HashMap 扩容的时候会调用 <code>resize()</code> 方法，就是这里的并发操作容易在一个桶上形成环形链表；这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标就会出现死循环。</p>
<p>如下图：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ftj05moamfj30n20iign7.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ftj05syvuvj30n20iign7.jpg" alt=""></p>
<h3 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h3><p>还有一个值得注意的是 HashMap 的遍历方式，通常有以下几种：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; entryIterator = map.entrySet().iterator();</div><div class="line">        <span class="keyword">while</span> (entryIterator.hasNext()) &#123;</div><div class="line">            Map.Entry&lt;String, Integer&gt; next = entryIterator.next();</div><div class="line">            System.out.println(<span class="string">"key="</span> + next.getKey() + <span class="string">" value="</span> + next.getValue());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</div><div class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</div><div class="line">            String key = iterator.next();</div><div class="line">            System.out.println(<span class="string">"key="</span> + key + <span class="string">" value="</span> + map.get(key));</div><div class="line"></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><code>强烈建议</code>使用第一种 EntrySet 进行遍历。</p>
<p>第一种可以把 key value 同时取出，第二种还得需要通过 key 取一次 value，效率较低。</p>
<blockquote>
<p>简单总结下 HashMap：无论是 1.7 还是 1.8 其实都能看出 JDK 没有对它做任何的同步操作，所以并发会出问题，甚至 1.7 中出现死循环导致系统不可用（1.8 已经修复死循环问题）。</p>
</blockquote>
<p>因此 JDK 推出了专项专用的 ConcurrentHashMap ，该类位于 <code>java.util.concurrent</code> 包下，专门用于解决并发问题。</p>
<blockquote>
<p>坚持看到这里的朋友算是已经把 ConcurrentHashMap 的基础已经打牢了，下面正式开始分析。</p>
</blockquote>
<h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><p>ConcurrentHashMap 同样也分为 1.7 、1.8 版，两者在实现上略有不同。</p>
<h3 id="Base-1-7-1"><a href="#Base-1-7-1" class="headerlink" title="Base 1.7"></a>Base 1.7</h3><p>先来看看 1.7 的实现，下面是他的结构图：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ftj0evlsrgj30dw073gm2.jpg" alt=""></p>
<p>如图所示，是由 Segment 数组、HashEntry 组成，和 HashMap 一样，仍然是数组加链表。</p>
<p>它的核心成员变量：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Segment 数组，存放数据时首先需要定位到具体的 Segment 中。</div><div class="line"> */</div><div class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</div><div class="line"></div><div class="line"><span class="keyword">transient</span> Set&lt;K&gt; keySet;</div><div class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div></pre></td></tr></table></figure>
<p>Segment 是 ConcurrentHashMap 的一个内部类，主要的组成如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</div><div class="line">       </div><div class="line">       <span class="comment">// 和 HashMap 中的 HashEntry 作用一样，真正存放数据的桶</span></div><div class="line">       <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line">       <span class="keyword">transient</span> <span class="keyword">int</span> count;</div><div class="line"></div><div class="line">       <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">       <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</div><div class="line"></div><div class="line">       <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</div><div class="line">       </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看看其中 HashEntry 的组成：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ftj0mugrgnj30mo06l0tq.jpg" alt=""></p>
<p>和 HashMap 非常类似，唯一的区别就是其中的核心数据如 value ，以及链表都是 volatile 修饰的，保证了获取时的可见性。</p>
<p>原理上来说：ConcurrentHashMap 采用了分段锁技术，其中 Segment 继承于 ReentrantLock。不会像 HashTable 那样不管是 put 还是 get 操作都需要做同步处理，理论上 ConcurrentHashMap 支持 CurrencyLevel (Segment 数组数量)的线程并发。每当一个线程占用锁访问一个 Segment 时，不会影响到其他的 Segment。</p>
<p>下面也来看看核心的 <code>put get</code> 方法。</p>
<h4 id="put-方法-2"><a href="#put-方法-2" class="headerlink" title="put 方法"></a>put 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">    Segment&lt;K,V&gt; s;</div><div class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    <span class="keyword">int</span> hash = hash(key);</div><div class="line">    <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</div><div class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          <span class="comment">// nonvolatile; recheck</span></div><div class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>) <span class="comment">//  in ensureSegment</span></div><div class="line">        s = ensureSegment(j);</div><div class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先是通过 key 定位到 Segment，之后在对应的 Segment 中进行具体的 put。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</div><div class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</div><div class="line">        scanAndLockForPut(key, hash, value);</div><div class="line">    V oldValue;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        HashEntry&lt;K,V&gt;[] tab = table;</div><div class="line">        <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</div><div class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</div><div class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</div><div class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</div><div class="line">                K k;</div><div class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</div><div class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</div><div class="line">                    oldValue = e.value;</div><div class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</div><div class="line">                        e.value = value;</div><div class="line">                        ++modCount;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                e = e.next;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>)</div><div class="line">                    node.setNext(first);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</div><div class="line">                <span class="keyword">int</span> c = count + <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</div><div class="line">                    rehash(node);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    setEntryAt(tab, index, node);</div><div class="line">                ++modCount;</div><div class="line">                count = c;</div><div class="line">                oldValue = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        unlock();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> oldValue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然 HashEntry 中的 value 是用 volatile 关键词修饰的，但是并不能保证并发的原子性，所以 put 操作时仍然需要加锁处理。</p>
<p>首先第一步的时候会尝试获取锁，如果获取失败肯定就有其他线程存在竞争，则利用 <code>scanAndLockForPut()</code> 自旋获取锁。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1ftj2a3a5b7j30qj0f9dis.jpg" alt=""></p>
<ol>
<li>尝试自旋获取锁。</li>
<li>如果重试的次数达到了 <code>MAX_SCAN_RETRIES</code> 则改为阻塞锁获取，保证能获取成功。</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftj2lxexeqj30rw0lfwie.jpg" alt=""></p>
<p>再结合图看看 put 的流程。</p>
<ol>
<li>将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry。</li>
<li>遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。</li>
<li>不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。</li>
<li>最后会解除在 1 中所获取当前 Segment 的锁。</li>
</ol>
<h4 id="get-方法-2"><a href="#get-方法-2" class="headerlink" title="get 方法"></a>get 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Segment&lt;K,V&gt; s; <span class="comment">// manually integrate access methods to reduce overhead</span></div><div class="line">    HashEntry&lt;K,V&gt;[] tab;</div><div class="line">    <span class="keyword">int</span> h = hash(key);</div><div class="line">    <span class="keyword">long</span> u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</div><div class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="keyword">null</span> &amp;&amp;</div><div class="line">        (tab = s.table) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</div><div class="line">                 (tab, ((<span class="keyword">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</div><div class="line">             e != <span class="keyword">null</span>; e = e.next) &#123;</div><div class="line">            K k;</div><div class="line">            <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</div><div class="line">                <span class="keyword">return</span> e.value;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>get 逻辑比较简单：</p>
<p>只需要将 Key 通过 Hash 之后定位到具体的 Segment ，再通过一次 Hash 定位到具体的元素上。</p>
<p>由于 HashEntry 中的 value 属性是用 volatile 关键词修饰的，保证了内存可见性，所以每次获取时都是最新值。</p>
<p>ConcurrentHashMap 的 get 方法是非常高效的，<strong>因为整个过程都不需要加锁</strong>。</p>
<h3 id="Base-1-8-1"><a href="#Base-1-8-1" class="headerlink" title="Base 1.8"></a>Base 1.8</h3><p>1.7 已经解决了并发问题，并且能支持 N 个 Segment 这么多次数的并发，但依然存在 HashMap 在 1.7 版本中的问题。</p>
<blockquote>
<p>那就是查询遍历链表效率太低。</p>
</blockquote>
<p>因此 1.8 做了一些数据结构上的调整。</p>
<p>首先来看下底层的组成结构：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fthpv4odbsj30lp0drmxr.jpg" alt=""></p>
<p>看起来是不是和 1.8 HashMap 结构类似？</p>
<p>其中抛弃了原有的 Segment 分段锁，而采用了 <code>CAS + synchronized</code> 来保证并发安全性。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fthq78e5gqj30nr09mmz9.jpg" alt=""></p>
<p>也将 1.7 中存放数据的 HashEntry 改为 Node，但作用都是相同的。</p>
<p>其中的 <code>val next</code> 都用了 volatile 修饰，保证了可见性。</p>
<h4 id="put-方法-3"><a href="#put-方法-3" class="headerlink" title="put 方法"></a>put 方法</h4><p>重点来看看 put 函数：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fthrz8jlo8j30oc0rbte3.jpg" alt=""></p>
<ul>
<li>根据 key 计算出 hashcode 。</li>
<li>判断是否需要进行初始化。</li>
<li><code>f</code> 即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li>
<li>如果当前位置的 <code>hashcode == MOVED == -1</code>,则需要进行扩容。</li>
<li>如果都不满足，则利用 synchronized 锁写入数据。</li>
<li>如果数量大于 <code>TREEIFY_THRESHOLD</code> 则要转换为红黑树。</li>
</ul>
<h4 id="get-方法-3"><a href="#get-方法-3" class="headerlink" title="get 方法"></a>get 方法</h4><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fthsnp2f35j30o409hwg7.jpg" alt=""></p>
<ul>
<li>根据计算出来的 hashcode 寻址，如果就在桶上那么直接返回值。</li>
<li>如果是红黑树那就按照树的方式获取值。</li>
<li>就不满足那就按照链表的方式遍历获取值。</li>
</ul>
<blockquote>
<p>1.8 在 1.7 的数据结构上做了大的改动，采用红黑树之后可以保证查询效率（<code>O(logn)</code>），甚至取消了 ReentrantLock 改为了 synchronized，这样可以看出在新版的 JDK 中对 synchronized 优化是很到位的。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看完了整个 HashMap 和 ConcurrentHashMap 在 1.7 和 1.8 中不同的实现方式相信大家对他们的理解应该会更加到位。</p>
<p>其实这块也是面试的重点内容，通常的套路是：</p>
<ol>
<li>谈谈你理解的 HashMap，讲讲其中的 get put 过程。</li>
<li>1.8 做了什么优化？</li>
<li>是线程安全的嘛？</li>
<li>不安全会导致哪些问题？</li>
<li>如何解决？有没有线程安全的并发容器？</li>
<li>ConcurrentHashMap 是如何实现的？ 1.7、1.8 实现有何不同？为什么这么做？</li>
</ol>
<p>这一串问题相信大家仔细看完都能怼回面试官。</p>
<p>除了面试会问到之外平时的应用其实也蛮多，像之前谈到的 <a href="https://crossoverjie.top/categories/Guava/">Guava 中 Cache</a> 的实现就是利用 ConcurrentHashMap 的思想。</p>
<p>同时也能学习 JDK 作者大牛们的优化思路以及并发解决方案。</p>
<blockquote>
<p>其实写这篇的前提是源于 GitHub 上的一个 <a href="https://github.com/crossoverJie/Java-Interview/issues/59" target="_blank" rel="external">Issues</a>，也希望大家能参与进来，共同维护好这个项目。</p>
</blockquote>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
<p><strong>欢迎关注公众号一起交流：</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fthz5oibm0j31kw11xu0g.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Map 这样的 &lt;code&gt;Key Value&lt;/code&gt; 在软件开发中是非常经典的结构，常用于在内存中存放数据。&lt;/p&gt;
&lt;p&gt;本篇主要想讨论 ConcurrentHashMap 这样一个并发容器，在正式开始之前我觉得有必要谈谈 HashMap，没有它就不会有后面的 ConcurrentHashMap。&lt;/p&gt;
&lt;h2 id=&quot;HashMap&quot;&gt;&lt;a href=&quot;#HashMap&quot; class=&quot;headerlink&quot; title=&quot;HashMap&quot;&gt;&lt;/a&gt;HashMap&lt;/h2&gt;&lt;p&gt;众所周知 HashMap 底层是基于 &lt;code&gt;数组 + 链表&lt;/code&gt; 组成的，不过在 jdk1.7 和 1.8 中具体实现稍有不同。&lt;/p&gt;
&lt;h3 id=&quot;Base-1-7&quot;&gt;&lt;a href=&quot;#Base-1-7&quot; class=&quot;headerlink&quot; title=&quot;Base 1.7&quot;&gt;&lt;/a&gt;Base 1.7&lt;/h3&gt;&lt;p&gt;1.7 中的数据结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1ftiv16vu4aj30i30k4q47.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="concurrent" scheme="http://crossoverjie.top/tags/concurrent/"/>
    
      <category term="ConcurrentHashMap" scheme="http://crossoverjie.top/tags/ConcurrentHashMap/"/>
    
      <category term="HashMap" scheme="http://crossoverjie.top/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Guava 源码分析（Cache 原理【二阶段】）</title>
    <link href="http://crossoverjie.top/2018/07/16/guava/guava-cache-2/"/>
    <id>http://crossoverjie.top/2018/07/16/guava/guava-cache-2/</id>
    <published>2018-07-15T17:20:42.000Z</published>
    <updated>2018-07-15T17:16:35.904Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftampuql43j31kw0vy7wh.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上文「<a href="https://crossoverjie.top/2018/06/13/guava/guava-cache/">Guava 源码分析（Cache 原理）</a>」中分析了 <code>Guava Cache</code> 的相关原理。</p>
<p>文末提到了<strong>回收机制、移除时间通知</strong>等内容，许多朋友也挺感兴趣，这次就这两个内容再来分析分析。</p>
<blockquote>
<p>在开始之前先补习下 Java 自带的两个特性，Guava 中都有具体的应用。</p>
</blockquote>
<h2 id="Java-中的引用"><a href="#Java-中的引用" class="headerlink" title="Java 中的引用"></a>Java 中的引用</h2><p>首先是 Java 中的<strong>引用</strong>。</p>
<p>在之前分享过 JVM 是根据<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/GarbageCollection.md#%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95" target="_blank" rel="external">可达性分析算法</a>找出需要回收的对象，判断对象的存活状态都和<code>引用</code>有关。</p>
<p>在 JDK1.2 之前这点设计的非常简单：一个对象的状态只有<strong>引用</strong>和<strong>没被引用</strong>两种区别。</p>
<a id="more"></a>
<p>这样的划分对垃圾回收不是很友好，因为总有一些对象的状态处于这两之间。</p>
<p>因此 1.2 之后新增了四种状态用于更细粒度的划分引用关系：</p>
<ul>
<li>强引用（Strong Reference）:这种对象最为常见，比如 <strong><code>A a = new A();</code></strong>这就是典型的强引用；这样的强引用关系是不能被垃圾回收的。</li>
<li>软引用（Soft Reference）:这样的引用表明一些有用但不是必要的对象，在将发生垃圾回收之前是需要将这样的对象再次回收。</li>
<li>弱引用（Weak Reference）:这是一种比软引用还弱的引用关系，也是存放非必须的对象。当垃圾回收时，无论当前内存是否足够，这样的对象都会被回收。</li>
<li>虚引用（Phantom Reference）:这是一种最弱的引用关系，甚至没法通过引用来获取对象，它唯一的作用就是在被回收时可以获得通知。</li>
</ul>
<h2 id="事件回调"><a href="#事件回调" class="headerlink" title="事件回调"></a>事件回调</h2><p>事件回调其实是一种常见的设计模式，比如之前讲过的 <a href="https://crossoverjie.top/categories/Netty/">Netty</a> 就使用了这样的设计。</p>
<p>这里采用一个 demo，试下如下功能：</p>
<ul>
<li>Caller 向 Notifier 提问。</li>
<li>提问方式是异步，接着做其他事情。</li>
<li>Notifier 收到问题执行计算然后回调 Caller 告知结果。</li>
</ul>
<p>在 Java 中利用接口来实现回调，所以需要定义一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBackListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 回调通知函数</div><div class="line">     * <span class="doctag">@param</span> msg</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">callBackNotify</span><span class="params">(String msg)</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Caller 中调用 Notifier 执行提问，调用时将接口传递过去：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caller</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(Caller.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> CallBackListener callBackListener ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Notifier notifier ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String question ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 使用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"开始提问"</span>);</div><div class="line"></div><div class="line">		<span class="comment">//新建线程，达到异步效果 </span></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    notifier.execute(Caller.<span class="keyword">this</span>,question);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"提问完毕，我去干其他事了"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//隐藏 getter/setter</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Notifier 收到提问，执行计算（耗时操作），最后做出响应（回调接口，告诉 Caller 结果）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Notifier</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(Notifier.class);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Caller caller, String msg)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"收到消息=【&#123;&#125;】"</span>, msg);</div><div class="line"></div><div class="line">        LOGGER.info(<span class="string">"等待响应中。。。。。"</span>);</div><div class="line">        TimeUnit.SECONDS.sleep(<span class="number">2</span>);</div><div class="line"></div><div class="line"></div><div class="line">        caller.getCallBackListener().callBackNotify(<span class="string">"我在北京！"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模拟执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Notifier notifier = <span class="keyword">new</span> Notifier() ;</div><div class="line"></div><div class="line">    Caller caller = <span class="keyword">new</span> Caller() ;</div><div class="line">    caller.setNotifier(notifier) ;</div><div class="line">    caller.setQuestion(<span class="string">"你在哪儿！"</span>);</div><div class="line">    caller.setCallBackListener(<span class="keyword">new</span> CallBackListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callBackNotify</span><span class="params">(String msg)</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"回复=【&#123;&#125;】"</span> ,msg);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    caller.call();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2018-07-15 19:52:11.105 [main] INFO  c.crossoverjie.guava.callback.Caller - 开始提问</div><div class="line">2018-07-15 19:52:11.118 [main] INFO  c.crossoverjie.guava.callback.Caller - 提问完毕，我去干其他事了</div><div class="line">2018-07-15 19:52:11.117 [Thread-0] INFO  c.c.guava.callback.Notifier - 收到消息=【你在哪儿！】</div><div class="line">2018-07-15 19:52:11.121 [Thread-0] INFO  c.c.guava.callback.Notifier - 等待响应中。。。。。</div><div class="line">2018-07-15 19:52:13.124 [Thread-0] INFO  com.crossoverjie.guava.callback.Main - 回复=【我在北京！】</div></pre></td></tr></table></figure>
<p>这样一个模拟的异步事件回调就完成了。</p>
<h2 id="Guava-的用法"><a href="#Guava-的用法" class="headerlink" title="Guava 的用法"></a>Guava 的用法</h2><p>Guava 就是利用了上文的两个特性来实现了<strong>引用回收</strong>及<strong>移除通知</strong>。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>可以在初始化缓存时利用：</p>
<ul>
<li>CacheBuilder.weakKeys()</li>
<li>CacheBuilder.weakValues()</li>
<li>CacheBuilder.softValues()</li>
</ul>
<p>来自定义键和值的引用关系。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftatngp76aj30n20h6gpn.jpg" alt=""></p>
<p>在上文的分析中可以看出 Cache 中的 <code>ReferenceEntry</code> 是类似于 HashMap 的 Entry 存放数据的。</p>
<p>来看看 ReferenceEntry 的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">ReferenceEntry</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the value reference from this entry.</div><div class="line">     */</div><div class="line">    <span class="function">ValueReference&lt;K, V&gt; <span class="title">getValueReference</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sets the value reference for this entry.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValueReference</span><span class="params">(ValueReference&lt;K, V&gt; valueReference)</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the next entry in the chain.</div><div class="line">     */</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function">ReferenceEntry&lt;K, V&gt; <span class="title">getNext</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the entry's hash.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHash</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the key for this entry.</div><div class="line">     */</div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function">K <span class="title">getKey</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Used by entries that use access order. Access entries are maintained in a doubly-linked list.</div><div class="line">     * New entries are added at the tail of the list at write time; stale entries are expired from</div><div class="line">     * the head of the list.</div><div class="line">     */</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the time that this entry was last accessed, in ns.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getAccessTime</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Sets the entry access time in ns.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAccessTime</span><span class="params">(<span class="keyword">long</span> time)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>包含了很多常用的操作，如值引用、键引用、访问时间等。</p>
<p>根据 <code>ValueReference&lt;K, V&gt; getValueReference();</code> 的实现：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftatsg5jfvj30vg059wg9.jpg" alt=""></p>
<p>具有强引用和弱引用的不同实现。</p>
<p>key 也是相同的道理：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftattls2uzj30w005eq4t.jpg" alt=""></p>
<p>当使用这样的构造方式时，弱引用的 key 和 value 都会被垃圾回收。</p>
<p>当然我们也可以显式的回收：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Discards any cached value for key &#123;@code key&#125;.</div><div class="line"> * 单个回收</div><div class="line"> */</div><div class="line">void invalidate(Object key);</div><div class="line"></div><div class="line">/**</div><div class="line"> * Discards any cached values for keys &#123;@code keys&#125;.</div><div class="line"> *</div><div class="line"> * @since 11.0</div><div class="line"> */</div><div class="line">void invalidateAll(Iterable&lt;?&gt; keys);</div><div class="line"></div><div class="line">/**</div><div class="line"> * Discards all entries in the cache.</div><div class="line"> */</div><div class="line">void invalidateAll();</div></pre></td></tr></table></figure>
<h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>改造了之前的例子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">loadingCache = CacheBuilder.newBuilder()</div><div class="line">        .expireAfterWrite(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .removalListener(<span class="keyword">new</span> RemovalListener&lt;Object, Object&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRemoval</span><span class="params">(RemovalNotification&lt;Object, Object&gt; notification)</span> </span>&#123;</div><div class="line">                LOGGER.info(<span class="string">"删除原因=&#123;&#125;，删除 key=&#123;&#125;,删除 value=&#123;&#125;"</span>,notification.getCause(),notification.getKey(),notification.getValue());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .build(<span class="keyword">new</span> CacheLoader&lt;Integer, AtomicLong&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Integer key)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">2018-07-15 20:41:07.433 [main] INFO  c.crossoverjie.guava.CacheLoaderTest - 当前缓存值=0,缓存大小=1</div><div class="line">2018-07-15 20:41:07.442 [main] INFO  c.crossoverjie.guava.CacheLoaderTest - 缓存的所有内容=&#123;1000=0&#125;</div><div class="line">2018-07-15 20:41:07.443 [main] INFO  c.crossoverjie.guava.CacheLoaderTest - job running times=10</div><div class="line">2018-07-15 20:41:10.461 [main] INFO  c.crossoverjie.guava.CacheLoaderTest - 删除原因=EXPIRED，删除 key=1000,删除 value=1</div><div class="line">2018-07-15 20:41:10.462 [main] INFO  c.crossoverjie.guava.CacheLoaderTest - 当前缓存值=0,缓存大小=1</div><div class="line">2018-07-15 20:41:10.462 [main] INFO  c.crossoverjie.guava.CacheLoaderTest - 缓存的所有内容=&#123;1000=0&#125;</div></pre></td></tr></table></figure>
<p>可以看出当缓存被删除的时候会回调我们自定义的函数，并告知删除原因。</p>
<p>那么 Guava 是如何实现的呢？</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1ftau23uj5aj30mp08odh8.jpg" alt=""></p>
<p>根据 LocalCache 中的 <code>getLiveValue()</code> 中判断缓存过期时，跟着这里的调用关系就会一直跟到：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftau4ed7dcj30rm0a5acd.jpg" alt=""></p>
<p><code>removeValueFromChain()</code> 中的：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftau5ywcojj30rs0750u9.jpg" alt=""></p>
<p><code>enqueueNotification()</code> 方法会将回收的缓存（包含了 key，value）以及回收原因包装成之前定义的事件接口加入到一个<strong>本地队列</strong>中。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1ftau7hpijrj30sl06wtaf.jpg" alt=""></p>
<p>这样一看也没有回调我们初始化时候的事件啊。</p>
<p>不过用过队列的同学应该能猜出，既然这里写入队列，那就肯定就有消费。</p>
<p>我们回到获取缓存的地方：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftau9rwgacj30ti0hswio.jpg" alt=""></p>
<p>在 finally 中执行了 <code>postReadCleanup()</code> 方法；其实在这里面就是对刚才的队列进行了消费：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftaubaco48j30lw0513zi.jpg" alt=""></p>
<p>一直跟进来就会发现这里消费了队列，将之前包装好的移除消息调用了我们自定义的事件，这样就完成了一次事件回调。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上所有源码：</p>
<p><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/guava/callback/Main.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/guava/callback/Main.java</a></p>
<p>通过分析 Guava 的源码可以让我们学习到顶级的设计及实现方式，甚至自己也能尝试编写。</p>
<p>Guava 里还有很多强大的增强实现，值得我们再好好研究。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
<p><strong>欢迎关注公众号一起交流：</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tKfTcgy1ftampuql43j31kw0vy7wh.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在上文「&lt;a href=&quot;https://crossoverjie.top/2018/06/13/guava/guava-cache/&quot;&gt;Guava 源码分析（Cache 原理）&lt;/a&gt;」中分析了 &lt;code&gt;Guava Cache&lt;/code&gt; 的相关原理。&lt;/p&gt;
&lt;p&gt;文末提到了&lt;strong&gt;回收机制、移除时间通知&lt;/strong&gt;等内容，许多朋友也挺感兴趣，这次就这两个内容再来分析分析。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在开始之前先补习下 Java 自带的两个特性，Guava 中都有具体的应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Java-中的引用&quot;&gt;&lt;a href=&quot;#Java-中的引用&quot; class=&quot;headerlink&quot; title=&quot;Java 中的引用&quot;&gt;&lt;/a&gt;Java 中的引用&lt;/h2&gt;&lt;p&gt;首先是 Java 中的&lt;strong&gt;引用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在之前分享过 JVM 是根据&lt;a href=&quot;https://github.com/crossoverJie/Java-Interview/blob/master/MD/GarbageCollection.md#%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95&quot;&gt;可达性分析算法&lt;/a&gt;找出需要回收的对象，判断对象的存活状态都和&lt;code&gt;引用&lt;/code&gt;有关。&lt;/p&gt;
&lt;p&gt;在 JDK1.2 之前这点设计的非常简单：一个对象的状态只有&lt;strong&gt;引用&lt;/strong&gt;和&lt;strong&gt;没被引用&lt;/strong&gt;两种区别。&lt;/p&gt;
    
    </summary>
    
      <category term="Guava" scheme="http://crossoverjie.top/categories/Guava/"/>
    
    
      <category term="Cache" scheme="http://crossoverjie.top/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>一次线上问题排查所引发的思考</title>
    <link href="http://crossoverjie.top/2018/07/08/java-senior/JVM-Troubleshoot/"/>
    <id>http://crossoverjie.top/2018/07/08/java-senior/JVM-Troubleshoot/</id>
    <published>2018-07-08T11:10:36.000Z</published>
    <updated>2018-07-08T08:29:46.830Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft2j8cuv3tj31kw0vy7wh.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前或多或少分享过一些<a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/MemoryAllocation.md" target="_blank" rel="external">内存模型</a>、<a href="https://crossoverjie.top/2018/01/18/newObject/">对象创建</a>之类的内容，其实大部分人看完都是懵懵懂懂，也不知道这些的实际意义。</p>
<p>直到有一天你会碰到线上奇奇怪怪的问题，如：</p>
<ul>
<li>线程执行一个任务迟迟没有返回，应用假死。</li>
<li>接口响应缓慢，甚至请求超时。</li>
<li>CPU 高负载运行。</li>
</ul>
<p>这类问题并不像一个空指针、数组越界这样明显好查，这时就需要刚才提到的内存模型、对象创建、线程等相关知识结合在一起来排查问题了。</p>
<p>正好这次借助之前的一次生产问题来聊聊如何排查和解决问题。</p>
<h2 id="生产现象"><a href="#生产现象" class="headerlink" title="生产现象"></a>生产现象</h2><p>首先看看问题的背景吧：</p>
<p>我这其实是一个定时任务，在固定的时间会开启 N 个线程并发的从 Redis 中获取数据进行运算。</p>
<p><strong>业务逻辑非常简单，但应用一般涉及到多线程之后再简单的事情都要小心对待。</strong></p>
<p>果不其然这次就出问题了。</p>
<p>现象:原本只需要执行几分钟的任务执行了几个小时都没退出。翻遍了所有的日志都没找到异常。</p>
<p>于是便开始定位问题之路。</p>
<a id="more"></a>
<h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>既然没办法直接从日志中发现异常，那就只能看看应用到底在干嘛了。</p>
<p>最常见的工具就是 JDK 自带的那一套。</p>
<p>这次我使用了 <code>jstack</code> 来查看线程的执行情况，它的作用其实就是 dump 当前的线程堆栈。</p>
<p>当然在 dump 之前是需要知道我应用的 pid 的，可以使用 <code>jps -v</code> 这样的方式列出所有的 Java 进程。</p>
<p>当然如果知道关键字的话直接使用 <code>ps aux|grep java</code> 也是可以的。</p>
<p>拿到 <code>pid=1523</code> 了之后就可以利用 <code>jstack 1523 &gt; 1523.log</code> 这样的方式将 dump 文件输出到日志文件中。</p>
<p>如果应用简单不复杂，线程这些也比较少其实可以直接打开查看。</p>
<p>但复杂的应用导出来的日志文件也比较大还是建议用专业的分析工具。</p>
<p>我这里的日志比较少直接打开就可以了。</p>
<p>因为我清楚知道应用中开启的线程名称，所以直接根据线程名就可以在日志中找到相关的堆栈：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1ft2fd0q5hhj30sn0cz0yn.jpg" alt=""></p>
<blockquote>
<p>所以通常建议大家线程名字给的有意义，在排查问题时很有必要。</p>
</blockquote>
<p>其实其他几个线程都和这里的堆栈类似，很明显的看出都是在做 Redis 连接。</p>
<p>于是我登录 Redis 查看了当前的连接数，发现已经非常高了。</p>
<p>这样 Redis 的响应自然也就变慢了。</p>
<p>接着利用 <code>jps -v</code> 列出了当前所以在跑的 Java 进程，果不其然有好几个应用都在查询 Redis，而且都是并发连接，问题自然就找到了。</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><blockquote>
<p>所以问题的主要原因是：大量的应用并发查询 Redis，导致 Redis 的性能降低。</p>
</blockquote>
<p>既然找到了问题，那如何解决呢？</p>
<ul>
<li>减少同时查询 Redis 的应用，分开时段降低 Redis 的压力。</li>
<li>将 Redis 复制几个集群，各个应用分开查询。但是这样会涉及到数据的同步等运维操作，或者由程序了进行同步也会增加复杂度。</li>
</ul>
<p>目前我们选择的是第一个方案，效果很明显。</p>
<h2 id="本地模拟"><a href="#本地模拟" class="headerlink" title="本地模拟"></a>本地模拟</h2><p>上文介绍的是线程相关问题，现在来分析下内存的问题。</p>
<p>以这个类为例：</p>
<p><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/oom/heap/HeapOOM.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/oom/heap/HeapOOM.java</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOOM</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>) ;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</div><div class="line">            list.add(<span class="string">"1"</span>) ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动参数如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-Xms20m</div><div class="line">-Xmx20m</div><div class="line">-XX:+HeapDumpOnOutOfMemoryError</div><div class="line">-XX:HeapDumpPath=/Users/xx/Documents</div></pre></td></tr></table></figure>
<p>为了更快的突出内存问题将堆的最大内存固定在 20M，同时在 JVM 出现 OOM 的时候自动 dump 内存到 <code>/Users/xx/Documents</code>(不配路径则会生成在当前目录)。</p>
<p>执行之后果不其然出现了异常：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft2g4f80rfj30mc064tag.jpg" alt=""></p>
<p>同时对应的内存 dump 文件也生成了。</p>
<h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><p>这时就需要相应的工具进行分析了，最常用的自然就是 MAT 了。</p>
<p>我试了一个在线工具也不错（文件大了就不适合了）：</p>
<p><a href="http://heaphero.io/index.jsp" target="_blank" rel="external">http://heaphero.io/index.jsp</a></p>
<p>上传刚才生成的内存文件之后：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft2gb4p08tj31460ojade.jpg" alt=""></p>
<p>因为是内存溢出，所以主要观察下大对象：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft2gbw5g3pj30zx0g4wge.jpg" alt=""></p>
<p>也有相应提示，这个很有可能就是内存溢出的对象，点进去之后：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft2gcmd00lj30kz0bjmyo.jpg" alt=""></p>
<p>看到这个堆栈其实就很明显了：</p>
<p>在向 ArrayList 中不停的写入数据时，会导致频繁的扩容也就是数组复制这些过程，最终达到 20M 的上限导致内存溢出了。</p>
<h2 id="更多建议"><a href="#更多建议" class="headerlink" title="更多建议"></a>更多建议</h2><p>上文说过，一旦使用了多线程，那就要格外小心。</p>
<p>以下是一些日常建议：</p>
<ul>
<li>尽量不要在线程中做大量耗时的网络操作，如查询数据库（可以的话在一开始就将数据从从 DB 中查出准备好）。</li>
<li>尽可能的减少多线程竞争锁。可以将数据分段，各个线程分别读取。</li>
<li>多利用 <code>CAS+自旋</code> 的方式更新数据，减少锁的使用。</li>
<li>应用中加上 <code>-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp</code> 参数，在内存溢出时至少可以拿到内存日志。</li>
<li>线程池监控。如线程池大小、队列大小、最大线程数等数据，可提前做好预估。</li>
<li>JVM 监控，可以看到堆内存的涨幅趋势，GC 曲线等数据，也可以提前做好准备。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>线上问题定位需要综合技能，所以是需要一些基础技能。如线程、内存模型、Linux 等。</p>
<p>当然这些问题没有实操过都是纸上谈兵；如果第一次碰到线上问题，不要慌张，反而应该庆幸解决之后你又会习得一项技能。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
<p><strong>欢迎关注公众号一起交流：</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1ft2j8cuv3tj31kw0vy7wh.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前或多或少分享过一些&lt;a href=&quot;https://github.com/crossoverJie/Java-Interview/blob/master/MD/MemoryAllocation.md&quot;&gt;内存模型&lt;/a&gt;、&lt;a href=&quot;https://crossoverjie.top/2018/01/18/newObject/&quot;&gt;对象创建&lt;/a&gt;之类的内容，其实大部分人看完都是懵懵懂懂，也不知道这些的实际意义。&lt;/p&gt;
&lt;p&gt;直到有一天你会碰到线上奇奇怪怪的问题，如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程执行一个任务迟迟没有返回，应用假死。&lt;/li&gt;
&lt;li&gt;接口响应缓慢，甚至请求超时。&lt;/li&gt;
&lt;li&gt;CPU 高负载运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这类问题并不像一个空指针、数组越界这样明显好查，这时就需要刚才提到的内存模型、对象创建、线程等相关知识结合在一起来排查问题了。&lt;/p&gt;
&lt;p&gt;正好这次借助之前的一次生产问题来聊聊如何排查和解决问题。&lt;/p&gt;
&lt;h2 id=&quot;生产现象&quot;&gt;&lt;a href=&quot;#生产现象&quot; class=&quot;headerlink&quot; title=&quot;生产现象&quot;&gt;&lt;/a&gt;生产现象&lt;/h2&gt;&lt;p&gt;首先看看问题的背景吧：&lt;/p&gt;
&lt;p&gt;我这其实是一个定时任务，在固定的时间会开启 N 个线程并发的从 Redis 中获取数据进行运算。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;业务逻辑非常简单，但应用一般涉及到多线程之后再简单的事情都要小心对待。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;果不其然这次就出问题了。&lt;/p&gt;
&lt;p&gt;现象:原本只需要执行几分钟的任务执行了几个小时都没退出。翻遍了所有的日志都没找到异常。&lt;/p&gt;
&lt;p&gt;于是便开始定位问题之路。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="Thread" scheme="http://crossoverjie.top/tags/Thread/"/>
    
      <category term="concurrent" scheme="http://crossoverjie.top/tags/concurrent/"/>
    
      <category term="JVM" scheme="http://crossoverjie.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Netty(二) 从线程模型的角度看 Netty 为什么是高性能的？</title>
    <link href="http://crossoverjie.top/2018/07/04/netty/Netty(2)Thread-model/"/>
    <id>http://crossoverjie.top/2018/07/04/netty/Netty(2)Thread-model/</id>
    <published>2018-07-03T17:01:14.000Z</published>
    <updated>2018-07-03T16:58:22.849Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fsx42fcwsxj312v0ocjve.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的 <a href="http://t.cn/Rd7He1Z" target="_blank" rel="external">SpringBoot 整合长连接心跳机制</a> 一文中认识了 Netty。</p>
<p>但其实只是能用，为什么要用 Netty？它有哪些优势？这些其实都不清楚。</p>
<p>本文就来从历史源头说道说道。</p>
<h2 id="传统-IO"><a href="#传统-IO" class="headerlink" title="传统 IO"></a>传统 IO</h2><p>在 Netty 以及 NIO 出现之前，我们写 IO 应用其实用的都是用 <code>java.io.*</code> 下所提供的包。  </p>
<p>比如下面的伪代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ServeSocket serverSocket = <span class="keyword">new</span> ServeSocket(<span class="number">8080</span>);</div><div class="line">Socket socket = serverSocket.accept() ;</div><div class="line">BufferReader in = .... ;</div><div class="line"></div><div class="line">String request ;</div><div class="line"> </div><div class="line"><span class="keyword">while</span>((request = in.readLine()) != <span class="keyword">null</span>)&#123;</div><div class="line">	<span class="keyword">new</span> Thread(<span class="keyword">new</span> Task()).start()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>大概是这样，其实主要想表达的是：<strong>这样一个线程只能处理一个连接</strong>。</p>
<p>如果是 100 个客户端连接那就得开 100 个线程，1000 那就得 1000 个线程。</p>
<p>要知道线程资源非常宝贵，每次的创建都会带来消耗，而且每个线程还得为它分配对应的栈内存。</p>
<p>即便是我们给 JVM 足够的内存，大量线程所带来的上下文切换也是受不了的。</p>
<blockquote>
<p>并且传统 IO 是阻塞模式，每一次的响应必须的是发起 IO 请求，处理请求完成再同时返回，直接的结果就是性能差，吞吐量低。</p>
</blockquote>
<h2 id="Reactor-模型"><a href="#Reactor-模型" class="headerlink" title="Reactor 模型"></a>Reactor 模型</h2><p>因此业界常用的高性能 IO 模型是 <code>Reactor</code>。</p>
<p>它是一种异步、非阻塞的事件驱动模型。</p>
<p>通常也表现为以下三种方式：</p>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsx4by9581j30k60aygn7.jpg" alt=""></p>
<p>从图中可以看出：</p>
<p>它是由一个线程来接收客户端的连接，并将该请求分发到对应的事件处理 handler 中，整个过程完全是异步非阻塞的；并且完全不存在共享资源的问题。所以理论上来说吞吐量也还不错。</p>
<blockquote>
<p>但由于是一个线程，对多核 CPU 利用率不高，一旦有大量的客户端连接上来性能必然下降，甚至会有大量请求无法响应。<br>最坏的情况是一旦这个线程哪里没有处理好进入了死循环那整个服务都将不可用！</p>
</blockquote>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsx4cctol0j30k70dq40n.jpg" alt=""></p>
<p>因此产生了多线程模型。</p>
<p>其实最大的改进就是将原有的事件处理改为了多线程。</p>
<p>可以基于 Java 自身的线程池实现，这样在大量请求的处理上性能提示是巨大的。</p>
<p>虽然如此，但理论上来说依然有一个地方是单点的；那就是处理客户端连接的线程。</p>
<p>因为大多数服务端应用或多或少在连接时都会处理一些业务，如鉴权之类的，当连接的客户端越来越多时这一个线程依然会存在性能问题。</p>
<p>于是又有了下面的线程模型。</p>
<h3 id="主从多线程"><a href="#主从多线程" class="headerlink" title="主从多线程"></a>主从多线程</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fsx4iv4kmxj30gb0c0dha.jpg" alt=""></p>
<p>该模型将客户端连接那一块的线程也改为多线程，称为主线程。</p>
<p>同时也是多个子线程来处理事件响应，这样无论是连接还是事件都是高性能的。</p>
<h2 id="Netty-实现"><a href="#Netty-实现" class="headerlink" title="Netty 实现"></a>Netty 实现</h2><p>以上谈了这么多其实 Netty 的线程模型与之的类似。</p>
<p>我们回到之前 <a href="https://crossoverjie.top/2018/05/24/netty/Netty(1">SpringBoot 整合长连接心跳机制</a>TCP-Heartbeat/) 中的服务端代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"><span class="keyword">private</span> EventLoopGroup work = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 启动 Netty</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@throws</span> InterruptedException</div><div class="line"> */</div><div class="line"><span class="meta">@PostConstruct</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">    ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</div><div class="line">            .group(boss, work)</div><div class="line">            .channel(NioServerSocketChannel.class)</div><div class="line">            .localAddress(<span class="keyword">new</span> InetSocketAddress(nettyPort))</div><div class="line">            <span class="comment">//保持长连接</span></div><div class="line">            .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</div><div class="line">            .childHandler(<span class="keyword">new</span> HeartbeatInitializer());</div><div class="line"></div><div class="line">    ChannelFuture future = bootstrap.bind().sync();</div><div class="line">    <span class="keyword">if</span> (future.isSuccess()) &#123;</div><div class="line">        LOGGER.info(<span class="string">"启动 Netty 成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实这里的 boss 就相当于 Reactor 模型中处理客户端连接的线程池。</p>
<p>work 自然就是处理事件的线程池了。</p>
<p>那么如何来实现上文的三种模式呢？其实也很简单：</p>
<p>单线程模型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</div><div class="line">                .group(group)</div><div class="line">                .childHandler(<span class="keyword">new</span> HeartbeatInitializer());</div></pre></td></tr></table></figure>
<p>多线程模型：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup(<span class="number">1</span>);</div><div class="line"><span class="keyword">private</span> EventLoopGroup work = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</div><div class="line">                .group(boss,work)</div><div class="line">                .childHandler(<span class="keyword">new</span> HeartbeatInitializer());</div></pre></td></tr></table></figure>
<p>主从多线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"><span class="keyword">private</span> EventLoopGroup work = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</div><div class="line">                .group(boss,work)</div><div class="line">                .childHandler(<span class="keyword">new</span> HeartbeatInitializer());</div></pre></td></tr></table></figure>
<p>相信大家一看也明白。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实看过了 Netty 的线程模型之后能否对我们平时做高性能应用带来点启发呢？</p>
<p>我认为是可以的：</p>
<ul>
<li>接口同步转异步处理。</li>
<li>回调通知结果。</li>
<li>多线程提高并发效率。</li>
</ul>
<p>无非也就是这些，只是做了这些之后就会带来其他问题：</p>
<ul>
<li>异步之后事务如何保证？</li>
<li>回调失败的情况？</li>
<li>多线程所带来的上下文切换、共享资源的问题。</li>
</ul>
<p>这就是一个博弈的过程，想要做到一个尽量高效的应用是需要不断磨合试错的。</p>
<p>上文相关的代码：</p>
<p><a href="https://github.com/crossoverJie/netty-action" target="_blank" rel="external">https://github.com/crossoverJie/netty-action</a></p>
<p><strong>欢迎关注公众号一起交流：</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fsx42fcwsxj312v0ocjve.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在之前的 &lt;a href=&quot;http://t.cn/Rd7He1Z&quot;&gt;SpringBoot 整合长连接心跳机制&lt;/a&gt; 一文中认识了 Netty。&lt;/p&gt;
&lt;p&gt;但其实只是能用，为什么要用 Netty？它有哪些优势？这些其实都不清楚。&lt;/p&gt;
&lt;p&gt;本文就来从历史源头说道说道。&lt;/p&gt;
&lt;h2 id=&quot;传统-IO&quot;&gt;&lt;a href=&quot;#传统-IO&quot; class=&quot;headerlink&quot; title=&quot;传统 IO&quot;&gt;&lt;/a&gt;传统 IO&lt;/h2&gt;&lt;p&gt;在 Netty 以及 NIO 出现之前，我们写 IO 应用其实用的都是用 &lt;code&gt;java.io.*&lt;/code&gt; 下所提供的包。  &lt;/p&gt;
&lt;p&gt;比如下面的伪代码：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;ServeSocket serverSocket = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServeSocket(&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Socket socket = serverSocket.accept() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;BufferReader in = .... ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;String request ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((request = in.readLine()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Task()).start()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Netty" scheme="http://crossoverjie.top/categories/Netty/"/>
    
    
      <category term="内存模型" scheme="http://crossoverjie.top/tags/%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>一个学渣的阿里之路</title>
    <link href="http://crossoverjie.top/2018/06/21/personal/Interview-experience/"/>
    <id>http://crossoverjie.top/2018/06/21/personal/Interview-experience/</id>
    <published>2018-06-20T17:10:12.000Z</published>
    <updated>2018-06-24T15:04:27.387Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fshrh2oexpj31kw0wkgsx.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有些朋友在面试阿里，加上 <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">Java-Interview</a> 项目的原因也有小伙伴和我讨论，近期也在负责部门的招聘，这让我想起年初那段长达三个月的奇葩面试经历🤣。</p>
<p>本来没想拿出来说的，毕竟最后也没成。</p>
<p>但由于那几个月的经历让我了解到了大厂的工作方式、对候选同学的考察重点以及面试官的套路等都有了全新的认识。</p>
<p>当然最重要的是这段时间的查漏补缺也让自己精进不少。</p>
<p>先交代下背景吧：</p>
<p>从去年 12 月到今年三月底，我前前后后面了阿里三个部门。</p>
<p>其中两个部门通过了技术面试，还有一个跪在了三面。</p>
<p>光看结果还不错，但整个流程堪称曲折。</p>
<p>下面我会尽量描述流程以及大致的面试题目大纲，希望对想要跳槽、正在面试的同学带来点灵感，帮助可能谈不上，但启发还是能有。</p>
<p>以下内容较长，请再次备好瓜子板凳。</p>
<a id="more"></a>
<h2 id="A-部门"><a href="#A-部门" class="headerlink" title="A 部门"></a>A 部门</h2><p>首先是第一次机会，去年 12 月份有位大佬加我，后来才知道是一个部门的技术 Leader 在网上看到我的博客，问我想不想来阿里试试。</p>
<p>这时距离上次面阿里也过去一年多了，也想看看现在几斤几两，于是便同意了。</p>
<p>在推荐一周之后收到了杭州打来的电话，说来也巧，那时候我正在机场候机，距离登记还有大概一个小时，心想时间肯定够了。</p>
<p>那是我时隔一年多第一次面试，还是在机场这样嘈杂的环境里。多多少少还是有些紧张。</p>
<h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>以下是我印象比较深刻的内容：</p>
<p><strong>面试官：</strong></p>
<p>谈谈你做过项目中印象较深或自认为做的比较好的地方？</p>
<p><strong>博主：</strong></p>
<p>我觉得我在 XX 做的不错，用了 XX 需求实现 XX 功能，性能提高了 N 倍。</p>
<p><strong>面试官：</strong></p>
<p>你说使用到了 AOP ，能谈谈它的实现原理嘛？</p>
<p><strong>博主：</strong></p>
<p>它是依靠动态代理实现的，动态代理又分为 JDK 自身的以及 CGLIB 。。。。</p>
<p><strong>面试官：</strong></p>
<p>嗯，能说说他们的不同及优缺点嘛？</p>
<p><strong>博主：</strong></p>
<p>JDK 是基于接口实现，而 CGLIB 继承代理类。。。</p>
<p>就是这样会一直问下去，如果聊的差不多了就开始问一些零散的问题：</p>
<ul>
<li>JMM 内存模型，如何划分的？分别存储什么内容？线程安全与否？</li>
<li>类加载机制，谈到双亲委派模型后会问到哪些违反了双亲委派模型？为什么？为什么要双亲委派？好处是什么？</li>
<li>平时怎么使用多线程？有哪些好处？线程池的几个核心参数的意义？</li>
<li>线程间通信的方式？</li>
<li>HashMap 的原理？当谈到线程不安全时自然引申出 ConcurrentHashMap ，它的实现原理？</li>
<li>分库分表如何设计？垂直拆分、水平拆分？</li>
<li>业务 ID 的生成规则，有哪些方式？</li>
<li>SQL 调优？平时使用数据库有哪些注意点？</li>
<li>当一个应用启动缓慢如何优化？</li>
</ul>
<p>大概是以上这些，当聊到倒数第二个时我已经登机了。最后不得不提前挂断，结束之前告诉我之后会换一个同事和我沟通，听到这样的回复一面应该是过了，<br>后面也确实证实了这点。</p>
<h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>大概过了一周，二面如期而至。</p>
<p>我听声音很熟，就尝试问下是不是之前一面的面试官，结果真是。</p>
<p>由于二面的面试官临时有事所以他来替一下。于是我赶紧问他能否把之前答的不好的再说说？的到了肯定的答复后开始了我的表演。</p>
<p>有了第一次的经验这一次自然也轻车熟路，原本感觉一切尽在掌握却被告知需要笔试突然被激醒。</p>
<p>笔试是一个在线平台，需要在网页中写代码，会有一个明确的题目：</p>
<blockquote>
<p>从一个日志文件中根据关键字读取日志，记录出现的次数，最后按照次数排序打印。</p>
</blockquote>
<p>在这过程中切记要和面试官多多交流，因为笔试有时间限制，别到最后发现题目理解错了，这就和高考作文写完发现方向错了一样要命。</p>
<p>而且在沟通过程中体现出你解题的思路，即使最终结果不对，但说不定思考的过程很符合面试官的胃口哦。这也和今年的高考改卷一样；过程正确得高分，只有结果得低分。</p>
<h3 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h3><p>又过了差不多一周的时间接到了三面的电话，一般到了三面会是技术 Leader 之类的角色。</p>
<p>这个过程中不会过多强调技术细节，更多的考察软件能，比如团队协作、学习能力等。</p>
<p>但我记得也问了以下一些技术问题：</p>
<ul>
<li>谈谈你所理解的 HTTP 协议？</li>
<li>对 TCP 的理解？三次握手？滑动窗口？</li>
<li>基本算法，Base64 等。</li>
<li>Java 内存模型，Happen Before 的理解。</li>
</ul>
<p>一周之后我接到了 HR 助理的电话约了和 HRBP 以及产品技术负责人的视频面试。</p>
<p>但是我却没有面下去，具体原因得往下看。</p>
<h2 id="B-部门"><a href="#B-部门" class="headerlink" title="B 部门"></a>B 部门</h2><p>在 A 部门三面完成后，我等了差不多一星期，这期间我却收到了一封邮件。</p>
<p>大概内容是他在 GitHub 上看到的我，他们的技术总监对我很感兴趣（我都不敢相信我的眼镜），问我想不想来阿里试试。</p>
<p>我对比了 A B 部门的区别发现 B 部门在做的事情上确实更加有诱惑力，之后我表达了有一个面试正在流程中的顾虑；对方表示可以私下和我快速的进行三面，如果一切没问题再交由我自行选择。至少对双方都是一个双赢嘛。</p>
<p>我想也不亏，并且对方很有诚意，就答应试试；于是便有了下面的面试：</p>
<h3 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h3><p><strong>面试官：</strong></p>
<p>对 Java 锁的理解？</p>
<p><strong>博主：</strong></p>
<p>我谈到了 synchronize，Lock 接口的应用。</p>
<p><strong>面试官：</strong></p>
<p>他们两者的区别以及优缺点呢？</p>
<p><strong>博主：</strong></p>
<p><code>synchronize</code> 在 JDK1.6 之前称为重量锁，是通过进出对象监视器来实现同步的；1.6 之后做了 XX 优化。。。</p>
<p>而 <code>ReentrantLock</code> 是利用了一个巧妙数据结构实现的，并且加锁解锁是显式的。。。</p>
<p>之后又引申到<a href="https://crossoverjie.top/%2F2018%2F03%2F29%2Fdistributed-lock%2Fdistributed-lock-redis%2F">分布式锁</a>，光这块就聊了差不多半个小时。</p>
<p>之后又聊到了我的<a href="https://github.com/crossoverJie" target="_blank" rel="external">开源项目</a>：</p>
<ul>
<li>是如何想做这个项目的？</li>
<li>已经有一些关注了后续是如何规划的？</li>
<li>你今后的学习计划是什么？</li>
<li>平时看哪些书？</li>
</ul>
<p>之后技术聊的不是很多，但对于个人发展却聊了不少。</p>
<blockquote>
<p>关于锁相关的内容可以参考这里：<a href="https://crossoverjie.top/%2F2018%2F01%2F25%2FReentrantLock%2F">ReentrantLock 实现原理</a> <a href="https://crossoverjie.top/%2F2018%2F01%2F14%2FSynchronize%2F">synchronize 关键字原理</a></p>
</blockquote>
<h3 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h3><p>隔了差不多一天的时间，二面很快就来了。</p>
<p>内容不是很多：</p>
<ul>
<li><a href="https://crossoverjie.top/%2F2018%2F03%2F16%2Fjava-senior%2Fthread-communication%2F">线程间通信的多种方式</a>？</li>
<li>限流算法？单机限流？分布式限流？</li>
<li>提到了 Guava Cache ,了解它的<a href="https://crossoverjie.top/2018/06/13/guava/guava-cache/">实现原理</a>嘛？</li>
<li>如何定位一个线上问题？</li>
<li>CPU 高负载？OOM 排查等？</li>
</ul>
<p>聊完之后表示第二天应该会有三面。</p>
<h3 id="三面-1"><a href="#三面-1" class="headerlink" title="三面"></a>三面</h3><p>三面的面试官应该是之前邮件中提到的那位总监大佬，以前应该也是一线的技术大牛；聊的问题不是很多：</p>
<ul>
<li>谈谈对 Netty 的理解？</li>
<li>Netty 的线程模型？</li>
<li><a href="https://crossoverjie.top/2018/04/07/algorithm/LRU-cache/">写一个 LRU 缓存</a>。</li>
</ul>
<h3 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h3><p>本以为技术面试完了，结果后面告知所有的面试流程都得有笔试了，于是又参与了一次笔试：</p>
<blockquote>
<p><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/TwoThread.java" target="_blank" rel="external">交替打印奇偶数</a></p>
</blockquote>
<p>这个相对比较简单，基于锁、等待唤醒机制都是可以的。最后也告知笔试通过。</p>
<p>之后在推荐我的那位大佬的帮助下戏剧般的通过了整个技术轮（真的很感谢他的认可），并且得知这个消息是在我刚好和 A 部门约好视频面试时间之后。</p>
<p>也就意味着我必须<strong>拒掉一个部门！</strong></p>
<p>没看错，是我要拒掉一个。这对我来说确实太难了，我压根没想过还有两个机会摆在我面前。</p>
<p>最后凭着个人的爱好以及 B 部门的热情我很不好意思的拒掉了 A 部门。。。</p>
<h3 id="HR-面"><a href="#HR-面" class="headerlink" title="HR 面"></a>HR 面</h3><p>在面这之前我从来没有面过这样大厂的 HR 流程，于是疯狂搜索，希望能弥补点经验。</p>
<p>也许这就是乐极生悲吧，我确实猜中了 HR 问的大部分问题，但遗憾的是最终依然没能通过。</p>
<p>后来我在想如果我没有拒掉 A ，会不会结局不一样了？</p>
<p>但现实就是如此，没有那么多假设，并且每个人也得为自己的选择负责！</p>
<p>大概的问题是：</p>
<ul>
<li>为什么想来阿里？</li>
<li>个人做的最成功最有挑战的事情是什么？</li>
<li>工作中最难忘的经历？</li>
<li>对加入我们团队有何期待？</li>
</ul>
<h2 id="C-部门"><a href="#C-部门" class="headerlink" title="C 部门"></a>C 部门</h2><p>HR 这关被 Pass 之后没多久我居然又收到了第三个部门的邀约。</p>
<p>说实话当时我是拒绝的，之前经历了将近两个月的时间却没能如愿我内心是崩溃的。</p>
<p>我向联系我的大佬表达了我的想法，他倒觉得我最后被 pass 的原因是个小问题，再尝试的话会有很大的几率通过。</p>
<p>我把这事给朋友说了之后也支持我再试试，反正也没啥损失嘛，而且面试的状态还在。</p>
<p>所以我又被打了鸡血，才有了下面的面试经过：</p>
<h3 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h3><p><strong>面试官：</strong></p>
<p>服务化框架的选型和差异？</p>
<p><strong>博主：</strong></p>
<p>一起探讨了 SpringCloud、Dubbo、Thrift 的差异，优缺点等。</p>
<p><strong>面试官：</strong></p>
<p><a href="https://crossoverjie.top/2018/01/08/Consistent-Hash/">一致性 Hash 算法的原理</a>？</p>
<p><strong>博主：</strong></p>
<p>将数据 Hash 之后落到一个 <code>0 ~ 2^32-1</code> 构成的一个环上。。。。</p>
<p><strong>面试官：</strong></p>
<p>谈谈你理解的 Zookeeper？</p>
<p><strong>博主：</strong></p>
<p>作为一个分布式协调器。。。</p>
<p><strong>面试官：</strong></p>
<p>如何处理 MQ 重复消费？</p>
<p><strong>博主：</strong></p>
<p>业务幂等处理。。。。</p>
<p><strong>面试官：</strong></p>
<p>客户端负载算法？</p>
<p><strong>博主：</strong></p>
<p>轮询、随机、一致性 Hash、故障转移、LRU 等。。</p>
<p><strong>面试官：</strong></p>
<p>long 类型的赋值是否是原子的？</p>
<p><strong>博主：</strong></p>
<p>不是。。。</p>
<p><strong>面试官：</strong></p>
<p><a href="https://crossoverjie.top/2018/03/09/volatile/">volatile 关键字的原理及作用？happen Before？</a></p>
<p><strong>博主：</strong></p>
<p>可见性、一致性。。</p>
<h3 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h3><p>一面之后大概一周的时间接到了二面的电话：</p>
<p>原以为会像之前一样直接进入笔试，这次上来先简单聊了下：</p>
<ul>
<li>谈谈对微服务的理解，好处以及弊端？</li>
<li>分布式缓存的设计？热点缓存？</li>
</ul>
<p>之后才正式进入笔试流程：</p>
<blockquote>
<p>这次主要考察设计能力，其实就是对设计模式的理解？能否应对后续的扩展性。</p>
</blockquote>
<p>笔试完了之后也和面试官交流，原以为会是算法之类的测试，后来得知他能看到前几轮的笔试情况，特地挑的没有做过的方向。</p>
<p>所以大家也不用刻意去押题，总有你想不到的，平时多积累才是硬道理。</p>
<h3 id="三面-2"><a href="#三面-2" class="headerlink" title="三面"></a>三面</h3><p>又过了两周左右，得到 HR 通知；希望能过去杭州参加现场面试。并且阿里包了来回的机票酒店等。</p>
<p>可见阿里对人才渴望还是舍得下成本的。</p>
<p>既然都这样了，就当成一次旅游所以去了一趟杭州。</p>
<p>现场面的时候有别于其他面试，是由两个面试官同时参与：</p>
<blockquote>
<p>给一个场景，谈谈你的架构方式。</p>
</blockquote>
<p>这就对平时的积累要求较高了。</p>
<p>还有一个印象较深的是：</p>
<blockquote>
<p>在网页上点击一个按钮到服务器的整个流程，尽量完整。</p>
</blockquote>
<p>其实之前看过，好像是 Google 的一个面试题。</p>
<p>完了之后让我回去等通知，没有见到 HR 我就知道凉了，果不其然。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看到这里的朋友应该都是老铁了，我也把上文提到的大多数面试题整理在了 GitHub：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fsi40z9dulj30sl0p00yg.jpg" alt=""></p>
<p>厂库地址：</p>
<p><a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
<p>最后总结下这将近四个月的面试心得：</p>
<ul>
<li>一定要积极的推销自己，像在 A 部门的三面时，由于基础答得不是很好；所以最后我表达了自己的态度，对工作、技术的积极性。让面试官看到你的潜力值得一个 HC 名额。</li>
<li>面试过程中遇到自己的不会的可以主动提出，切不可不懂装懂，这一问就露馅。可以将面试官引导到自己擅长的领域。比如当时我正好研究了锁，所以和面试官一聊就是半小时这就是加分项。</li>
<li>平时要主动积累知识。写博客和参与开源项目就是很好的方式。</li>
<li>博客可以记录自己踩过的坑，加深印象，而且在写的过程中可以查漏补缺，最后把整个知识体系巩固的比较牢固，良好的内容还可以得到意想不到的收获，比如我第一次面试的机会。</li>
<li>GitHub 是开发者的一张名片，积极参与开源项目可以和全球大佬头脑风暴，并且在面试过程中绝对是一个加分利器。</li>
<li>面试官一般最后都会问你有什么要问我的？千万不要问一些公司福利待遇之类的问题。可以问下本次面试的表现？还有哪些需要完善的？从而知道自己答得如何也能补全自己。</li>
</ul>
<p>还有一点：不要在某次面试失利后否定自己，有时真的不是自己能力不行。这个也讲缘分。</p>
<p><strong>塞翁失马焉知非福</strong></p>
<p>我就是个例子，虽然最后没能去成阿里，现在在公司也是一个部门的技术负责人，在我们城市还有个窝，温馨的家，和女朋友一起为想要的生活努力奋斗。</p>
<blockquote>
<p>欢迎关注作者公众号于我交流🤗。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fshrh2oexpj31kw0wkgsx.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近有些朋友在面试阿里，加上 &lt;a href=&quot;https://github.com/crossoverJie/Java-Interview&quot;&gt;Java-Interview&lt;/a&gt; 项目的原因也有小伙伴和我讨论，近期也在负责部门的招聘，这让我想起年初那段长达三个月的奇葩面试经历🤣。&lt;/p&gt;
&lt;p&gt;本来没想拿出来说的，毕竟最后也没成。&lt;/p&gt;
&lt;p&gt;但由于那几个月的经历让我了解到了大厂的工作方式、对候选同学的考察重点以及面试官的套路等都有了全新的认识。&lt;/p&gt;
&lt;p&gt;当然最重要的是这段时间的查漏补缺也让自己精进不少。&lt;/p&gt;
&lt;p&gt;先交代下背景吧：&lt;/p&gt;
&lt;p&gt;从去年 12 月到今年三月底，我前前后后面了阿里三个部门。&lt;/p&gt;
&lt;p&gt;其中两个部门通过了技术面试，还有一个跪在了三面。&lt;/p&gt;
&lt;p&gt;光看结果还不错，但整个流程堪称曲折。&lt;/p&gt;
&lt;p&gt;下面我会尽量描述流程以及大致的面试题目大纲，希望对想要跳槽、正在面试的同学带来点灵感，帮助可能谈不上，但启发还是能有。&lt;/p&gt;
&lt;p&gt;以下内容较长，请再次备好瓜子板凳。&lt;/p&gt;
    
    </summary>
    
      <category term="Interview" scheme="http://crossoverjie.top/categories/Interview/"/>
    
      <category term="Person" scheme="http://crossoverjie.top/categories/Interview/Person/"/>
    
    
  </entry>
  
  <entry>
    <title>Guava 源码分析（Cache 原理）</title>
    <link href="http://crossoverjie.top/2018/06/13/guava/guava-cache/"/>
    <id>http://crossoverjie.top/2018/06/13/guava/guava-cache/</id>
    <published>2018-06-12T17:20:42.000Z</published>
    <updated>2018-07-14T10:47:43.952Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/06/12/5b1fea79e07cb.jpeg" alt="1.jpeg"></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Google 出的 <a href="https://github.com/google/guava" target="_blank" rel="external">Guava</a> 是 Java 核心增强的库，应用非常广泛。</p>
<p>我平时用的也挺频繁，这次就借助日常使用的 Cache 组件来看看 Google 大牛们是如何设计的。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><blockquote>
<p>本次主要讨论缓存。</p>
</blockquote>
<p>缓存在日常开发中举足轻重，如果你的应用对某类数据有着较高的读取频次，并且改动较小时那就非常适合利用缓存来提高性能。</p>
<p>缓存之所以可以提高性能是因为它的读取效率很高，就像是 CPU 的 <code>L1、L2、L3</code> 缓存一样，级别越高相应的读取速度也会越快。</p>
<p>但也不是什么好处都占，读取速度快了但是它的内存更小资源更宝贵，所以我们应当缓存真正需要的数据。</p>
<blockquote>
<p>其实也就是典型的空间换时间。</p>
</blockquote>
<p>下面谈谈 Java 中所用到的缓存。</p>
<a id="more"></a>
<h3 id="JVM-缓存"><a href="#JVM-缓存" class="headerlink" title="JVM 缓存"></a>JVM 缓存</h3><p>首先是 JVM 缓存，也可以认为是堆缓存。</p>
<p>其实就是创建一些全局变量，如 <code>Map、List</code> 之类的容器用于存放数据。</p>
<p>这样的优势是使用简单但是也有以下问题：</p>
<ul>
<li>只能显式的写入，清除数据。</li>
<li>不能按照一定的规则淘汰数据，如 <code>LRU，LFU，FIFO</code> 等。</li>
<li>清除数据时的回调通知。</li>
<li>其他一些定制功能等。</li>
</ul>
<h3 id="Ehcache、Guava-Cache"><a href="#Ehcache、Guava-Cache" class="headerlink" title="Ehcache、Guava Cache"></a>Ehcache、Guava Cache</h3><p>所以出现了一些专门用作 JVM 缓存的开源工具出现了，如本文提到的 Guava Cache。</p>
<p>它具有上文 JVM 缓存不具有的功能，如自动清除数据、多种清除算法、清除回调等。</p>
<p>但也正因为有了这些功能，这样的缓存必然会多出许多东西需要额外维护，自然也就增加了系统的消耗。</p>
<h3 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h3><p>刚才提到的两种缓存其实都是堆内缓存，只能在单个节点中使用，这样在分布式场景下就招架不住了。</p>
<p>于是也有了一些缓存中间件，如 Redis、Memcached，在分布式环境下可以共享内存。</p>
<p>具体不在本次的讨论范围。</p>
<h2 id="Guava-Cache-示例"><a href="#Guava-Cache-示例" class="headerlink" title="Guava Cache 示例"></a>Guava Cache 示例</h2><p>之所以想到 Guava 的 Cache，也是最近在做一个需求，大体如下：</p>
<blockquote>
<p>从 Kafka 实时读取出应用系统的日志信息，该日志信息包含了应用的健康状况。<br>如果在时间窗口 N 内发生了 X 次异常信息，相应的我就需要作出反馈（报警、记录日志等）。</p>
</blockquote>
<p>对此 Guava 的 Cache 就非常适合，我利用了它的 N 个时间内不写入数据时缓存就清空的特点，在每次读取数据时判断异常信息是否大于 X 即可。</p>
<p>伪代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;alert.in.time:2&#125;"</span>)</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> time ;</div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> LoadingCache <span class="title">buildCache</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> CacheBuilder.newBuilder()</div><div class="line">            .expireAfterWrite(time, TimeUnit.MINUTES)</div><div class="line">            .build(<span class="keyword">new</span> CacheLoader&lt;Long, AtomicLong&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> AtomicLong <span class="title">load</span><span class="params">(Long key)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 判断是否需要报警</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAlert</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">if</span> (counter.get(KEY).incrementAndGet() &gt;= limit) &#123;</div><div class="line">            LOGGER.info(<span class="string">"***********报警***********"</span>);</div><div class="line"></div><div class="line">            <span class="comment">//将缓存清空</span></div><div class="line">            counter.get(KEY).getAndSet(<span class="number">0L</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">        LOGGER.error(<span class="string">"Exception"</span>, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先是构建了 LoadingCache 对象，在 N 分钟内不写入数据时就回收缓存（当通过 Key 获取不到缓存时，默认返回 0）。</p>
<p>然后在每次消费时候调用 <code>checkAlert()</code> 方法进行校验，这样就可以达到上文的需求。</p>
<p>我们来设想下 Guava 它是如何实现过期自动清除数据，并且是可以按照 LRU 这样的方式清除的。</p>
<p>大胆假设下：</p>
<blockquote>
<p>内部通过一个队列来维护缓存的顺序，每次访问过的数据移动到队列头部，并且额外开启一个线程来判断数据是否过期，过期就删掉。有点类似于我之前写过的 <a href="https://crossoverjie.top/%2F2018%2F04%2F07%2Falgorithm%2FLRU-cache%2F">动手实现一个 LRU cache</a></p>
</blockquote>
<p>胡适说过：大胆假设小心论证</p>
<p>下面来看看 Guava 到底是怎么实现。</p>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>看原理最好不过是跟代码一步步走了：</p>
<p>示例代码在这里：</p>
<p><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/guava/CacheLoaderTest.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/guava/CacheLoaderTest.java</a></p>
<p><img src="https://i.loli.net/2018/06/13/5b2008f4c1003.png" alt="8.png"></p>
<p>为了能看出 Guava 是怎么删除过期数据的在获取缓存之前休眠了 5 秒钟，达到了超时条件。</p>
<p><img src="https://i.loli.net/2018/06/13/5b1ffe4eebae0.png" alt="2.png"></p>
<p>最终会发现在 <code>com.google.common.cache.LocalCache</code> 类的 2187 行比较关键。</p>
<p>再跟进去之前第 2182 行会发现先要判断 count 是否大于 0，这个 count 保存的是当前缓存的数量，并用 volatile 修饰保证了可见性。</p>
<blockquote>
<p>更多关于 volatile 的相关信息可以查看 <a href="https://crossoverjie.top/%2F2018%2F03%2F09%2Fvolatile%2F">你应该知道的 volatile 关键字</a></p>
</blockquote>
<p>接着往下跟到：</p>
<p><img src="https://i.loli.net/2018/06/13/5b1fffc88c3e6.png" alt="3.png"></p>
<p>2761 行，根据方法名称可以看出是判断当前的 Entry 是否过期，该 entry 就是通过 key 查询到的。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1ft9l0mx77rj30zk0a1tat.jpg" alt=""></p>
<p>这里就很明显的看出是根据根据构建时指定的过期方式来判断当前 key 是否过期了。</p>
<p><img src="https://i.loli.net/2018/06/13/5b20017f32ff0.png" alt="5.png"></p>
<p>如果过期就往下走，尝试进行过期删除（需要加锁，后面会具体讨论）。</p>
<p><img src="https://i.loli.net/2018/06/13/5b2001eeb40d5.png" alt="6.png"></p>
<p>到了这里也很清晰了：</p>
<ul>
<li>获取当前缓存的总数量</li>
<li>自减一（前面获取了锁，所以线程安全）</li>
<li>删除并将更新的总数赋值到 count。</li>
</ul>
<p>其实大体上就是这个流程，Guava 并没有按照之前猜想的另起一个线程来维护过期数据。</p>
<p>应该是以下原因：</p>
<ul>
<li>新起线程需要资源消耗。</li>
<li>维护过期数据还要获取额外的锁，增加了消耗。</li>
</ul>
<p>而在查询时候顺带做了这些事情，但是如果该缓存迟迟没有访问也会存在数据不能被回收的情况，不过这对于一个高吞吐的应用来说也不是问题。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>最后再来总结下 Guava 的 Cache。</p>
<p>其实在上文跟代码时会发现通过一个 key 定位数据时有以下代码：</p>
<p><img src="https://i.loli.net/2018/06/13/5b20040d257cb.png" alt="7.png"></p>
<p>如果有看过 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/ConcurrentHashMap.md" target="_blank" rel="external">ConcurrentHashMap 的原理</a> 应该会想到这其实非常类似。</p>
<p>其实 Guava Cache 为了满足并发场景的使用，核心的数据结构就是按照 ConcurrentHashMap 来的，这里也是一个 key 定位到一个具体位置的过程。</p>
<blockquote>
<p>先找到 Segment，再找具体的位置，等于是做了两次 Hash 定位。</p>
</blockquote>
<p>上文有一个假设是对的，它内部会维护两个队列 <code>accessQueue,writeQueue</code> 用于记录缓存顺序，这样才可以按照顺序淘汰数据（类似于利用 LinkedHashMap 来做 LRU 缓存）。</p>
<p>同时从上文的构建方式来看，它也是<a href="https://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/">构建者模式</a>来创建对象的。</p>
<p>因为作为一个给开发者使用的工具，需要有很多的自定义属性，利用构建则模式再合适不过了。</p>
<p>Guava 其实还有很多东西没谈到，比如它利用 GC 来回收内存，移除数据时的回调通知等。之后再接着讨论。</p>
<p>扫码关注微信公众号，第一时间获取消息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/06/12/5b1fea79e07cb.jpeg&quot; alt=&quot;1.jpeg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Google 出的 &lt;a href=&quot;https://github.com/google/guava&quot;&gt;Guava&lt;/a&gt; 是 Java 核心增强的库，应用非常广泛。&lt;/p&gt;
&lt;p&gt;我平时用的也挺频繁，这次就借助日常使用的 Cache 组件来看看 Google 大牛们是如何设计的。&lt;/p&gt;
&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本次主要讨论缓存。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;缓存在日常开发中举足轻重，如果你的应用对某类数据有着较高的读取频次，并且改动较小时那就非常适合利用缓存来提高性能。&lt;/p&gt;
&lt;p&gt;缓存之所以可以提高性能是因为它的读取效率很高，就像是 CPU 的 &lt;code&gt;L1、L2、L3&lt;/code&gt; 缓存一样，级别越高相应的读取速度也会越快。&lt;/p&gt;
&lt;p&gt;但也不是什么好处都占，读取速度快了但是它的内存更小资源更宝贵，所以我们应当缓存真正需要的数据。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实也就是典型的空间换时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面谈谈 Java 中所用到的缓存。&lt;/p&gt;
    
    </summary>
    
      <category term="Guava" scheme="http://crossoverjie.top/categories/Guava/"/>
    
    
      <category term="Cache" scheme="http://crossoverjie.top/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>分布式工具的一次小升级⏫</title>
    <link href="http://crossoverjie.top/2018/06/07/distributed-lock/distributed-lock-redis-update/"/>
    <id>http://crossoverjie.top/2018/06/07/distributed-lock/distributed-lock-redis-update/</id>
    <published>2018-06-07T14:20:46.000Z</published>
    <updated>2018-06-07T12:45:12.511Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79ly1fs2s4f0jf4j31g80ytn6i.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在做 <a href="https://crossoverjie.top/2018/05/07/ssm/SSM18-seconds-kill/#distributed-redis-tool-%E2%AC%86%EF%B8%8Fv1-0-3">秒杀架构实践</a> 时有提到对 <a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">distributed-redis-tool</a> 的一次小升级，但是没有细说。</p>
<p>其实主要原因是：</p>
<blockquote>
<p>秒杀时我做压测：由于集成了这个限流组件，并发又比较大，所以导致连接、断开 Redis 非常频繁。<br>最终导致获取不了 Redis connection 的异常。</p>
</blockquote>
<h2 id="池化技术"><a href="#池化技术" class="headerlink" title="池化技术"></a>池化技术</h2><p>这就是一个典型的对稀缺资源使用不善导致的。</p>
<p>何为稀缺资源？常见的有：</p>
<ul>
<li>线程</li>
<li>数据库连接</li>
<li>网络连接等</li>
</ul>
<p>这些资源都有共同的特点：<strong>创建销毁成本较高</strong>。</p>
<a id="more"></a>
<p>这里涉及到的 Redis 连接也属于该类资源。</p>
<p>我们希望将这些稀有资源管理起来放到一个池子里，当需要时就从中获取，用完就放回去，不够用时就等待（或返回）。</p>
<p>这样我们只需要初始化并维护好这个池子，就能避免频繁的创建、销毁这些资源（也有资源长期未使用需要缩容的情况）。</p>
<p>通常我们称这项姿势为池化技术，如常见的：</p>
<ul>
<li>线程池</li>
<li>各种资源的连接池等。</li>
</ul>
<p>为此我将使用到 Redis 的 <a href="https://crossoverjie.top/%2F2018%2F03%2F29%2Fdistributed-lock%2Fdistributed-lock-redis%2F">分布式锁</a>、<a href="https://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/">分布式限流</a> 都升级为利用连接池来获取 Redis 的连接。</p>
<p>这里以<a href="https://github.com/crossoverJie/distributed-redis-tool#distributed-lock" target="_blank" rel="external">分布式锁</a>为例：</p>
<p>将使用的 api 修改为：</p>
<p>原有：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="comment">//Need to get Redis connection </span></div><div class="line">        RedisLock redisLock = <span class="keyword">new</span> RedisLock() ;</div><div class="line">        HostAndPort hostAndPort = <span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7000</span>) ;</div><div class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(hostAndPort) ;</div><div class="line">        RedisLock redisLock = <span class="keyword">new</span> RedisLock.Builder(jedisCluster)</div><div class="line">                .lockPrefix(<span class="string">"lock_test"</span>)</div><div class="line">                .sleepTime(<span class="number">100</span>)</div><div class="line">                .build();</div><div class="line">                </div><div class="line">        <span class="keyword">return</span> redisLock ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockConfig</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(RedisLockConfig.class);</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisConnectionFactory jedisConnectionFactory;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisLock redisLock = <span class="keyword">new</span> RedisLock.Builder(jedisConnectionFactory,RedisToolsConstant.SINGLE)</div><div class="line">                .lockPrefix(<span class="string">"lock_"</span>)</div><div class="line">                .sleepTime(<span class="number">100</span>)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> redisLock;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将以前的 Jedis 修改为 <code>JedisConnectionFactory</code>，后续的 Redis 连接就可通过这个对象获取。</p>
<p>并且显示的传入使用 RedisCluster 还是单机的 Redis。</p>
<p>所以在真正操作 Redis 时需要修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, String request)</span> </span>&#123;</div><div class="line">    <span class="comment">//get connection</span></div><div class="line">    Object connection = getConnection();</div><div class="line">    String result ;</div><div class="line">    <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> Jedis)&#123;</div><div class="line">        result =  ((Jedis) connection).set(lockPrefix + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line">        ((Jedis) connection).close();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        result = ((JedisCluster) connection).set(lockPrefix + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ((JedisCluster) connection).close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            logger.error(<span class="string">"IOException"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (LOCK_MSG.equals(result)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//获取连接</span></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">    Object connection ;</div><div class="line">    <span class="keyword">if</span> (type == RedisToolsConstant.SINGLE)&#123;</div><div class="line">        RedisConnection redisConnection = jedisConnectionFactory.getConnection();</div><div class="line">        connection = redisConnection.getNativeConnection();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        RedisClusterConnection clusterConnection = jedisConnectionFactory.getClusterConnection();</div><div class="line">        connection = clusterConnection.getNativeConnection() ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> connection;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最大的改变就是将原有操作 Redis 的对象（<code>T extends JedisCommands</code>）改为从连接池中获取。</p>
<p>由于使用了 <code>org.springframework.data.redis.connection.jedis.JedisConnectionFactory</code> 作为 Redis 连接池。</p>
<p>所以需要再使用时构件好这个对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</div><div class="line">config.setMaxIdle(<span class="number">10</span>);</div><div class="line">config.setMaxTotal(<span class="number">300</span>);</div><div class="line">config.setMaxWaitMillis(<span class="number">10000</span>);</div><div class="line">config.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">config.setTestOnReturn(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">RedisClusterConfiguration redisClusterConfiguration = <span class="keyword">new</span> RedisClusterConfiguration();</div><div class="line">redisClusterConfiguration.addClusterNode(<span class="keyword">new</span> RedisNode(<span class="string">"10.19.13.51"</span>, <span class="number">7000</span>));</div><div class="line"></div><div class="line"><span class="comment">//单机</span></div><div class="line">JedisConnectionFactory jedisConnectionFactory = <span class="keyword">new</span> JedisConnectionFactory(config);</div><div class="line"></div><div class="line"><span class="comment">//集群</span></div><div class="line"><span class="comment">//JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory(redisClusterConfiguration) ;</span></div><div class="line">jedisConnectionFactory.setHostName(<span class="string">"47.98.194.60"</span>);</div><div class="line">jedisConnectionFactory.setPort(<span class="number">6379</span>);</div><div class="line">jedisConnectionFactory.setPassword(<span class="string">""</span>);</div><div class="line">jedisConnectionFactory.setTimeout(<span class="number">100000</span>);</div><div class="line">jedisConnectionFactory.afterPropertiesSet();</div><div class="line"><span class="comment">//jedisConnectionFactory.setShardInfo(new JedisShardInfo("47.98.194.60", 6379));</span></div><div class="line"><span class="comment">//JedisCluster jedisCluster = new JedisCluster(hostAndPort);</span></div><div class="line"></div><div class="line">HostAndPort hostAndPort = <span class="keyword">new</span> HostAndPort(<span class="string">"10.19.13.51"</span>, <span class="number">7000</span>);</div><div class="line">JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(hostAndPort);</div><div class="line">redisLock = <span class="keyword">new</span> RedisLock.Builder(jedisConnectionFactory, RedisToolsConstant.SINGLE)</div><div class="line">        .lockPrefix(<span class="string">"lock_"</span>)</div><div class="line">        .sleepTime(<span class="number">100</span>)</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>看起比较麻烦，需要构建对象的较多。</p>
<p>但整合 Spring 使用时就要清晰许多。</p>
<h2 id="配合-Spring"><a href="#配合-Spring" class="headerlink" title="配合 Spring"></a>配合 Spring</h2><p>Spring 很大的一个作用就是帮我们管理对象，所以像上文那些看似很复杂的对象都可以交由它来管理：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- jedis 配置 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"JedispoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxTotal&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWait&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> <span class="comment">&lt;!-- redis服务器中心 --&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"JedispoolConfig"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.host&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.password&#125;"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.timeout&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个其实没多少好说的，就算是换成 SpringBoot 也是创建 <code>JedispoolConfig,connectionFactory,redisTemplate</code> 这些 bean 即可。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>换为连接池之后再进行压测自然没有出现获取不了 Redis 连接的异常（并发达到一定的量也会出错）说明更新是很有必要的。</p>
<p>推荐有用到该组件的朋友都升级下，也欢迎提出 Issues 和 PR。</p>
<p>项目地址：</p>
<p><a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fs2s4f0jf4j31g80ytn6i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在做 &lt;a href=&quot;https://crossoverjie.top/2018/05/07/ssm/SSM18-seconds-kill/#distributed-redis-tool-%E2%AC%86%EF%B8%8Fv1-0-3&quot;&gt;秒杀架构实践&lt;/a&gt; 时有提到对 &lt;a href=&quot;https://github.com/crossoverJie/distributed-redis-tool&quot;&gt;distributed-redis-tool&lt;/a&gt; 的一次小升级，但是没有细说。&lt;/p&gt;
&lt;p&gt;其实主要原因是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;秒杀时我做压测：由于集成了这个限流组件，并发又比较大，所以导致连接、断开 Redis 非常频繁。&lt;br&gt;最终导致获取不了 Redis connection 的异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;池化技术&quot;&gt;&lt;a href=&quot;#池化技术&quot; class=&quot;headerlink&quot; title=&quot;池化技术&quot;&gt;&lt;/a&gt;池化技术&lt;/h2&gt;&lt;p&gt;这就是一个典型的对稀缺资源使用不善导致的。&lt;/p&gt;
&lt;p&gt;何为稀缺资源？常见的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程&lt;/li&gt;
&lt;li&gt;数据库连接&lt;/li&gt;
&lt;li&gt;网络连接等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些资源都有共同的特点：&lt;strong&gt;创建销毁成本较高&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Distributed Tools" scheme="http://crossoverjie.top/categories/Distributed-Tools/"/>
    
    
      <category term="Distributed Lock" scheme="http://crossoverjie.top/tags/Distributed-Lock/"/>
    
      <category term="Distributed Limited" scheme="http://crossoverjie.top/tags/Distributed-Limited/"/>
    
  </entry>
  
  <entry>
    <title>记于 2018 年高考！</title>
    <link href="http://crossoverjie.top/2018/06/06/exam/2018-06-07-The-university-entrance-exam/"/>
    <id>http://crossoverjie.top/2018/06/06/exam/2018-06-07-The-university-entrance-exam/</id>
    <published>2018-06-06T14:20:46.000Z</published>
    <updated>2018-06-07T17:31:04.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2012-02-28"><a href="#2012-02-28" class="headerlink" title="2012/02/28"></a>2012/02/28</h2><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fs328nqn2ej30go0b3q5q.jpg" alt=""></p>
<blockquote>
<p>2012年二月二十八日。</p>
</blockquote>
<p>这天学校举行了<code>高考 100 天誓师大会</code>，当时完全不知道意味着什么，只感觉现场热血沸腾、激情高涨，心里告诉自己就算只剩下 100 天我也能考上清华其次也是北大。</p>
<h2 id="2012-06-03"><a href="#2012-06-03" class="headerlink" title="2012/06/03"></a>2012/06/03</h2><blockquote>
<p>2012年六月三日。</p>
</blockquote>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs32g2rjm9j30im0dyq5e.jpg" alt=""></p>
<p>晚自习拿出前段时间刚拍的毕业合照，恨死摄影师，没有抓拍到我最帅的角度😡。</p>
<a id="more"></a>
<h2 id="2012-06-04"><a href="#2012-06-04" class="headerlink" title="2012/06/04"></a>2012/06/04</h2><blockquote>
<p>2012年六月四日。</p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fs32bu42c5j30im0dymyj.jpg" alt=""></p>
<p>离校前的最后一晚，我们像往常每周的音乐晚自习一样，由音乐委员（@猪娅）带着大家唱可米小子的青春纪念册。</p>
<p>小红姐（班主任）特别的没来查岗。</p>
<p>心里想着，这就是青春嘛？也不过如此。</p>
<p>大家拿着热和的手机（才发的，平时会收）肆意的拍着照片：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fs32o22ln1j30im0dyq5b.jpg" alt=""></p>
<p>那时没有美颜、没有修图，一切都是那么和谐。</p>
<h2 id="2012-06-05"><a href="#2012-06-05" class="headerlink" title="2012/06/05"></a>2012/06/05</h2><blockquote>
<p>2012年六月五日。</p>
</blockquote>
<p>是进津（江津）赶考，走时特地在六食堂买了一个包子，没想到是在学校最后一顿早餐。</p>
<p>车上大家有说有笑，嗯，就像是资深导游带的一个低价旅游团，每人心里充满了惊喜却不知即将面临什么。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fs335w7e4bj30im0dytae.jpg" alt=""></p>
<h2 id="2012-06-07"><a href="#2012-06-07" class="headerlink" title="2012/06/07"></a>2012/06/07</h2><blockquote>
<p>2012年六月七日。</p>
</blockquote>
<p>大家在各自的考场奋笔疾书，用两天四场考试来为高中三年画上句号。</p>
<p>有的梦想进入理想的大学、和心仪的 <code>TA</code> 长相厮守，当然也有回家继承百万家产😂。</p>
<p>而我当时只想快速的结束这一切，高中三年，特别是高三这年真的是够了。每天做不完的卷子，背不完的诗词，还得想着为陈家老祖宗出一位正儿八经的大学生。</p>
<p>所以考试完全采用人卷合一的心态（能做就做，不会就过）快速的过完了这两天。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fs34gry1b2j30i20r3djq.jpg" alt=""></p>
<p>这些作文题目还看得懂嘛。。</p>
<h2 id="2018-06-07"><a href="#2018-06-07" class="headerlink" title="2018/06/07"></a>2018/06/07</h2><blockquote>
<p><strong>2018</strong>年六月七日。</p>
</blockquote>
<p>高中学过许多关于时光飞逝的成语、古诗，但都没有亲身体会那么深刻！</p>
<p>六年时间，红了樱桃，绿了芭蕉。</p>
<p>有的步入职场、升职加薪、求婚成功、穿上婚纱、组建家庭、初为人母。</p>
<p>每人都过着各自的生活，但一旦相见就有数不尽的话题（@江源），逃课打球、翻墙上网、暗恋女神、天天向上、作业卷子。</p>
<p>这句话送给高2012级10班的所有同学：</p>
<p><strong><em>愿你出走半生，归来仍是少年</em></strong></p>
<p>一大波图片即将袭来：</p>
<p>摆拍虽好，不要抽烟哦：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs33jy8cg6j30im0dyq50.jpg" alt=""></p>
<p>小红姐生日快乐，永远十八：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fs33lewu4rj30im0ccjtt.jpg" alt=""></p>
<p>集体生日，年年十八：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fs33o1d2i8j30im0ceab5.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs33o8y925j30im0ceta5.jpg" alt=""></p>
<p>状元书摊，不是第一不卖：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fs34c6khchj30im0dytcg.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2012-02-28&quot;&gt;&lt;a href=&quot;#2012-02-28&quot; class=&quot;headerlink&quot; title=&quot;2012/02/28&quot;&gt;&lt;/a&gt;2012/02/28&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fs328nqn2ej30go0b3q5q.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2012年二月二十八日。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这天学校举行了&lt;code&gt;高考 100 天誓师大会&lt;/code&gt;，当时完全不知道意味着什么，只感觉现场热血沸腾、激情高涨，心里告诉自己就算只剩下 100 天我也能考上清华其次也是北大。&lt;/p&gt;
&lt;h2 id=&quot;2012-06-03&quot;&gt;&lt;a href=&quot;#2012-06-03&quot; class=&quot;headerlink&quot; title=&quot;2012/06/03&quot;&gt;&lt;/a&gt;2012/06/03&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;2012年六月三日。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fs32g2rjm9j30im0dyq5e.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;晚自习拿出前段时间刚拍的毕业合照，恨死摄影师，没有抓拍到我最帅的角度😡。&lt;/p&gt;
    
    </summary>
    
      <category term="小情绪" scheme="http://crossoverjie.top/categories/%E5%B0%8F%E6%83%85%E7%BB%AA/"/>
    
    
  </entry>
  
  <entry>
    <title>Netty(一) SpringBoot 整合长连接心跳机制</title>
    <link href="http://crossoverjie.top/2018/05/24/netty/Netty(1)TCP-Heartbeat/"/>
    <id>http://crossoverjie.top/2018/05/24/netty/Netty(1)TCP-Heartbeat/</id>
    <published>2018-05-23T17:02:54.000Z</published>
    <updated>2018-05-27T18:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/25/5b0774828db53.jpeg" alt="photo-1522204657746-fccce0824cfd.jpeg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Netty 是一个高性能的 NIO 网络框架，本文基于 SpringBoot 以常见的心跳机制来认识 Netty。</p>
<p>最终能达到的效果：</p>
<ul>
<li>客户端每隔 N 秒检测是否需要发送心跳。</li>
<li>服务端也每隔 N 秒检测是否需要发送心跳。</li>
<li>服务端可以主动 push 消息到客户端。</li>
<li>基于 SpringBoot 监控，可以查看实时连接以及各种应用信息。</li>
</ul>
<p>效果如下：</p>
<p><img src="https://crossoverjie.top/uploads/netty-Heartbeat.gif" alt="show"></p>
<a id="more"></a>
<h1 id="IdleStateHandler"><a href="#IdleStateHandler" class="headerlink" title="IdleStateHandler"></a>IdleStateHandler</h1><p>Netty 可以使用 IdleStateHandler 来实现连接管理，当连接空闲时间太长（没有发送、接收消息）时则会触发一个事件，我们便可在该事件中实现心跳机制。</p>
<h2 id="客户端心跳"><a href="#客户端心跳" class="headerlink" title="客户端心跳"></a>客户端心跳</h2><p>当客户端空闲了 N 秒没有给服务端发送消息时会自动发送一个心跳来维持连接。</p>
<p>核心代码代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClientHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(EchoClientHandle.class);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</div><div class="line">            IdleStateEvent idleStateEvent = (IdleStateEvent) evt ;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (idleStateEvent.state() == IdleState.WRITER_IDLE)&#123;</div><div class="line">                LOGGER.info(<span class="string">"已经 10 秒没有发送信息！"</span>);</div><div class="line">                <span class="comment">//向服务端发送消息</span></div><div class="line">                CustomProtocol heartBeat = SpringBeanFactory.getBean(<span class="string">"heartBeat"</span>, CustomProtocol.class);</div><div class="line">                ctx.writeAndFlush(heartBeat).addListener(ChannelFutureListener.CLOSE_ON_FAILURE) ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf in)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//从服务端收到消息时被调用</span></div><div class="line">        LOGGER.info(<span class="string">"客户端收到消息=&#123;&#125;"</span>,in.toString(CharsetUtil.UTF_8)) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现非常简单，只需要在事件回调中发送一个消息即可。</p>
<p>由于整合了 SpringBoot ，所以发送的心跳信息是一个单例的 Bean。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;channel.id&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(value = <span class="string">"heartBeat"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> CustomProtocol <span class="title">heartBeat</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomProtocol(id,<span class="string">"ping"</span>) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里涉及到了自定义协议的内容，请继续查看下文。</p>
<p>当然少不了启动引导：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatClient</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(HeartbeatClient.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;netty.server.port&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nettyPort;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;netty.server.host&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String host;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> SocketChannel channel;</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</div><div class="line">        bootstrap.group(group)</div><div class="line">                .channel(NioSocketChannel.class)</div><div class="line">                .handler(<span class="keyword">new</span> CustomerHandleInitializer())</div><div class="line">        ;</div><div class="line"></div><div class="line">        ChannelFuture future = bootstrap.connect(host, nettyPort).sync();</div><div class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</div><div class="line">            LOGGER.info(<span class="string">"启动 Netty 成功"</span>);</div><div class="line">        &#125;</div><div class="line">        channel = (SocketChannel) future.channel();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerHandleInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ch.pipeline()</div><div class="line">                <span class="comment">//10 秒没发送消息 将IdleStateHandler 添加到 ChannelPipeline 中</span></div><div class="line">                .addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, <span class="number">10</span>, <span class="number">0</span>))</div><div class="line">                .addLast(<span class="keyword">new</span> HeartbeatEncode())</div><div class="line">                .addLast(<span class="keyword">new</span> EchoClientHandle())</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以当应用启动每隔 10 秒会检测是否发送过消息，不然就会发送心跳信息。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1frqd863hrhj31kw04taed.jpg" alt=""></p>
<h2 id="服务端心跳"><a href="#服务端心跳" class="headerlink" title="服务端心跳"></a>服务端心跳</h2><p>服务器端的心跳其实也是类似，也需要在 ChannelPipeline 中添加一个 IdleStateHandler 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatSimpleHandle</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">CustomProtocol</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(HeartBeatSimpleHandle.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBuf HEART_BEAT =  Unpooled.unreleasableBuffer(Unpooled.copiedBuffer(<span class="keyword">new</span> CustomProtocol(<span class="number">123456L</span>,<span class="string">"pong"</span>).toString(),CharsetUtil.UTF_8));</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取消绑定</div><div class="line">     * <span class="doctag">@param</span> ctx</div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        NettySocketHolder.remove((NioSocketChannel) ctx.channel());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (evt <span class="keyword">instanceof</span> IdleStateEvent)&#123;</div><div class="line">            IdleStateEvent idleStateEvent = (IdleStateEvent) evt ;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (idleStateEvent.state() == IdleState.READER_IDLE)&#123;</div><div class="line">                LOGGER.info(<span class="string">"已经5秒没有收到信息！"</span>);</div><div class="line">                <span class="comment">//向客户端发送消息</span></div><div class="line">                ctx.writeAndFlush(HEART_BEAT).addListener(ChannelFutureListener.CLOSE_ON_FAILURE) ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">super</span>.userEventTriggered(ctx, evt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, CustomProtocol customProtocol)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"收到customProtocol=&#123;&#125;"</span>, customProtocol);</div><div class="line"></div><div class="line">        <span class="comment">//保存客户端与 Channel 之间的关系</span></div><div class="line">        NettySocketHolder.put(customProtocol.getId(),(NioSocketChannel)ctx.channel()) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这里有点需要注意</strong>：</p>
<p>当有多个客户端连上来时，服务端需要区分开，不然响应消息就会发生混乱。</p>
<p>所以每当有个连接上来的时候，我们都将当前的 Channel 与连上的客户端 ID 进行关联（<strong>因此每个连上的客户端 ID 都必须唯一</strong>）。</p>
<p>这里采用了一个 Map 来保存这个关系，并且在断开连接时自动取消这个关联。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettySocketHolder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Long, NioSocketChannel&gt; MAP = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">16</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(Long id, NioSocketChannel socketChannel)</span> </span>&#123;</div><div class="line">        MAP.put(id, socketChannel);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NioSocketChannel <span class="title">get</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> MAP.get(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Long, NioSocketChannel&gt; <span class="title">getMAP</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> MAP;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(NioSocketChannel nioSocketChannel)</span> </span>&#123;</div><div class="line">        MAP.entrySet().stream().filter(entry -&gt; entry.getValue() == nioSocketChannel).forEach(entry -&gt; MAP.remove(entry.getKey()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动引导程序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">Component</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartBeatServer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(HeartBeatServer.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EventLoopGroup boss = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line">    <span class="keyword">private</span> EventLoopGroup work = <span class="keyword">new</span> NioEventLoopGroup();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;netty.server.port&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nettyPort;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 启动 Netty</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> InterruptedException</div><div class="line">     */</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</div><div class="line">                .group(boss, work)</div><div class="line">                .channel(NioServerSocketChannel.class)</div><div class="line">                .localAddress(<span class="keyword">new</span> InetSocketAddress(nettyPort))</div><div class="line">                <span class="comment">//保持长连接</span></div><div class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>)</div><div class="line">                .childHandler(<span class="keyword">new</span> HeartbeatInitializer());</div><div class="line"></div><div class="line">        ChannelFuture future = bootstrap.bind().sync();</div><div class="line">        <span class="keyword">if</span> (future.isSuccess()) &#123;</div><div class="line">            LOGGER.info(<span class="string">"启动 Netty 成功"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 销毁</div><div class="line">     */</div><div class="line">    <span class="meta">@PreDestroy</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        boss.shutdownGracefully().syncUninterruptibly();</div><div class="line">        work.shutdownGracefully().syncUninterruptibly();</div><div class="line">        LOGGER.info(<span class="string">"关闭 Netty 成功"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatInitializer</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">Channel</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        ch.pipeline()</div><div class="line">                <span class="comment">//五秒没有收到消息 将IdleStateHandler 添加到 ChannelPipeline 中</span></div><div class="line">                .addLast(<span class="keyword">new</span> IdleStateHandler(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>))</div><div class="line">                .addLast(<span class="keyword">new</span> HeartbeatDecoder())</div><div class="line">                .addLast(<span class="keyword">new</span> HeartBeatSimpleHandle());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也是同样将IdleStateHandler 添加到 ChannelPipeline 中，也会有一个定时任务，每5秒校验一次是否有收到消息，否则就主动发送一次请求。</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1frqe2hbxjfj31kw06rtej.jpg" alt=""></p>
<p>因为测试是有两个客户端连上所以有两个日志。</p>
<h2 id="自定义协议"><a href="#自定义协议" class="headerlink" title="自定义协议"></a>自定义协议</h2><p>上文其实都看到了：服务端与客户端采用的是自定义的 POJO 进行通讯的。</p>
<p>所以需要在客户端进行编码，服务端进行解码，也都只需要各自实现一个编解码器即可。</p>
<p>CustomProtocol：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomProtocol</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">4671171056588401542L</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id ;</div><div class="line">    <span class="keyword">private</span> String content ;</div><div class="line">    <span class="comment">//省略 getter/setter</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>客户端的编码器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatEncode</span> <span class="keyword">extends</span> <span class="title">MessageToByteEncoder</span>&lt;<span class="title">CustomProtocol</span>&gt; </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(ChannelHandlerContext ctx, CustomProtocol msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        out.writeLong(msg.getId()) ;</div><div class="line">        out.writeBytes(msg.getContent().getBytes()) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说消息的前八个字节为 header，剩余的全是 content。</p>
<p>服务端的解码器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatDecoder</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> id = in.readLong() ;</div><div class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[in.readableBytes()] ;</div><div class="line">        in.readBytes(bytes) ;</div><div class="line">        String content = <span class="keyword">new</span> String(bytes) ;</div><div class="line"></div><div class="line">        CustomProtocol customProtocol = <span class="keyword">new</span> CustomProtocol() ;</div><div class="line">        customProtocol.setId(id);</div><div class="line">        customProtocol.setContent(content) ;</div><div class="line">        out.add(customProtocol) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要按照刚才的规则进行解码即可。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>其实联想到 IdleStateHandler 的功能，自然也能想到它实现的原理：</p>
<blockquote>
<p>应该会存在一个定时任务的线程去处理这些消息。</p>
</blockquote>
<p>来看看它的源码：</p>
<p>首先是构造函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public IdleStateHandler(</div><div class="line">        int readerIdleTimeSeconds,</div><div class="line">        int writerIdleTimeSeconds,</div><div class="line">        int allIdleTimeSeconds) &#123;</div><div class="line"></div><div class="line">    this(readerIdleTimeSeconds, writerIdleTimeSeconds, allIdleTimeSeconds,</div><div class="line">         TimeUnit.SECONDS);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是初始化了几个数据：</p>
<ul>
<li>readerIdleTimeSeconds：一段时间内没有数据读取</li>
<li>writerIdleTimeSeconds：一段时间内没有数据发送</li>
<li>allIdleTimeSeconds：以上两种满足其中一个即可</li>
</ul>
<p>因为 IdleStateHandler 也是一种 ChannelHandler，所以会在 <code>channelActive</code> 中初始化任务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">// This method will be invoked only if this handler was added</span></div><div class="line">    <span class="comment">// before channelActive() event is fired.  If a user adds this handler</span></div><div class="line">    <span class="comment">// after the channelActive() event, initialize() will be called by beforeAdd().</span></div><div class="line">    initialize(ctx);</div><div class="line">    <span class="keyword">super</span>.channelActive(ctx);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</div><div class="line">    <span class="comment">// Avoid the case where destroy() is called before scheduling timeouts.</span></div><div class="line">    <span class="comment">// See: https://github.com/netty/netty/issues/143</span></div><div class="line">    <span class="keyword">switch</span> (state) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    state = <span class="number">1</span>;</div><div class="line">    initOutputChanged(ctx);</div><div class="line"></div><div class="line">    lastReadTime = lastWriteTime = ticksInNanos();</div><div class="line">    <span class="keyword">if</span> (readerIdleTimeNanos &gt; <span class="number">0</span>) &#123;</div><div class="line">        readerIdleTimeout = schedule(ctx, <span class="keyword">new</span> ReaderIdleTimeoutTask(ctx),</div><div class="line">                readerIdleTimeNanos, TimeUnit.NANOSECONDS);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (writerIdleTimeNanos &gt; <span class="number">0</span>) &#123;</div><div class="line">        writerIdleTimeout = schedule(ctx, <span class="keyword">new</span> WriterIdleTimeoutTask(ctx),</div><div class="line">                writerIdleTimeNanos, TimeUnit.NANOSECONDS);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (allIdleTimeNanos &gt; <span class="number">0</span>) &#123;</div><div class="line">        allIdleTimeout = schedule(ctx, <span class="keyword">new</span> AllIdleTimeoutTask(ctx),</div><div class="line">                allIdleTimeNanos, TimeUnit.NANOSECONDS);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是会按照我们给定的时间初始化出定时任务。</p>
<p>接着在任务真正执行时进行判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderIdleTimeoutTask</span> <span class="keyword">extends</span> <span class="title">AbstractIdleTask</span> </span>&#123;</div><div class="line"></div><div class="line">    ReaderIdleTimeoutTask(ChannelHandlerContext ctx) &#123;</div><div class="line">        <span class="keyword">super</span>(ctx);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> nextDelay = readerIdleTimeNanos;</div><div class="line">        <span class="keyword">if</span> (!reading) &#123;</div><div class="line">            nextDelay -= ticksInNanos() - lastReadTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (nextDelay &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// Reader is idle - set a new timeout and notify the callback.</span></div><div class="line">            readerIdleTimeout = schedule(ctx, <span class="keyword">this</span>, readerIdleTimeNanos, TimeUnit.NANOSECONDS);</div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> first = firstReaderIdleEvent;</div><div class="line">            firstReaderIdleEvent = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                IdleStateEvent event = newIdleStateEvent(IdleState.READER_IDLE, first);</div><div class="line">                channelIdle(ctx, event);</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                ctx.fireExceptionCaught(t);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Read occurred before the timeout - set a new timeout with shorter delay.</span></div><div class="line">            readerIdleTimeout = schedule(ctx, <span class="keyword">this</span>, nextDelay, TimeUnit.NANOSECONDS);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果满足条件则会生成一个 IdleStateEvent 事件。</p>
<h1 id="SpringBoot-监控"><a href="#SpringBoot-监控" class="headerlink" title="SpringBoot 监控"></a>SpringBoot 监控</h1><p>由于整合了 SpringBoot 之后不但可以利用 Spring 帮我们管理对象，也可以利用它来做应用监控。</p>
<h2 id="actuator-监控"><a href="#actuator-监控" class="headerlink" title="actuator 监控"></a>actuator 监控</h2><p>当我们为引入了:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>就开启了 SpringBoot 的 actuator 监控功能，他可以暴露出很多监控端点供我们使用。</p>
<p>如一些应用中的一些统计数据：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1frqeyocotnj31kw0b8tiy.jpg" alt=""></p>
<p>存在的 Beans：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1frqez1kr3dj31kw0onawi.jpg" alt=""></p>
<p>更多信息请查看：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html" target="_blank" rel="external">https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html</a></p>
<p>但是如果我想监控现在我的服务端有多少客户端连上来了，分别的 ID 是多少？</p>
<p>其实就是实时查看我内部定义的那个关联关系的 Map。</p>
<p>这就需要暴露自定义端点了。</p>
<h2 id="自定义端点"><a href="#自定义端点" class="headerlink" title="自定义端点"></a>自定义端点</h2><p>暴露的方式也很简单：</p>
<p>继承 AbstractEndpoint 并复写其中的 invoke 函数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEndpoint</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span>&lt;<span class="title">Map</span>&lt;<span class="title">Long</span>,<span class="title">NioSocketChannel</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监控端点的 访问地址</div><div class="line">     * <span class="doctag">@param</span> id</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomEndpoint</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="comment">//false 表示不是敏感端点</span></div><div class="line">        <span class="keyword">super</span>(id, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Long, NioSocketChannel&gt; <span class="title">invoke</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> NettySocketHolder.getMAP();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是返回了 Map 中的数据。</p>
<p>再配置一个该类型的 Bean 即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EndPointConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;monitor.channel.map.key&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String channelMap;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CustomEndpoint <span class="title">buildEndPoint</span><span class="params">()</span></span>&#123;</div><div class="line">        CustomEndpoint customEndpoint = <span class="keyword">new</span> CustomEndpoint(channelMap) ;</div><div class="line">        <span class="keyword">return</span> customEndpoint ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就可以通过配置文件中的 <code>monitor.channel.map.key</code> 来访问了：</p>
<p>一个客户端连接时：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1frqf7ic0wqj31kw07rq7a.jpg" alt=""></p>
<p>两个客户端连接时：<br><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1frqf8omlzkj31kw07xq7y.jpg" alt=""></p>
<h2 id="整合-SBA"><a href="#整合-SBA" class="headerlink" title="整合 SBA"></a>整合 SBA</h2><p>这样其实监控功能已经可以满足了，但能不能展示的更美观、并且多个应用也可以方便查看呢？</p>
<p>有这样的开源工具帮我们做到了：</p>
<p><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="external">https://github.com/codecentric/spring-boot-admin</a></p>
<p>简单来说我们可以利用该工具将 actuator 暴露出来的接口可视化并聚合的展示在页面中：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1frqfbz359wj31kw0p513n.jpg" alt=""></p>
<p>接入也很简单，首先需要引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>并在配置文件中加入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 关闭健康检查权限</div><div class="line">management.security.enabled=false</div><div class="line"># SpringAdmin 地址</div><div class="line">spring.boot.admin.url=http://127.0.0.1:8888</div></pre></td></tr></table></figure>
<p>在启动应用之前先讲 SpringBootAdmin 部署好：</p>
<p>这个应用就是一个纯粹的 SpringBoot ，只需要在主函数上加入 <code>@EnableAdminServer</code> 注解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@EnableAdminServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(AdminApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引入：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-server-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>之后直接启动就行了。</p>
<p>这样我们在 SpringBootAdmin 的页面中就可以查看很多应用信息了。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1frqfjuof2rj31kw10ldqk.jpg" alt=""></p>
<p>更多内容请参考官方指南：</p>
<p><a href="http://codecentric.github.io/spring-boot-admin/1.5.6/" target="_blank" rel="external">http://codecentric.github.io/spring-boot-admin/1.5.6/</a></p>
<h3 id="自定义监控数据"><a href="#自定义监控数据" class="headerlink" title="自定义监控数据"></a>自定义监控数据</h3><p>其实我们完全可以借助 actuator 以及这个可视化页面帮我们监控一些简单的度量信息。</p>
<p>比如我在客户端和服务端中写了两个 Rest 接口用于向对方发送消息。</p>
<p>只是想要记录分别发送了多少次：</p>
<p>客户端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 统计 service</div><div class="line">     */</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> CounterService counterService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HeartbeatClient heartbeatClient ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向服务端发消息</div><div class="line">     * <span class="doctag">@param</span> sendMsgReqVO</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"客户端发送消息"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"sendMsg"</span>)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> BaseResponse&lt;SendMsgResVO&gt; <span class="title">sendMsg</span><span class="params">(@RequestBody SendMsgReqVO sendMsgReqVO)</span></span>&#123;</div><div class="line">        BaseResponse&lt;SendMsgResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line">        heartbeatClient.sendMsg(<span class="keyword">new</span> CustomProtocol(sendMsgReqVO.getId(),sendMsgReqVO.getMsg())) ;</div><div class="line"></div><div class="line">        <span class="comment">// 利用 actuator 来自增</span></div><div class="line">        counterService.increment(Constants.COUNTER_CLIENT_PUSH_COUNT);</div><div class="line"></div><div class="line">        SendMsgResVO sendMsgResVO = <span class="keyword">new</span> SendMsgResVO() ;</div><div class="line">        sendMsgResVO.setMsg(<span class="string">"OK"</span>) ;</div><div class="line">        res.setCode(StatusEnum.SUCCESS.getCode()) ;</div><div class="line">        res.setMessage(StatusEnum.SUCCESS.getMessage()) ;</div><div class="line">        res.setDataBody(sendMsgResVO) ;</div><div class="line">        <span class="keyword">return</span> res ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要我们引入了 actuator 的包，那就可以直接注入 counterService ，利用它来帮我们记录数据。</p>
<p>当我们调用该接口时：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1frqfv3vx0ej31hk0g6dj5.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1frqfvof9lpj31kw07l0z8.jpg" alt=""></p>
<p>在监控页面中可以查询刚才的调用情况：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1frqfwembi6j31kw0o0dot.jpg" alt=""></p>
<p>服务端主动 push 消息也是类似，只是需要在发送时候根据客户端的 ID 查询到具体的 Channel 发送：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1frqfy9dcu5j31hu0f277i.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1frqfz0aticj31kw05jgol.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1frqfztzxd8j31kw0iyn0t.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是一个简单 Netty 心跳示例，并演示了 SpringBoot 的监控，之后会继续更新 Netty 相关内容，欢迎关注及指正。</p>
<p>本文所有代码：</p>
<p><a href="https://github.com/crossoverJie/netty-action" target="_blank" rel="external">https://github.com/crossoverJie/netty-action</a></p>
<h1 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h1><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/25/5b0774828db53.jpeg&quot; alt=&quot;photo-1522204657746-fccce0824cfd.jpeg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Netty 是一个高性能的 NIO 网络框架，本文基于 SpringBoot 以常见的心跳机制来认识 Netty。&lt;/p&gt;
&lt;p&gt;最终能达到的效果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端每隔 N 秒检测是否需要发送心跳。&lt;/li&gt;
&lt;li&gt;服务端也每隔 N 秒检测是否需要发送心跳。&lt;/li&gt;
&lt;li&gt;服务端可以主动 push 消息到客户端。&lt;/li&gt;
&lt;li&gt;基于 SpringBoot 监控，可以查看实时连接以及各种应用信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://crossoverjie.top/uploads/netty-Heartbeat.gif&quot; alt=&quot;show&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Netty" scheme="http://crossoverjie.top/categories/Netty/"/>
    
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
      <category term="TCP" scheme="http://crossoverjie.top/tags/TCP/"/>
    
      <category term="Heartbeat" scheme="http://crossoverjie.top/tags/Heartbeat/"/>
    
  </entry>
  
  <entry>
    <title>1K star+ 的项目是如何炼成的？</title>
    <link href="http://crossoverjie.top/2018/05/15/skill/1Kstar/"/>
    <id>http://crossoverjie.top/2018/05/15/skill/1Kstar/</id>
    <published>2018-05-14T17:00:44.000Z</published>
    <updated>2018-05-14T16:26:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/05/14/5af935ddc27e1.jpg" alt="alarm-clock-art-background-1037993.jpg"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先标题党一下，其实这篇文章主要是记录我的第二个过 <code>1K star</code> 的项目 <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">Java-Interview</a>，顺便分享下其中的过程及经验。</p>
<p><img src="https://i.loli.net/2018/05/15/5af9b89e8bff8.png" alt="4.png"></p>
<h1 id="需求选择"><a href="#需求选择" class="headerlink" title="需求选择"></a>需求选择</h1><h2 id="Java-Interview"><a href="#Java-Interview" class="headerlink" title="Java-Interview"></a><a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">Java-Interview</a></h2><p>之所以要做这个项目主要是当时我正在面阿里的两个部门，非常幸运的是技术面都过了。其中的过程真是让我受益匪浅更是印象深刻，所以就想把期间的问题记录下来，加上自己的理解希望能对其他朋友起到帮助。</p>
<p>正好那段时间也是传说中的<code>金三银四</code>，所以无形中也叫顺势而为吧😏。</p>
<a id="more"></a>
<h2 id="SSM"><a href="#SSM" class="headerlink" title="SSM"></a><a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">SSM</a></h2><p>这个项目的历史就比较悠久了，我看了下第一次提交差不多是两年前。</p>
<p>从这个名字也可以看出当初还是一个刚入行没多久的小菜鸟，因为之前在学 Java 的时候真的走了很多冤枉路，所以从头开始记录到现在整个过程所学到的东西，踩过的坑。</p>
<p>由于是面向小白，入门简单，上手较快也取的了一定的关注。</p>
<p>其实从这两个项目可以看出选择一个<strong>方向是很重要的</strong>。</p>
<p>以及该项目解决了什么问题，长期的规划，受众是哪些都要考虑清楚(怎么有点像做产品😅，其实这就是你自己的产品)。</p>
<p>比如这两个项目的目标：</p>
<ul>
<li>Java-Interview：持续更新面试问题，希望能让面试者知其然也知其所以然。</li>
<li>SSM：博主从小白到现在实际开发所遇到的问题记录，以及实战经验，现在逐渐会分享一些难点以及底层。受众大多是小白。</li>
</ul>
<h1 id="文档很重要"><a href="#文档很重要" class="headerlink" title="文档很重要"></a>文档很重要</h1><p>既然项目做出来是给人用的，那文档就显得至关重要了。</p>
<p>就像日常和前端怼接口时，有一个标准的文档输出比在白板上折腾半天要高的多。</p>
<p><img src="https://i.loli.net/2018/05/14/5af9491b5b119.png" alt="C0DA2F29-C334-46BC-8BED-14CD6B6C5349.png"></p>
<p>其实仔细观察 GitHub 上热门的项目，会发现他们的文档几乎都有一些共同结构：</p>
<ul>
<li>简单描述项目是干什么的。</li>
<li>快速启动。</li>
<li>最近更新。</li>
<li>Q/A 答疑。</li>
<li>项目截图。</li>
</ul>
<p>主要目的就是要简单易读，快速上手。</p>
<p>然后把一些复杂的如系统设计、开发指南等可以放到 wiki 中。</p>
<blockquote>
<p>切记不要什么东西都往 README.MD 中写，保持一个简洁的文档可以加分哦。</p>
</blockquote>
<p>当然也可以在首页加入一些徽章如：</p>
<p><img src="https://i.loli.net/2018/05/15/5af9b66c55453.png" alt="3.png"></p>
<p>也能起到一些积极作用。</p>
<h1 id="积极推荐"><a href="#积极推荐" class="headerlink" title="积极推荐"></a>积极推荐</h1><p>代码质量这个就不多说了，这应该是最基本的要求。</p>
<p>俗话说：酒香不怕巷子深。</p>
<p>但对于做开源项目来说就不太适应了，当你幸辛苦苦做了一个自认为很不错的项目，结果一年过去了都无人问津，这不免会有点打击积极性。</p>
<p>所以适当的自我推荐就很有必要了。</p>
<p><img src="https://i.loli.net/2018/05/14/5af94d4c99929.png" alt="7D819139-647F-43E3-9DB2-AB80A3E6BC7B.png"></p>
<p><img src="https://i.loli.net/2018/05/14/5af94dd69c3ef.jpg" alt="1.jpg"></p>
<p><img src="https://i.loli.net/2018/05/14/5af94ea82ab5d.png" alt="2.png"></p>
<p>上图是我博客、项目的主要流量来源。</p>
<p>下面是我自身体验比较优质的推荐渠道：</p>
<ul>
<li><a href="https://toutiao.io/u/257810/" target="_blank" rel="external">开发者头条</a>：由于截图的时候没有新发文章，之前那篇<a href="https://toutiao.io/posts/zavy6s" target="_blank" rel="external">秒杀架构实践</a>发了之后博客 80% 的流量都是从头条过来的，而且质量很高，不得不点个赞。</li>
<li><a href="http://ifeve.com/author/crossoverjie/" target="_blank" rel="external">并发编程网</a>: 并发编程网是由阿里大牛清英(买了那本《并发编程的艺术》就被圈粉了)创办的，其中的文章质量普遍较高(导致也会有一点写作门槛)。由于网站的流量也比较高，只要你的文章质量不错肯定会得到好处。</li>
<li><a href="https://juejin.im/user/576d4aaf7db2a20054ea4544" target="_blank" rel="external">掘金</a>：掘金这两年也比较火，是专门做开发者内容的，也是网站流量不错。</li>
<li><a href="https://my.oschina.net/crossoverjie/blog" target="_blank" rel="external">开源中国</a>：开源中国的博客也不错，自己也有代码托管，但我还是更喜欢用 GitHub，一般上了编辑推荐都会有不错的访问量。</li>
<li><a href="https://www.v2ex.com/member/crossoverJie" target="_blank" rel="external">V2EX</a>：大名鼎鼎的 V 站，其实受众较少，正因为如此也形成了独有的文化，因此也是我每天比逛(摸鱼)的网站，由于受众大多是开发者所以也能得到很多有用的反馈。</li>
<li>大佬推荐：最快捷的方式其实就是口口相传，其中当然是大佬的效率最高。之前有个<a href="http://www.ityouknow.com/" target="_blank" rel="external">纯洁的微笑</a>、<a href="http://blog.didispace.com/" target="_blank" rel="external">程序猿DD</a> 都投过稿，也能带来不错的流量。</li>
<li><a href="https://www.jianshu.com/u/e2d07947c112" target="_blank" rel="external">简书</a>:本来不想推荐简书的（之前的事件以及现在鸡汤太多），但是流量还可以，现在就纯粹当做博客备份的工具了。</li>
</ul>
<blockquote>
<p>坚持下来之后会发现：只要自己坚持、保证质量最后会形成自己的阅读圈子，到后面甚至会有其他朋友主动来找你分享，这些都是自我提升的过程。</p>
</blockquote>
<h1 id="不忘初心"><a href="#不忘初心" class="headerlink" title="不忘初心"></a>不忘初心</h1><p>当初做的第一个开源项目就是 <a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">SSM</a>，完全受够学习时找资料的痛苦，也得到了很多人的帮助，所以才有了该项目。</p>
<p>平时工作中或多或少都会用到开源项目，其实我们大部分人也写不出 Spring、Guava 这样的项目，只是再这过程中可以参与进去，收获也是非常丰富的。</p>
<p>两年前参与开源到现在有收到面试邀请、物质奖励这些都是正面积极的，可以鼓励我们接着做下去。</p>
<p>但最多的还是在这过程中结识了很多朋友，技术能力提升也很明显，这些都是保持自我可持续发展的必要条件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/14/5af935ddc27e1.jpg&quot; alt=&quot;alarm-clock-art-background-1037993.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;首先标题党一下，其实这篇文章主要是记录我的第二个过 &lt;code&gt;1K star&lt;/code&gt; 的项目 &lt;a href=&quot;https://github.com/crossoverJie/Java-Interview&quot;&gt;Java-Interview&lt;/a&gt;，顺便分享下其中的过程及经验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/15/5af9b89e8bff8.png&quot; alt=&quot;4.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求选择&quot;&gt;&lt;a href=&quot;#需求选择&quot; class=&quot;headerlink&quot; title=&quot;需求选择&quot;&gt;&lt;/a&gt;需求选择&lt;/h1&gt;&lt;h2 id=&quot;Java-Interview&quot;&gt;&lt;a href=&quot;#Java-Interview&quot; class=&quot;headerlink&quot; title=&quot;Java-Interview&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/crossoverJie/Java-Interview&quot;&gt;Java-Interview&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;之所以要做这个项目主要是当时我正在面阿里的两个部门，非常幸运的是技术面都过了。其中的过程真是让我受益匪浅更是印象深刻，所以就想把期间的问题记录下来，加上自己的理解希望能对其他朋友起到帮助。&lt;/p&gt;
&lt;p&gt;正好那段时间也是传说中的&lt;code&gt;金三银四&lt;/code&gt;，所以无形中也叫顺势而为吧😏。&lt;/p&gt;
    
    </summary>
    
      <category term="小技巧" scheme="http://crossoverjie.top/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="GitHub" scheme="http://crossoverjie.top/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>SSM(十八) 秒杀架构实践</title>
    <link href="http://crossoverjie.top/2018/05/07/ssm/SSM18-seconds-kill/"/>
    <id>http://crossoverjie.top/2018/05/07/ssm/SSM18-seconds-kill/</id>
    <published>2018-05-06T17:12:54.000Z</published>
    <updated>2018-05-07T18:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr1z9k79lrj31kw11zwt8.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/Spike.md" target="_blank" rel="external">Java-Interview</a> 中提到过秒杀架构的设计，这次基于其中的理论简单实现了一下。</p>
<blockquote>
<p>本次采用循序渐进的方式逐步提高性能达到并发秒杀的效果，文章较长请准备好瓜子板凳(liushuizhang😂)。</p>
</blockquote>
<p>本文所有涉及的代码：</p>
<ul>
<li><a href="https://github.com/crossoverJie/SSM" target="_blank" rel="external">https://github.com/crossoverJie/SSM</a></li>
<li><a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a></li>
</ul>
<p>最终架构图：</p>
<p><img src="https://i.loli.net/2018/05/08/5af079ea8618b.png" alt="系统架构设计.png"></p>
<a id="more"></a>
<p>先简单根据这个图谈下请求的流转，因为后面不管怎么改进这个都是没有变的。</p>
<ul>
<li>前端请求进入 <code>web</code> 层，对应的代码就是 <code>controller</code>。</li>
<li>之后将真正的库存校验、下单等请求发往 <code>Service</code> 层（其中 RPC 调用依然采用的 <code>dubbo</code>，只是更新为最新版本，本次不会过多讨论 dubbo 相关的细节，有兴趣的可以查看 <a href="https://crossoverjie.top/%2F2017%2F04%2F07%2FSSM11%2F">基于dubbo的分布式架构</a>）。</li>
<li><code>Service</code> 层再对数据进行落地，下单完成。</li>
</ul>
<h2 id="无限制"><a href="#无限制" class="headerlink" title="无限制"></a>无限制</h2><p>其实抛开秒杀这个场景来说正常的一个下单流程可以简单分为以下几步：</p>
<ul>
<li>校验库存</li>
<li>扣库存</li>
<li>创建订单</li>
<li>支付</li>
</ul>
<p>基于上文的架构所以我们有了以下实现：</p>
<p>先看看实际项目的结构：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr38jkau5kj30jk07a754.jpg" alt=""></p>
<p>还是和以前一样：</p>
<ul>
<li>提供出一个 <code>API</code> 用于 <code>Service</code> 层实现，以及 <code>web</code> 层消费。</li>
<li>web 层简单来说就是一个 <code>SpringMVC</code>。</li>
<li><code>Service</code> 层则是真正的数据落地。</li>
<li><code>SSM-SECONDS-KILL-ORDER-CONSUMER</code> 则是后文会提到的 <code>Kafka</code> 消费。</li>
</ul>
<p>数据库也是只有简单的两张表模拟下单：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`stock`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'名称'</span>,</div><div class="line">  <span class="string">`count`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'库存'</span>,</div><div class="line">  <span class="string">`sale`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'已售'</span>,</div><div class="line">  <span class="string">`version`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'乐观锁，版本号'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">2</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`stock_order`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">  <span class="string">`sid`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'库存ID'</span>,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'商品名称'</span>,</div><div class="line">  <span class="string">`create_time`</span> <span class="keyword">timestamp</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">55</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<p>web 层 <code>controller</code> 实现:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> StockService stockService;</div><div class="line"></div><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> OrderService orderService;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/createWrongOrder/&#123;sid&#125;"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createWrongOrder</span><span class="params">(@PathVariable <span class="keyword">int</span> sid)</span> </span>&#123;</div><div class="line">    logger.info(<span class="string">"sid=[&#123;&#125;]"</span>, sid);</div><div class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        id = orderService.createWrongOrder(sid);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        logger.error(<span class="string">"Exception"</span>,e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> String.valueOf(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 web 作为一个消费者调用看 <code>OrderService</code> 提供出来的 dubbo 服务。</p>
<p>Service 层，<code>OrderService</code> 实现：</p>
<p>首先是对 API 的实现(会在 API 提供出接口)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"DBOrderService"</span>)</div><div class="line">    <span class="keyword">private</span> com.crossoverJie.seconds.kill.service.OrderService orderService ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createWrongOrder</span><span class="params">(<span class="keyword">int</span> sid)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> orderService.createWrongOrder(sid);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是简单调用了 <code>DBOrderService</code> 中的实现，DBOrderService 才是真正的数据落地，也就是写数据库了。</p>
<p>DBOrderService 实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">Transactional(rollbackFor = Exception.class)</div><div class="line"><span class="meta">@Service</span>(value = <span class="string">"DBOrderService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    <span class="meta">@Resource</span>(name = <span class="string">"DBStockService"</span>)</div><div class="line">    <span class="keyword">private</span> com.crossoverJie.seconds.kill.service.StockService stockService;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> StockOrderMapper orderMapper;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createWrongOrder</span><span class="params">(<span class="keyword">int</span> sid)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//校验库存</span></div><div class="line">        Stock stock = checkStock(sid);</div><div class="line"></div><div class="line">        <span class="comment">//扣库存</span></div><div class="line">        saleStock(stock);</div><div class="line"></div><div class="line">        <span class="comment">//创建订单</span></div><div class="line">        <span class="keyword">int</span> id = createOrder(stock);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> Stock <span class="title">checkStock</span><span class="params">(<span class="keyword">int</span> sid)</span> </span>&#123;</div><div class="line">        Stock stock = stockService.getStockById(sid);</div><div class="line">        <span class="keyword">if</span> (stock.getSale().equals(stock.getCount())) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"库存不足"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stock;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">saleStock</span><span class="params">(Stock stock)</span> </span>&#123;</div><div class="line">        stock.setSale(stock.getSale() + <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> stockService.updateStockById(stock);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createOrder</span><span class="params">(Stock stock)</span> </span>&#123;</div><div class="line">        StockOrder order = <span class="keyword">new</span> StockOrder();</div><div class="line">        order.setSid(stock.getId());</div><div class="line">        order.setName(stock.getName());</div><div class="line">        <span class="keyword">int</span> id = orderMapper.insertSelective(order);</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;        </div><div class="line">        </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> 预先初始化了 10 条库存。</p>
</blockquote>
<p>手动调用下 <code>createWrongOrder/1</code> 接口发现：</p>
<p>库存表：<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fr38x4wqhcj30g404ajrg.jpg" alt=""></p>
<p>订单表：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fr38xpcdn7j30f0040glq.jpg" alt=""></p>
<p>一切看起来都没有问题，数据也正常。</p>
<p>但是当用 <code>JMeter</code> 并发测试时：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr391hontsj31ge0b8dgt.jpg" alt=""></p>
<p>测试配置是：300个线程并发，测试两轮来看看数据库中的结果：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr393xxc0rj31ge0463z6.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr3939yo1bj30c4062t8s.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr393pxvf3j30j60d60v4.jpg" alt=""></p>
<p>请求都响应成功，库存确实也扣完了，但是订单却生成了 <strong>124</strong> 条记录。</p>
<p>这显然是典型的超卖现象。</p>
<blockquote>
<p>其实现在再去手动调用接口会返回库存不足，但为时晚矣。</p>
</blockquote>
<h2 id="乐观锁更新"><a href="#乐观锁更新" class="headerlink" title="乐观锁更新"></a>乐观锁更新</h2><p>怎么来避免上述的现象呢？</p>
<p>最简单的做法自然是乐观锁了，这里不过多讨论这个，不熟悉的朋友可以看下<a href="http://crossoverjie.top/%2F2017%2F07%2F09%2FSSM15%2F">这篇</a>。</p>
<p>来看看具体实现：</p>
<blockquote>
<p>其实其他的都没怎么改，主要是 Service 层。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createOptimisticOrder</span><span class="params">(<span class="keyword">int</span> sid)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//校验库存</span></div><div class="line">    Stock stock = checkStock(sid);</div><div class="line"></div><div class="line">    <span class="comment">//乐观锁更新库存</span></div><div class="line">    saleStockOptimistic(stock);</div><div class="line"></div><div class="line">    <span class="comment">//创建订单</span></div><div class="line">    <span class="keyword">int</span> id = createOrder(stock);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> id;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saleStockOptimistic</span><span class="params">(Stock stock)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = stockService.updateStockByOptimistic(stock);</div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"并发更新库存失败"</span>) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的 XML：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateByOptimistic"</span> <span class="attr">parameterType</span>=<span class="string">"com.crossoverJie.seconds.kill.pojo.Stock"</span>&gt;</span></div><div class="line">    update stock</div><div class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></div><div class="line">        sale = sale + 1,</div><div class="line">        version = version + 1,</div><div class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></div><div class="line"></div><div class="line">    WHERE id = #&#123;id,jdbcType=INTEGER&#125;</div><div class="line">    AND version = #&#123;version,jdbcType=INTEGER&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同样的测试条件，我们再进行上面的测试 <code>/createOptimisticOrder/1</code>：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr39fxn691j31g603adgg.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr39dlobs1j30ca042wej.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr39dwfmrzj30f60gqgn7.jpg" alt=""></p>
<p>这次发现无论是库存订单都是 OK 的。</p>
<p>查看日志发现：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr39hxcbsgj31kw0jhu0y.jpg" alt=""></p>
<p>很多并发请求会响应错误，这就达到了效果。</p>
<h3 id="提高吞吐量"><a href="#提高吞吐量" class="headerlink" title="提高吞吐量"></a>提高吞吐量</h3><p>为了进一步提高秒杀时的吞吐量以及响应效率，这里的 web 和 Service 都进行了横向扩展。</p>
<ul>
<li>web 利用 Nginx 进行负载。</li>
<li>Service 也是多台应用。</li>
</ul>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fr39lm8iyjj31kw0ad784.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr39lvxnunj31kw0adaeh.jpg" alt=""></p>
<p>再用 JMeter 测试时可以直观的看到效果。</p>
<blockquote>
<p>由于我是在阿里云的一台小水管服务器进行测试的，加上配置不高、应用都在同一台，所以并没有完全体现出性能上的优势（ <code>Nginx</code> 做负载转发时候也会增加额外的网络消耗）。</p>
</blockquote>
<h3 id="shell-脚本实现简单的-CI"><a href="#shell-脚本实现简单的-CI" class="headerlink" title="shell 脚本实现简单的 CI"></a>shell 脚本实现简单的 CI</h3><p>由于应用多台部署之后，手动发版测试的痛苦相信经历过的都有体会。</p>
<p>这次并没有精力去搭建完整的 CI CD，只是写了一个简单的脚本实现了自动化部署，希望对这方面没有经验的同学带来一点启发：</p>
<h4 id="构建-web"><a href="#构建-web" class="headerlink" title="构建 web"></a>构建 web</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"></div><div class="line"># 构建 web 消费者</div><div class="line"></div><div class="line">#read appname</div><div class="line"></div><div class="line">appname=&quot;consumer&quot;</div><div class="line">echo &quot;input=&quot;$appname</div><div class="line"></div><div class="line">PID=$(ps -ef | grep $appname | grep -v grep | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line"></div><div class="line"># 遍历杀掉 pid</div><div class="line">for var in $&#123;PID[@]&#125;;</div><div class="line">do</div><div class="line">    echo &quot;loop pid= $var&quot;</div><div class="line">    kill -9 $var</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;kill $appname success&quot;</div><div class="line"></div><div class="line">cd ..</div><div class="line"></div><div class="line">git pull</div><div class="line"></div><div class="line">cd SSM-SECONDS-KILL</div><div class="line"></div><div class="line">mvn -Dmaven.test.skip=true clean package</div><div class="line"></div><div class="line">echo &quot;build war success&quot;</div><div class="line"></div><div class="line">cp /home/crossoverJie/SSM/SSM-SECONDS-KILL/SSM-SECONDS-KILL-WEB/target/SSM-SECONDS-KILL-WEB-2.2.0-SNAPSHOT.war /home/crossoverJie/tomcat/tomcat-dubbo-consumer-8083/webapps</div><div class="line">echo &quot;cp tomcat-dubbo-consumer-8083/webapps ok!&quot;</div><div class="line"></div><div class="line">cp /home/crossoverJie/SSM/SSM-SECONDS-KILL/SSM-SECONDS-KILL-WEB/target/SSM-SECONDS-KILL-WEB-2.2.0-SNAPSHOT.war /home/crossoverJie/tomcat/tomcat-dubbo-consumer-7083-slave/webapps</div><div class="line">echo &quot;cp tomcat-dubbo-consumer-7083-slave/webapps ok!&quot;</div><div class="line"></div><div class="line">sh /home/crossoverJie/tomcat/tomcat-dubbo-consumer-8083/bin/startup.sh</div><div class="line">echo &quot;tomcat-dubbo-consumer-8083/bin/startup.sh success&quot;</div><div class="line"></div><div class="line">sh /home/crossoverJie/tomcat/tomcat-dubbo-consumer-7083-slave/bin/startup.sh</div><div class="line">echo &quot;tomcat-dubbo-consumer-7083-slave/bin/startup.sh success&quot;</div><div class="line"></div><div class="line">echo &quot;start $appname success&quot;</div></pre></td></tr></table></figure>
<h4 id="构建-Service"><a href="#构建-Service" class="headerlink" title="构建 Service"></a>构建 Service</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"># 构建服务提供者</div><div class="line"></div><div class="line">#read appname</div><div class="line"></div><div class="line">appname=&quot;provider&quot;</div><div class="line"></div><div class="line">echo &quot;input=&quot;$appname</div><div class="line"></div><div class="line"></div><div class="line">PID=$(ps -ef | grep $appname | grep -v grep | awk &apos;&#123;print $2&#125;&apos;)</div><div class="line"></div><div class="line">#if [ $? -eq 0 ]; then</div><div class="line">#    echo &quot;process id:$PID&quot;</div><div class="line">#else</div><div class="line">#    echo &quot;process $appname not exit&quot;</div><div class="line">#    exit</div><div class="line">#fi</div><div class="line"></div><div class="line"># 遍历杀掉 pid</div><div class="line">for var in $&#123;PID[@]&#125;;</div><div class="line">do</div><div class="line">    echo &quot;loop pid= $var&quot;</div><div class="line">    kill -9 $var</div><div class="line">done</div><div class="line"></div><div class="line">echo &quot;kill $appname success&quot;</div><div class="line"></div><div class="line"></div><div class="line">cd ..</div><div class="line"></div><div class="line">git pull</div><div class="line"></div><div class="line">cd SSM-SECONDS-KILL</div><div class="line"></div><div class="line">mvn -Dmaven.test.skip=true clean package</div><div class="line"></div><div class="line">echo &quot;build war success&quot;</div><div class="line"></div><div class="line">cp /home/crossoverJie/SSM/SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/target/SSM-SECONDS-KILL-SERVICE-2.2.0-SNAPSHOT.war /home/crossoverJie/tomcat/tomcat-dubbo-provider-8080/webapps</div><div class="line"></div><div class="line">echo &quot;cp tomcat-dubbo-provider-8080/webapps ok!&quot;</div><div class="line"></div><div class="line">cp /home/crossoverJie/SSM/SSM-SECONDS-KILL/SSM-SECONDS-KILL-SERVICE/target/SSM-SECONDS-KILL-SERVICE-2.2.0-SNAPSHOT.war /home/crossoverJie/tomcat/tomcat-dubbo-provider-7080-slave/webapps</div><div class="line"></div><div class="line">echo &quot;cp tomcat-dubbo-provider-7080-slave/webapps ok!&quot;</div><div class="line"></div><div class="line">sh /home/crossoverJie/tomcat/tomcat-dubbo-provider-8080/bin/startup.sh</div><div class="line">echo &quot;tomcat-dubbo-provider-8080/bin/startup.sh success&quot;</div><div class="line"></div><div class="line">sh /home/crossoverJie/tomcat/tomcat-dubbo-provider-7080-slave/bin/startup.sh</div><div class="line">echo &quot;tomcat-dubbo-provider-8080/bin/startup.sh success&quot;</div><div class="line"></div><div class="line">echo &quot;start $appname success&quot;</div></pre></td></tr></table></figure>
<p>之后每当我有更新，只需要执行这两个脚本就可以帮我自动构建。</p>
<p>都是最基础的 Linux 命令，相信大家都看得明白。</p>
<h2 id="乐观锁更新-分布式限流"><a href="#乐观锁更新-分布式限流" class="headerlink" title="乐观锁更新 + 分布式限流"></a>乐观锁更新 + 分布式限流</h2><p>上文的结果看似没有问题，其实还差得远呢。</p>
<p>这里只是模拟了 300 个并发没有问题，但是当请求达到了 3000 ，3W，300W 呢？</p>
<p>虽说可以横向扩展可以支撑更多的请求。</p>
<p>但是能不能利用最少的资源解决问题呢？</p>
<p>其实仔细分析下会发现：</p>
<blockquote>
<p>假设我的商品一共只有 10 个库存，那么无论你多少人来买其实最终也最多只有 10 人可以下单成功。</p>
</blockquote>
<p>所以其中会有 <code>99%</code> 的请求都是无效的。</p>
<p>大家都知道：大多数应用数据库都是压倒骆驼的最后一根稻草。</p>
<p>通过 <code>Druid</code> 的监控来看看之前请求数据库的情况：</p>
<p>因为 Service 是两个应用。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fr3a1zpp5lj31kw0h277s.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fr3a2c0vvdj31kw0g4n0m.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr3a3xwslqj319g10cthl.jpg" alt=""></p>
<p>数据库也有 20 多个连接。</p>
<p>怎么样来优化呢？<br>其实很容易想到的就是<a href="http://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/">分布式限流</a>。</p>
<p>我们将并发控制在一个可控的范围之内，然后快速失败这样就能最大程度的保护系统。</p>
<h3 id="distributed-redis-tool-⬆️v1-0-3"><a href="#distributed-redis-tool-⬆️v1-0-3" class="headerlink" title="distributed-redis-tool ⬆️v1.0.3"></a>distributed-redis-tool ⬆️v1.0.3</h3><p>为此还对 <a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a> 进行了小小的升级。</p>
<p>因为加上该组件之后所有的请求都会经过 Redis，所以对 Redis 资源的使用也是要非常小心。</p>
<h4 id="API-更新"><a href="#API-更新" class="headerlink" title="API 更新"></a>API 更新</h4><p>修改之后的 API 如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimitConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(RedisLimitConfig.class);</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.limit&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisConnectionFactory jedisConnectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLimit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisLimit redisLimit = <span class="keyword">new</span> RedisLimit.Builder(jedisConnectionFactory, RedisToolsConstant.SINGLE)</div><div class="line">                .limit(limit)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> redisLimit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里构建器改用了 <code>JedisConnectionFactory</code>，所以得配合 Spring 来一起使用。</p>
<p>并在初始化时显示传入 Redis 是以集群方式部署还是单机（强烈建议集群，限流之后对 Redis 还是有一定的压力）。</p>
<h5 id="限流实现"><a href="#限流实现" class="headerlink" title="限流实现"></a>限流实现</h5><p>既然 API 更新了，实现自然也要修改：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * limit traffic</div><div class="line"> * <span class="doctag">@return</span> if true</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//get connection</span></div><div class="line">    Object connection = getConnection();</div><div class="line"></div><div class="line">    Object result = limitRequest(connection);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (FAIL_CODE != (Long) result) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">limitRequest</span><span class="params">(Object connection)</span> </span>&#123;</div><div class="line">    Object result = <span class="keyword">null</span>;</div><div class="line">    String key = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);</div><div class="line">    <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> Jedis)&#123;</div><div class="line">        result = ((Jedis)connection).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">        ((Jedis) connection).close();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        result = ((JedisCluster) connection).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ((JedisCluster) connection).close();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            logger.error(<span class="string">"IOException"</span>,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</div><div class="line">    Object connection ;</div><div class="line">    <span class="keyword">if</span> (type == RedisToolsConstant.SINGLE)&#123;</div><div class="line">        RedisConnection redisConnection = jedisConnectionFactory.getConnection();</div><div class="line">        connection = redisConnection.getNativeConnection();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        RedisClusterConnection clusterConnection = jedisConnectionFactory.getClusterConnection();</div><div class="line">        connection = clusterConnection.getNativeConnection() ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> connection;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果是原生的 Spring 应用得采用 <code>@SpringControllerLimit(errorCode = 200)</code> 注解。</p>
<p>实际使用如下：</p>
<p>web 端：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 乐观锁更新库存 限流</div><div class="line"> * <span class="doctag">@param</span> sid</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="meta">@SpringControllerLimit</span>(errorCode = <span class="number">200</span>)</div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/createOptimisticLimitOrder/&#123;sid&#125;"</span>)</div><div class="line"><span class="meta">@ResponseBody</span></div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createOptimisticLimitOrder</span><span class="params">(@PathVariable <span class="keyword">int</span> sid)</span> </span>&#123;</div><div class="line">    logger.info(<span class="string">"sid=[&#123;&#125;]"</span>, sid);</div><div class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        id = orderService.createOptimisticOrder(sid);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        logger.error(<span class="string">"Exception"</span>,e);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> String.valueOf(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Service 端就没什么更新了，依然是采用的乐观锁更新数据库。</p>
<p>再压测看下效果 <code>/createOptimisticLimitOrderByRedis/1</code>：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fr3amu17zuj30e603ewej.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr3an1x3pqj30oy0fwq4p.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr3aml0c8rj31ek0ssn3g.jpg" alt=""></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fr3ank9otcj31kw0d4die.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fr3anxbb0hj31kw0cjtbb.jpg" alt=""></p>
<p>首先是看结果没有问题，再看数据库连接以及并发请求数都有<strong>明显的下降</strong>。</p>
<h2 id="乐观锁更新-分布式限流-Redis-缓存"><a href="#乐观锁更新-分布式限流-Redis-缓存" class="headerlink" title="乐观锁更新 + 分布式限流 + Redis 缓存"></a>乐观锁更新 + 分布式限流 + Redis 缓存</h2><p>其实仔细观察 Druid 监控数据发现这个 SQL 被多次查询：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fr3aq7shudj31kw0bomzp.jpg" alt=""></p>
<p>其实这是实时查询库存的 SQL，主要是为了在每次下单之前判断是否还有库存。</p>
<p><strong>这也是个优化点</strong>。</p>
<p>这种数据我们完全可以放在内存中，效率比在数据库要高很多。</p>
<p>由于我们的应用是分布式的，所以堆内缓存显然不合适，Redis 就非常适合。</p>
<p>这次主要改造的是 Service 层：</p>
<ul>
<li>每次查询库存时走 Redis。</li>
<li>扣库存时更新 Redis。</li>
<li>需要提前将库存信息写入 Redis（手动或者程序自动都可以）。</li>
</ul>
<p>主要代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createOptimisticOrderUseRedis</span><span class="params">(<span class="keyword">int</span> sid)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="comment">//检验库存，从 Redis 获取</span></div><div class="line">    Stock stock = checkStockByRedis(sid);</div><div class="line"></div><div class="line">    <span class="comment">//乐观锁更新库存 以及更新 Redis</span></div><div class="line">    saleStockOptimisticByRedis(stock);</div><div class="line"></div><div class="line">    <span class="comment">//创建订单</span></div><div class="line">    <span class="keyword">int</span> id = createOrder(stock);</div><div class="line">    <span class="keyword">return</span> id ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> Stock <span class="title">checkStockByRedis</span><span class="params">(<span class="keyword">int</span> sid)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Integer count = Integer.parseInt(redisTemplate.opsForValue().get(RedisKeysConstant.STOCK_COUNT + sid));</div><div class="line">    Integer sale = Integer.parseInt(redisTemplate.opsForValue().get(RedisKeysConstant.STOCK_SALE + sid));</div><div class="line">    <span class="keyword">if</span> (count.equals(sale))&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"库存不足 Redis currentCount="</span> + sale);</div><div class="line">    &#125;</div><div class="line">    Integer version = Integer.parseInt(redisTemplate.opsForValue().get(RedisKeysConstant.STOCK_VERSION + sid));</div><div class="line">    Stock stock = <span class="keyword">new</span> Stock() ;</div><div class="line">    stock.setId(sid);</div><div class="line">    stock.setCount(count);</div><div class="line">    stock.setSale(sale);</div><div class="line">    stock.setVersion(version);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> stock;</div><div class="line">&#125;    </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 乐观锁更新数据库 还要更新 Redis</div><div class="line"> * <span class="doctag">@param</span> stock</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">saleStockOptimisticByRedis</span><span class="params">(Stock stock)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> count = stockService.updateStockByOptimistic(stock);</div><div class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"并发更新库存失败"</span>) ;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//自增</span></div><div class="line">    redisTemplate.opsForValue().increment(RedisKeysConstant.STOCK_SALE + stock.getId(),<span class="number">1</span>) ;</div><div class="line">    redisTemplate.opsForValue().increment(RedisKeysConstant.STOCK_VERSION + stock.getId(),<span class="number">1</span>) ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>压测看看实际效果 <code>/createOptimisticLimitOrderByRedis/1</code>：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fr3b419f2aj30by04g0ss.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fr3b48vebkj30gk0cy0u3.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fr3b55kyv6j31kw0dijtx.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fr3b5n1n21j31kw0c2acg.jpg" alt=""></p>
<p>最后发现数据没问题，数据库的请求与并发也都下来了。</p>
<h2 id="乐观锁更新-分布式限流-Redis-缓存-Kafka-异步"><a href="#乐观锁更新-分布式限流-Redis-缓存-Kafka-异步" class="headerlink" title="乐观锁更新 + 分布式限流 + Redis 缓存 + Kafka 异步"></a>乐观锁更新 + 分布式限流 + Redis 缓存 + Kafka 异步</h2><p>最后的优化还是想如何来再次提高吞吐量以及性能的。</p>
<p>我们上文所有例子其实都是同步请求，完全可以利用同步转异步来提高性能啊。</p>
<p>这里我们将写订单以及更新库存的操作进行异步化，利用 <code>Kafka</code> 来进行解耦和队列的作用。</p>
<p>每当一个请求通过了限流到达了 Service 层通过了库存校验之后就将订单信息发给 Kafka ，这样一个请求就可以直接返回了。</p>
<p>消费程序再对数据进行入库落地。</p>
<p>因为异步了，所以最终需要采取回调或者是其他提醒的方式提醒用户购买完成。</p>
<p>这里代码较多就不贴了，消费程序其实就是把之前的 Service 层的逻辑重写了一遍，不过采用的是 SpringBoot。</p>
<p>感兴趣的朋友可以看下。</p>
<p><a href="https://github.com/crossoverJie/SSM/tree/master/SSM-SECONDS-KILL/SSM-SECONDS-KILL-ORDER-CONSUMER" target="_blank" rel="external">https://github.com/crossoverJie/SSM/tree/master/SSM-SECONDS-KILL/SSM-SECONDS-KILL-ORDER-CONSUMER</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实经过上面的一顿优化总结起来无非就是以下几点：</p>
<ul>
<li>尽量将请求拦截在上游。</li>
<li>还可以根据 UID 进行限流。</li>
<li>最大程度的减少请求落到 DB。</li>
<li>多利用缓存。</li>
<li>同步操作异步化。</li>
<li>fail fast，尽早失败，保护应用。</li>
</ul>
<p>码字不易，这应该是我写过字数最多的了，想想当年高中 800 字的作文都憋不出来😂，可想而知是有多难得了。</p>
<p><strong>以上内容欢迎讨论</strong>。</p>
<h3 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h3><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fr1z9k79lrj31kw11zwt8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在 &lt;a href=&quot;https://github.com/crossoverJie/Java-Interview/blob/master/MD/Spike.md&quot;&gt;Java-Interview&lt;/a&gt; 中提到过秒杀架构的设计，这次基于其中的理论简单实现了一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本次采用循序渐进的方式逐步提高性能达到并发秒杀的效果，文章较长请准备好瓜子板凳(liushuizhang😂)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文所有涉及的代码：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crossoverJie/SSM&quot;&gt;https://github.com/crossoverJie/SSM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/crossoverJie/distributed-redis-tool&quot;&gt;https://github.com/crossoverJie/distributed-redis-tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最终架构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/05/08/5af079ea8618b.png&quot; alt=&quot;系统架构设计.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="SSM" scheme="http://crossoverjie.top/categories/SSM/"/>
    
      <category term="Distributed Tools" scheme="http://crossoverjie.top/categories/SSM/Distributed-Tools/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="Kafka" scheme="http://crossoverjie.top/tags/Kafka/"/>
    
      <category term="Redis" scheme="http://crossoverjie.top/tags/Redis/"/>
    
      <category term="SpringBoot" scheme="http://crossoverjie.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>sbc(七)分布式限流</title>
    <link href="http://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/"/>
    <id>http://crossoverjie.top/2018/04/28/sbc/sbc7-Distributed-Limit/</id>
    <published>2018-04-27T17:03:12.000Z</published>
    <updated>2018-06-07T10:09:59.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fqrle104hwj31i6104aig.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文接着上文<a href="http://crossoverjie.top/2017/08/11/sbc4/">应用限流</a>进行讨论。</p>
<p>之前谈到的限流方案只能针对于单个 JVM 有效，也就是单机应用。而对于现在普遍的分布式应用也得有一个分布式限流的方案。</p>
<p>基于此尝试写了这个组件：</p>
<p><a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a></p>
<h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><p>以下采用的是</p>
<p><a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></p>
<p>来做演示。</p>
<p>在 Order 应用提供的接口中采取了限流。首先是配置了限流工具的 Bean:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimitConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.limit&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JedisConnectionFactory jedisConnectionFactory;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLimit <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisClusterConnection clusterConnection = jedisConnectionFactory.getClusterConnection();</div><div class="line">        JedisCluster jedisCluster = (JedisCluster) clusterConnection.getNativeConnection();</div><div class="line">        RedisLimit redisLimit = <span class="keyword">new</span> RedisLimit.Builder&lt;&gt;(jedisCluster)</div><div class="line">                .limit(limit)</div><div class="line">                .build();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> redisLimit;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着在 Controller 使用组件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisLimit redisLimit ;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@CheckReqNo</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNo</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">    BaseResponse&lt;OrderNoResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line"></div><div class="line">    <span class="comment">//限流</span></div><div class="line">    <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line">    <span class="keyword">if</span> (!limit)&#123;</div><div class="line">        res.setCode(StatusEnum.REQUEST_LIMIT.getCode());</div><div class="line">        res.setMessage(StatusEnum.REQUEST_LIMIT.getMessage());</div><div class="line">        <span class="keyword">return</span> res ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    res.setReqNo(orderNoReq.getReqNo());</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == orderNoReq.getAppId())&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SBCException(StatusEnum.FAIL);</div><div class="line">    &#125;</div><div class="line">    OrderNoResVO orderNoRes = <span class="keyword">new</span> OrderNoResVO() ;</div><div class="line">    orderNoRes.setOrderId(DateUtil.getLongTime());</div><div class="line">    res.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    res.setMessage(StatusEnum.SUCCESS.getMessage());</div><div class="line">    res.setDataBody(orderNoRes);</div><div class="line">    <span class="keyword">return</span> res ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了方便使用，也提供了注解:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@ControllerLimit</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;OrderNoResVO&gt; <span class="title">getOrderNoLimit</span><span class="params">(@RequestBody OrderNoReqVO orderNoReq)</span> </span>&#123;</div><div class="line">    BaseResponse&lt;OrderNoResVO&gt; res = <span class="keyword">new</span> BaseResponse();</div><div class="line">    <span class="comment">// 业务逻辑</span></div><div class="line">    <span class="keyword">return</span> res ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该注解拦截了 http 请求，会再请求达到阈值时直接返回。</p>
<p>普通方法也可使用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CommonLimit</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>会在调用达到阈值时抛出异常。</p>
<p>为了模拟并发，在 <a href="https://github.com/crossoverJie/springboot-cloud/blob/master/sbc-user/user/src/main/java/com/crossoverJie/sbcuser/controller/UserController.java#L72-L91" target="_blank" rel="external">User</a> 应用中开启了 10 个线程调用 Order(<strong>限流次数为5</strong>) 接口(也可使用专业的并发测试工具 JMeter 等)。</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BaseResponse&lt;UserResVO&gt; <span class="title">getUserByFeign</span><span class="params">(@RequestBody UserReqVO userReq)</span> </span>&#123;</div><div class="line">    <span class="comment">//调用远程服务</span></div><div class="line">    OrderNoReqVO vo = <span class="keyword">new</span> OrderNoReqVO();</div><div class="line">    vo.setAppId(<span class="number">1L</span>);</div><div class="line">    vo.setReqNo(userReq.getReqNo());</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">        executorService.execute(<span class="keyword">new</span> Worker(vo, orderServiceClient));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    UserRes userRes = <span class="keyword">new</span> UserRes();</div><div class="line">    userRes.setUserId(<span class="number">123</span>);</div><div class="line">    userRes.setUserName(<span class="string">"张三"</span>);</div><div class="line"></div><div class="line">    userRes.setReqNo(userReq.getReqNo());</div><div class="line">    userRes.setCode(StatusEnum.SUCCESS.getCode());</div><div class="line">    userRes.setMessage(<span class="string">"成功"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> userRes;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OrderNoReqVO vo;</div><div class="line">    <span class="keyword">private</span> OrderServiceClient orderServiceClient;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Worker</span><span class="params">(OrderNoReqVO vo, OrderServiceClient orderServiceClient)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.vo = vo;</div><div class="line">        <span class="keyword">this</span>.orderServiceClient = orderServiceClient;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        BaseResponse&lt;OrderNoResVO&gt; orderNo = orderServiceClient.getOrderNoCommonLimit(vo);</div><div class="line">        logger.info(<span class="string">"远程返回:"</span> + JSON.toJSONString(orderNo));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>为了验证分布式效果启动了两个 Order 应用。</p>
</blockquote>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fqrnxt2l8lj313x09rwfm.jpg" alt=""></p>
<p>效果如下：<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fqrlvvj8cbj31kw0f1wws.jpg" alt=""></p>
<p><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fqrlznycdnj31kw0gbh0n.jpg" alt=""></p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fqrm0jpbjjj31kw04wgq9.jpg" alt=""></p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>实现原理其实很简单。既然要达到分布式全局限流的效果，那自然需要一个第三方组件来记录请求的次数。</p>
<p>其中 Redis 就非常适合这样的场景。</p>
<ul>
<li>每次请求时将当前时间(精确到秒)作为 Key 写入到 Redis 中，超时时间设置为 2 秒，Redis 将该 Key 的值进行自增。</li>
<li>当达到阈值时返回错误。</li>
<li>写入 Redis 的操作用 Lua 脚本来完成，利用 Redis 的单线程机制可以保证每个 Redis 请求的原子性。</li>
</ul>
<p>Lua 脚本如下:</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--lua 下标从 1 开始</span></div><div class="line"><span class="comment">-- 限流 key</span></div><div class="line"><span class="keyword">local</span> key = KEYS[<span class="number">1</span>]</div><div class="line"><span class="comment">-- 限流大小</span></div><div class="line"><span class="keyword">local</span> limit = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="comment">-- 获取当前流量大小</span></div><div class="line"><span class="keyword">local</span> curentLimit = <span class="built_in">tonumber</span>(redis.call(<span class="string">'get'</span>, key) <span class="keyword">or</span> <span class="string">"0"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> curentLimit + <span class="number">1</span> &gt; limit <span class="keyword">then</span></div><div class="line">    <span class="comment">-- 达到限流大小 返回</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"><span class="keyword">else</span></div><div class="line">    <span class="comment">-- 没有达到阈值 value + 1</span></div><div class="line">    redis.call(<span class="string">"INCRBY"</span>, key, <span class="number">1</span>)</div><div class="line">    redis.call(<span class="string">"EXPIRE"</span>, key, <span class="number">2</span>)</div><div class="line">    <span class="keyword">return</span> curentLimit + <span class="number">1</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Java 中的调用逻辑:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">    String key = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);</div><div class="line">    Object result = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> Jedis) &#123;</div><div class="line">        result = ((Jedis) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> JedisCluster) &#123;</div><div class="line">        result = ((JedisCluster) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//throw new RuntimeException("instance is error") ;</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (FAIL_CODE != (Long) result) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以只需要在需要限流的地方调用该方法对返回值进行判断即可达到限流的目的。</p>
<p>当然这只是利用 Redis 做了一个粗暴的计数器，如果想实现类似于上文中的令牌桶算法可以基于 Lua 自行实现。</p>
<h3 id="Builder-构建器"><a href="#Builder-构建器" class="headerlink" title="Builder 构建器"></a>Builder 构建器</h3><p>在设计这个组件时想尽量的提供给使用者清晰、可读性、不易出错的 API。</p>
<blockquote>
<p>比如第一步，如何构建一个限流对象。</p>
</blockquote>
<p>最常用的方式自然就是构造函数，如果有多个域则可以采用重叠构造器的方式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>缺点也是显而易见的：如果参数过多会导致难以阅读，甚至如果参数类型一致的情况下客户端颠倒了顺序，但不会引起警告从而出现难以预测的结果。</p>
<p>第二种方案可以采用 JavaBean 模式，利用 <code>setter</code> 方法进行构建:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A a = <span class="keyword">new</span> A();</div><div class="line">a.setA(a);</div><div class="line">a.setB(b);</div></pre></td></tr></table></figure>
<p>这种方式清晰易读，但却容易让对象处于不一致的状态，使对象处于线程不安全的状态。</p>
<p>所以这里采用了第三种创建对象的方式，构建器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLimit</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> JedisCommands jedis;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FAIL_CODE = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * lua script</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String script;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RedisLimit</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.limit = builder.limit ;</div><div class="line">        <span class="keyword">this</span>.jedis = builder.jedis ;</div><div class="line">        buildScript();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * limit traffic</div><div class="line">     * <span class="doctag">@return</span> if true</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">limit</span><span class="params">()</span> </span>&#123;</div><div class="line">        String key = String.valueOf(System.currentTimeMillis() / <span class="number">1000</span>);</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> Jedis) &#123;</div><div class="line">            result = ((Jedis) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> JedisCluster) &#123;</div><div class="line">            result = ((JedisCluster) <span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(key), Collections.singletonList(String.valueOf(limit)));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">//throw new RuntimeException("instance is error") ;</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (FAIL_CODE != (Long) result) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * read lua script</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buildScript</span><span class="params">()</span> </span>&#123;</div><div class="line">        script = ScriptUtil.getScript(<span class="string">"limit.lua"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  the builder</div><div class="line">     * <span class="doctag">@param</span> &lt;T&gt;</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">JedisCommands</span>&gt;</span>&#123;</div><div class="line">        <span class="keyword">private</span> T jedis = <span class="keyword">null</span> ;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> limit = <span class="number">200</span>;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(T jedis)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.jedis = jedis ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">limit</span><span class="params">(<span class="keyword">int</span> limit)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.limit = limit ;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> RedisLimit <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedisLimit(<span class="keyword">this</span>) ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样客户端在使用时:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RedisLimit redisLimit = <span class="keyword">new</span> RedisLimit.Builder&lt;&gt;(jedisCluster)</div><div class="line">                .limit(limit)</div><div class="line">                .build();</div></pre></td></tr></table></figure>
<p>更加的简单直接，并且避免了将创建过程分成了多个子步骤。</p>
<p>这在有多个构造参数，但又不是必选字段时很有作用。</p>
<p>因此顺便将分布式锁的构建器方式也一并更新了：</p>
<p><a href="https://github.com/crossoverJie/distributed-redis-tool#features" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool#features</a></p>
<blockquote>
<p>更多内容可以参考 Effective Java</p>
</blockquote>
<h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>从上文可以看出，使用过程就是调用 <code>limit</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//限流</span></div><div class="line"> <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line"> <span class="keyword">if</span> (!limit)&#123;</div><div class="line">    <span class="comment">//具体限流逻辑</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>为了减少侵入性，也为了简化客户端提供了两种注解方式。</p>
<h4 id="ControllerLimit"><a href="#ControllerLimit" class="headerlink" title="@ControllerLimit"></a>@ControllerLimit</h4><p>该注解可以作用于 <code>@RequestMapping</code> 修饰的接口中，并会在限流后提供限流响应。</p>
<p>实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebIntercept</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(WebIntercept.class);</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisLimit redisLimit;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addInterceptor(<span class="keyword">new</span> CustomInterceptor())</div><div class="line">                .addPathPatterns(<span class="string">"/**"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">                                 Object handler) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (redisLimit == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"redisLimit is null"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</div><div class="line">                HandlerMethod method = (HandlerMethod) handler;</div><div class="line"></div><div class="line">                ControllerLimit annotation = method.getMethodAnnotation(ControllerLimit.class);</div><div class="line">                <span class="keyword">if</span> (annotation == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//skip</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line">                <span class="keyword">if</span> (!limit) &#123;</div><div class="line">                    logger.warn(<span class="string">"request has bean limit"</span>);</div><div class="line">                    response.sendError(<span class="number">500</span>, <span class="string">"request limit"</span>);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是实现了 SpringMVC 中的拦截器，并在拦截过程中判断是否有使用注解，从而调用限流逻辑。</p>
<p><strong>前提是应用需要扫描到该类，让 Spring 进行管理。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.crossoverjie.distributed.intercept"</span>)</div></pre></td></tr></table></figure>
<h4 id="CommonLimit"><a href="#CommonLimit" class="headerlink" title="@CommonLimit"></a>@CommonLimit</h4><p>当然也可以在普通方法中使用。实现原理则是 Spring AOP (SpringMVC 的拦截器本质也是 AOP)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(CommonAspect.class);</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RedisLimit redisLimit ;</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.crossoverjie.distributed.annotation.CommonLimit)"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"check()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (redisLimit == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"redisLimit is null"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> limit = redisLimit.limit();</div><div class="line">        <span class="keyword">if</span> (!limit) &#123;</div><div class="line">            logger.warn(<span class="string">"request has bean limit"</span>);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"request has bean limit"</span>) ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很简单，也是在拦截过程中调用限流。</p>
<p>当然使用时也得扫描到该包:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.crossoverjie.distributed.intercept"</span>)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>限流</strong>在一个高并发大流量的系统中是保护应用的一个利器，成熟的方案也很多，希望对刚了解这一块的朋友提供一些思路。</p>
<p>以上所有的源码：</p>
<ul>
<li><a href="https://github.com/crossoverJie/distributed-redis-tool" target="_blank" rel="external">https://github.com/crossoverJie/distributed-redis-tool</a></li>
<li><a href="https://github.com/crossoverJie/springboot-cloud" target="_blank" rel="external">https://github.com/crossoverJie/springboot-cloud</a></li>
</ul>
<p>感兴趣的朋友可以点个 Star 或是提交 PR。</p>
<h3 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h3><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fqrle104hwj31i6104aig.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文接着上文&lt;a href=&quot;http://crossoverjie.top/2017/08/11/sbc4/&quot;&gt;应用限流&lt;/a&gt;进行讨论。&lt;/p&gt;
&lt;p&gt;之前谈到的限流方案只能针对于单个 JVM 有效，也就是单机应用。而对于现在普遍的分布式应用也得有一个分布式限流的方案。&lt;/p&gt;
&lt;p&gt;基于此尝试写了这个组件：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crossoverJie/distributed-redis-tool&quot;&gt;https://github.com/crossoverJie/distributed-redis-tool&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;DEMO&quot;&gt;&lt;a href=&quot;#DEMO&quot; class=&quot;headerlink&quot; title=&quot;DEMO&quot;&gt;&lt;/a&gt;DEMO&lt;/h2&gt;&lt;p&gt;以下采用的是&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/crossoverJie/springboot-cloud&quot;&gt;https://github.com/crossoverJie/springboot-cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;来做演示。&lt;/p&gt;
&lt;p&gt;在 Order 应用提供的接口中采取了限流。首先是配置了限流工具的 Bean:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Configuration&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RedisLimitConfig&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Value&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;$&amp;#123;redis.limit&amp;#125;&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; limit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; JedisConnectionFactory jedisConnectionFactory;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Bean&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; RedisLimit &lt;span class=&quot;title&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        RedisClusterConnection clusterConnection = jedisConnectionFactory.getClusterConnection();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        JedisCluster jedisCluster = (JedisCluster) clusterConnection.getNativeConnection();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        RedisLimit redisLimit = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RedisLimit.Builder&amp;lt;&amp;gt;(jedisCluster)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .limit(limit)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                .build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; redisLimit;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着在 Controller 使用组件：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Autowired&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; RedisLimit redisLimit ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@CheckReqNo&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BaseResponse&amp;lt;OrderNoResVO&amp;gt; &lt;span class=&quot;title&quot;&gt;getOrderNo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@RequestBody OrderNoReqVO orderNoReq)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BaseResponse&amp;lt;OrderNoResVO&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BaseResponse();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//限流&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; limit = redisLimit.limit();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!limit)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.setCode(StatusEnum.REQUEST_LIMIT.getCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        res.setMessage(StatusEnum.REQUEST_LIMIT.getMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setReqNo(orderNoReq.getReqNo());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == orderNoReq.getAppId())&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SBCException(StatusEnum.FAIL);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    OrderNoResVO orderNoRes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OrderNoResVO() ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    orderNoRes.setOrderId(DateUtil.getLongTime());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setCode(StatusEnum.SUCCESS.getCode());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setMessage(StatusEnum.SUCCESS.getMessage());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    res.setDataBody(orderNoRes);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了方便使用，也提供了注解:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@ControllerLimit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; BaseResponse&amp;lt;OrderNoResVO&amp;gt; &lt;span class=&quot;title&quot;&gt;getOrderNoLimit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@RequestBody OrderNoReqVO orderNoReq)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    BaseResponse&amp;lt;OrderNoResVO&amp;gt; res = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BaseResponse();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 业务逻辑&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; res ;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该注解拦截了 http 请求，会再请求达到阈值时直接返回。&lt;/p&gt;
&lt;p&gt;普通方法也可使用:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@CommonLimit&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会在调用达到阈值时抛出异常。&lt;/p&gt;
&lt;p&gt;为了模拟并发，在 &lt;a href=&quot;https://github.com/crossoverJie/springboot-cloud/blob/master/sbc-user/user/src/main/java/com/crossoverJie/sbcuser/controller/UserController.java#L72-L91&quot;&gt;User&lt;/a&gt; 应用中开启了 10 个线程调用 Order(&lt;strong&gt;限流次数为5&lt;/strong&gt;) 接口(也可使用专业的并发测试工具 JMeter 等)。&lt;/p&gt;
    
    </summary>
    
      <category term="sbc" scheme="http://crossoverjie.top/categories/sbc/"/>
    
      <category term="Distributed Tools" scheme="http://crossoverjie.top/categories/sbc/Distributed-Tools/"/>
    
    
      <category term="Distributed Limited" scheme="http://crossoverjie.top/tags/Distributed-Limited/"/>
    
  </entry>
  
  <entry>
    <title>【译】对于初学者什么是最好的编程语言？</title>
    <link href="http://crossoverjie.top/2018/04/12/translation/translation-What%20Is%20The%20Best%20Programming%20Language%20to%20Start/"/>
    <id>http://crossoverjie.top/2018/04/12/translation/translation-What Is The Best Programming Language to Start/</id>
    <published>2018-04-11T17:02:13.000Z</published>
    <updated>2018-04-12T14:45:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://hackernoon.com/what-is-the-best-programming-language-to-start-8ca8fb5e9a60" target="_blank" rel="external">原文链接</a></h3><p>Python？Java？Ruby？JavaScript？有非常多的选择。选择一种编程语言开始你的编码之旅不应该是一件艰巨的任务。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fq952y5gn6j318g0p0q88.jpg" alt=""></p>
<p>事实上：你将要学习的语言并不是特别重要，更重要的是学习编程的理念。对于任何编程语言来说知识的可传递性都是至关重要的。</p>
<p>我学习的第一门语言是 Java，学习了循环，while 循环，条件，函数，面向对象编程和许多编程理念。</p>
<p>然而，选择一门能在编程领域轻松找到工作的语言是更好的选择。对于初学者来说，我这里有一份列表推荐给你：</p>
<a id="more"></a>
<h3 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h3><p>Python 在美国大学里是最受欢迎的入门型语言。</p>
<p>就像 JavaScript 一样，Python 也非常灵活，现在被用于构建生物信息学的 web 应用。我强烈推荐你学习 Python，它是很棒的入门选择。</p>
<h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>Java 是企业环境中使用最多的语言，根据 TIOBE 统计 Java 长年占据编程语言榜首。同时 Java 是强类型地静态语言，可以更容易地去描述一些编程理念。</p>
<p>Java 作为最常使用的语言，你可以很轻松地在这段编程之旅中找到 Java 的相关课程和指南来获得帮助。你还可以使用 Java 构建服务端应用、Android APP 等应用程序。</p>
<h3 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h3><p>Ruby 是我最喜欢的编程语言，它编写简单，容易理解并且使用顺手。</p>
<p>就像 JavaScript 一样，它学起来简单但是不易掌握。Ruby 在很多公司中被广泛应用，比如 Airbnb, EBANX, Shopify, Twitter, GitHub 等等。它还有一个超赞的 7*24 小时的在线社区随时提供帮助。<br>Ruby 以  Ruby on Rails 框架著称，它可以帮你很轻松的构建整个 web 应用。</p>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>JavaScript 是我用过的最灵活的语言之一。</p>
<p>你能用它构建控制台程序，桌面软件，手机 APP，前端开发，后端开发等等。它是一个很不错的编程语言，简单易学但难以掌握。</p>
<p>我建议你学习并掌握 JavaScript ，但不是作为第一门语言。</p>
<p>对于初学者来说 JavaScript 很难调试并且不容易学习编程理念比如异步，原型，面向对象等等。</p>
<h3 id="不要纠结语言"><a href="#不要纠结语言" class="headerlink" title="不要纠结语言"></a>不要纠结语言</h3><p>你需要通过选择一门语言来学习编程理念，当你学完之后你将花费较小的学习曲线来学习任何其他的语言。</p>
<p>如果你想要学习如何学习一门新语言的话，可以阅读我的文章 “<a href="https://hackernoon.com/what-is-the-best-programming-language-to-start-8ca8fb5e9a60" target="_blank" rel="external">How to Learn a New Programming Language or Framework</a>”，将会非常有用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原文链接&quot;&gt;&lt;a href=&quot;#原文链接&quot; class=&quot;headerlink&quot; title=&quot;原文链接&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://hackernoon.com/what-is-the-best-programming-language-to-start-8ca8fb5e9a60&quot;&gt;原文链接&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Python？Java？Ruby？JavaScript？有非常多的选择。选择一种编程语言开始你的编码之旅不应该是一件艰巨的任务。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcgy1fq952y5gn6j318g0p0q88.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上：你将要学习的语言并不是特别重要，更重要的是学习编程的理念。对于任何编程语言来说知识的可传递性都是至关重要的。&lt;/p&gt;
&lt;p&gt;我学习的第一门语言是 Java，学习了循环，while 循环，条件，函数，面向对象编程和许多编程理念。&lt;/p&gt;
&lt;p&gt;然而，选择一门能在编程领域轻松找到工作的语言是更好的选择。对于初学者来说，我这里有一份列表推荐给你：&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="http://crossoverjie.top/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>动手实现一个 LRU cache</title>
    <link href="http://crossoverjie.top/2018/04/07/algorithm/LRU-cache/"/>
    <id>http://crossoverjie.top/2018/04/07/algorithm/LRU-cache/</id>
    <published>2018-04-06T17:01:36.000Z</published>
    <updated>2018-04-07T04:46:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq3fey7n97j31340o8myw.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LRU 是 <code>Least Recently Used</code> 的简写，字面意思则是<code>最近最少使用</code>。</p>
<p>通常用于缓存的淘汰策略实现，由于缓存的内存非常宝贵，所以需要根据某种规则来剔除数据保证内存不被撑满。</p>
<p>如常用的 Redis 就有以下几种策略：</p>
<table>
<thead>
<tr>
<th style="text-align:center">策略</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">volatile-lru</td>
<td style="text-align:center">从已设置过期时间的数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">volatile-ttl</td>
<td style="text-align:center">从已设置过期时间的数据集中挑选将要过期的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">volatile-random</td>
<td style="text-align:center">从已设置过期时间的数据集中任意选择数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">allkeys-lru</td>
<td style="text-align:center">从所有数据集中挑选最近最少使用的数据淘汰</td>
</tr>
<tr>
<td style="text-align:center">allkeys-random</td>
<td style="text-align:center">从所有数据集中任意选择数据进行淘汰</td>
</tr>
<tr>
<td style="text-align:center">no-envicition</td>
<td style="text-align:center">禁止驱逐数据</td>
</tr>
</tbody>
</table>
<blockquote>
<p>摘抄自:<a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5" target="_blank" rel="external">https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5</a></p>
</blockquote>
<a id="more"></a>
<h2 id="实现一"><a href="#实现一" class="headerlink" title="实现一"></a>实现一</h2><p>之前也有接触过一道面试题，大概需求是：</p>
<ul>
<li>实现一个 LRU 缓存，当缓存数据达到 N 之后需要淘汰掉最近最少使用的数据。</li>
<li>N 小时之内没有被访问的数据也需要淘汰掉。</li>
</ul>
<p>以下是我的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUAbstractMap</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">util</span>.<span class="title">AbstractMap</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(LRUAbstractMap.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查是否超期线程</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> ExecutorService checkTimePool ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * map 最大size</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> MAX_SIZE = <span class="number">1024</span> ;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ArrayBlockingQueue&lt;Node&gt; QUEUE = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(MAX_SIZE) ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> DEFAULT_ARRAY_SIZE =<span class="number">1024</span> ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数组长度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> arraySize ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数组</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Object[] arrays ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断是否停止 flag</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 超时时间</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Long EXPIRE_TIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000L</span> ;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 整个 Map 的大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> AtomicInteger size  ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUAbstractMap</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">        arraySize = DEFAULT_ARRAY_SIZE;</div><div class="line">        arrays = <span class="keyword">new</span> Object[arraySize] ;</div><div class="line"></div><div class="line">        <span class="comment">//开启一个线程检查最先放入队列的值是否超期</span></div><div class="line">        executeCheckTime();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开启一个线程检查最先放入队列的值是否超期 设置为守护线程</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">executeCheckTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</div><div class="line">                .setNameFormat(<span class="string">"check-thread-%d"</span>)</div><div class="line">                .setDaemon(<span class="keyword">true</span>)</div><div class="line">                .build();</div><div class="line">        checkTimePool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">1</span>),namedThreadFactory,<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</div><div class="line">        checkTimePool.execute(<span class="keyword">new</span> CheckTimeThread()) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Entry&gt; <span class="title">entrySet</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.keySet();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">put</span><span class="params">(Object key, Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> hash = hash(key);</div><div class="line">        <span class="keyword">int</span> index = hash % arraySize ;</div><div class="line">        Node currentNode = (Node) arrays[index] ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>)&#123;</div><div class="line">            arrays[index] = <span class="keyword">new</span> Node(<span class="keyword">null</span>,<span class="keyword">null</span>, key, value);</div><div class="line"></div><div class="line">            <span class="comment">//写入队列</span></div><div class="line">            QUEUE.offer((Node) arrays[index]) ;</div><div class="line"></div><div class="line">            sizeUp();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            Node cNode = currentNode ;</div><div class="line">            Node nNode = cNode ;</div><div class="line"></div><div class="line">            <span class="comment">//存在就覆盖</span></div><div class="line">            <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line">                cNode.val = value ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (nNode.next != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">//key 存在 就覆盖 简单判断</span></div><div class="line">                <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line">                    nNode.val = value ;</div><div class="line">                    <span class="keyword">break</span> ;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//不存在就新增链表</span></div><div class="line">                    sizeUp();</div><div class="line">                    Node node = <span class="keyword">new</span> Node(nNode,<span class="keyword">null</span>,key,value) ;</div><div class="line"></div><div class="line">                    <span class="comment">//写入队列</span></div><div class="line">                    QUEUE.offer(currentNode) ;</div><div class="line"></div><div class="line">                    cNode.next = node ;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                nNode = nNode.next ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hash = hash(key) ;</div><div class="line">        <span class="keyword">int</span> index = hash % arraySize ;</div><div class="line">        Node currentNode = (Node) arrays[index] ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (currentNode.next == <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="comment">//更新时间</span></div><div class="line">            currentNode.setUpdateTime(System.currentTimeMillis());</div><div class="line"></div><div class="line">            <span class="comment">//没有冲突</span></div><div class="line">            <span class="keyword">return</span> currentNode ;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Node nNode = currentNode ;</div><div class="line">        <span class="keyword">while</span> (nNode.next != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line"></div><div class="line">                <span class="comment">//更新时间</span></div><div class="line">                currentNode.setUpdateTime(System.currentTimeMillis());</div><div class="line"></div><div class="line">                <span class="keyword">return</span> nNode ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            nNode = nNode.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> hash = hash(key) ;</div><div class="line">        <span class="keyword">int</span> index = hash % arraySize ;</div><div class="line">        Node currentNode = (Node) arrays[index] ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (currentNode.key == key)&#123;</div><div class="line">            sizeDown();</div><div class="line">            arrays[index] = <span class="keyword">null</span> ;</div><div class="line"></div><div class="line">            <span class="comment">//移除队列</span></div><div class="line">            QUEUE.poll();</div><div class="line">            <span class="keyword">return</span> currentNode ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Node nNode = currentNode ;</div><div class="line">        <span class="keyword">while</span> (nNode.next != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (nNode.key == key)&#123;</div><div class="line">                sizeDown();</div><div class="line">                <span class="comment">//在链表中找到了 把上一个节点的 next 指向当前节点的下一个节点</span></div><div class="line">                nNode.pre.next = nNode.next ;</div><div class="line">                nNode = <span class="keyword">null</span> ;</div><div class="line"></div><div class="line">                <span class="comment">//移除队列</span></div><div class="line">                QUEUE.poll();</div><div class="line"></div><div class="line">                <span class="keyword">return</span> nNode;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            nNode = nNode.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.remove(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 增加size</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sizeUp</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//在put值时候认为里边已经有数据了</span></div><div class="line">        flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size == <span class="keyword">null</span>)&#123;</div><div class="line">            size = <span class="keyword">new</span> AtomicInteger() ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> size = <span class="keyword">this</span>.size.incrementAndGet();</div><div class="line">        <span class="keyword">if</span> (size &gt;= MAX_SIZE) &#123;</div><div class="line">            <span class="comment">//找到队列头的数据</span></div><div class="line">            Node node = QUEUE.poll() ;</div><div class="line">            <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"data error"</span>) ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//移除该 key</span></div><div class="line">            Object key = node.key ;</div><div class="line">            remove(key) ;</div><div class="line">            lruCallback() ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 数量减小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sizeDown</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (QUEUE.size() == <span class="number">0</span>)&#123;</div><div class="line">            flag = <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.size.decrementAndGet() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size.get() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 链表</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</div><div class="line">        <span class="keyword">private</span> Node next ;</div><div class="line">        <span class="keyword">private</span> Node pre ;</div><div class="line">        <span class="keyword">private</span> Object key ;</div><div class="line">        <span class="keyword">private</span> Object val ;</div><div class="line">        <span class="keyword">private</span> Long updateTime ;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(Node pre,Node next, Object key, Object val)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.pre = pre ;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.val = val;</div><div class="line">            <span class="keyword">this</span>.updateTime = System.currentTimeMillis() ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpdateTime</span><span class="params">(Long updateTime)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.updateTime = updateTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Long <span class="title">getUpdateTime</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> updateTime;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"Node&#123;"</span> +</div><div class="line">                    <span class="string">"key="</span> + key +</div><div class="line">                    <span class="string">", val="</span> + val +</div><div class="line">                    <span class="string">'&#125;'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * copy HashMap 的 hash 实现</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> h;</div><div class="line">        <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">lruCallback</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.debug(<span class="string">"lruCallback"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckTimeThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (flag)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Node node = QUEUE.poll();</div><div class="line">                    <span class="keyword">if</span> (node == <span class="keyword">null</span>)&#123;</div><div class="line">                        <span class="keyword">continue</span> ;</div><div class="line">                    &#125;</div><div class="line">                    Long updateTime = node.getUpdateTime() ;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> ((updateTime - System.currentTimeMillis()) &gt;= EXPIRE_TIME)&#123;</div><div class="line">                        remove(node.key) ;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    LOGGER.error(<span class="string">"InterruptedException"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>感兴趣的朋友可以直接从:</p>
<p><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUAbstractMap.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUAbstractMap.java</a></p>
<p>下载代码本地运行。</p>
<p>代码看着比较多，其实实现的思路还是比较简单：</p>
<ul>
<li>采用了与 HashMap 一样的保存数据方式，只是自己手动实现了一个简易版。</li>
<li>内部采用了一个队列来保存每次写入的数据。</li>
<li>写入的时候判断缓存是否大于了阈值 N，如果满足则根据队列的 FIFO 特性将队列头的数据删除。因为队列头的数据肯定是最先放进去的。</li>
<li>再开启了一个守护线程用于判断最先放进去的数据是否超期（因为就算超期也是最先放进去的数据最有可能满足超期条件。）</li>
<li>设置为守护线程可以更好的表明其目的（最坏的情况下，如果是一个用户线程最终有可能导致程序不能正常退出，因为该线程一直在运行，守护线程则不会有这个情况。）</li>
</ul>
<p>以上代码大体功能满足了，但是有一个致命问题。</p>
<p>就是最近<strong>最少使用</strong>没有满足，删除的数据都是最先放入的数据。</p>
<blockquote>
<p>不过其中的 <code>put get</code> 流程算是一个简易的 HashMap 实现，可以对 HashMap 加深一些理解。</p>
</blockquote>
<h2 id="实现二"><a href="#实现二" class="headerlink" title="实现二"></a>实现二</h2><p>因此如何来实现一个完整的 LRU 缓存呢，这次不考虑过期时间的问题。</p>
<p>其实从上一个实现也能想到一些思路：</p>
<ul>
<li>要记录最近最少使用，那至少需要一个有序的集合来保证写入的顺序。</li>
<li>在使用了数据之后能够更新它的顺序。</li>
</ul>
<p>基于以上两点很容易想到一个常用的数据结构：<strong>链表</strong>。</p>
<ol>
<li>每次写入数据时将数据放入链表头结点。</li>
<li>使用数据时候将数据<strong>移动到头结点</strong>。</li>
<li>缓存数量超过阈值时移除链表尾部数据。</li>
</ol>
<p>因此有了以下实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; cacheMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 节点大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nodeCount;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 头结点</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; header;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 尾结点</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Node&lt;K, V&gt; tailer;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRUMap</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</div><div class="line">        <span class="comment">//头结点的下一个结点为空</span></div><div class="line">        header = <span class="keyword">new</span> Node&lt;&gt;();</div><div class="line">        header.next = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//尾结点的上一个结点为空</span></div><div class="line">        tailer = <span class="keyword">new</span> Node&lt;&gt;();</div><div class="line">        tailer.tail = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//双向链表 头结点的上结点指向尾结点</span></div><div class="line">        header.tail = tailer;</div><div class="line"></div><div class="line">        <span class="comment">//尾结点的下结点指向头结点</span></div><div class="line">        tailer.next = header;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">        cacheMap.put(key, value);</div><div class="line"></div><div class="line">        <span class="comment">//双向链表中添加结点</span></div><div class="line">        addNode(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</div><div class="line"></div><div class="line">        Node&lt;K, V&gt; node = getNode(key);</div><div class="line"></div><div class="line">        <span class="comment">//移动到头结点</span></div><div class="line">        moveToHead(node) ;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> cacheMap.get(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">moveToHead</span><span class="params">(Node&lt;K,V&gt; node)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//如果是最后的一个节点</span></div><div class="line">        <span class="keyword">if</span> (node.tail == <span class="keyword">null</span>)&#123;</div><div class="line">            node.next.tail = <span class="keyword">null</span> ;</div><div class="line">            tailer = node.next ;</div><div class="line">            nodeCount -- ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果是本来就是头节点 不作处理</span></div><div class="line">        <span class="keyword">if</span> (node.next == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//如果处于中间节点</span></div><div class="line">        <span class="keyword">if</span> (node.tail != <span class="keyword">null</span> &amp;&amp; node.next != <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="comment">//它的上一节点指向它的下一节点 也就删除当前节点</span></div><div class="line">            node.tail.next = node.next ;</div><div class="line">            nodeCount -- ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//最后在头部增加当前节点</span></div><div class="line">        <span class="comment">//注意这里需要重新 new 一个对象，不然原本的node 还有着下面的引用，会造成内存溢出。</span></div><div class="line">        node = <span class="keyword">new</span> Node&lt;&gt;(node.getKey(),node.getValue()) ;</div><div class="line">        addHead(node) ;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 链表查询 效率较低</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(K key)</span></span>&#123;</div><div class="line">        Node&lt;K,V&gt; node = tailer ;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (node.getKey().equals(key))&#123;</div><div class="line">                <span class="keyword">return</span> node ;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            node = node.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 写入头结点</div><div class="line">     * <span class="doctag">@param</span> key</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line"></div><div class="line">        Node&lt;K, V&gt; node = <span class="keyword">new</span> Node&lt;&gt;(key, value);</div><div class="line"></div><div class="line">        <span class="comment">//容量满了删除最后一个</span></div><div class="line">        <span class="keyword">if</span> (cacheSize == nodeCount) &#123;</div><div class="line">            <span class="comment">//删除尾结点</span></div><div class="line">            delTail();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//写入头结点</span></div><div class="line">        addHead(node);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加头结点</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> node</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addHead</span><span class="params">(Node&lt;K, V&gt; node)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//写入头结点</span></div><div class="line">        header.next = node;</div><div class="line">        node.tail = header;</div><div class="line">        header = node;</div><div class="line">        nodeCount++;</div><div class="line"></div><div class="line">        <span class="comment">//如果写入的数据大于2个 就将初始化的头尾结点删除</span></div><div class="line">        <span class="keyword">if</span> (nodeCount == <span class="number">2</span>) &#123;</div><div class="line">            tailer.next.next.tail = <span class="keyword">null</span>;</div><div class="line">            tailer = tailer.next.next;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">delTail</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//把尾结点从缓存中删除</span></div><div class="line">        cacheMap.remove(tailer.getKey());</div><div class="line"></div><div class="line">        <span class="comment">//删除尾结点</span></div><div class="line">        tailer.next.tail = <span class="keyword">null</span>;</div><div class="line">        tailer = tailer.next;</div><div class="line"></div><div class="line">        nodeCount--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</div><div class="line">        <span class="keyword">private</span> K key;</div><div class="line">        <span class="keyword">private</span> V value;</div><div class="line">        Node&lt;K, V&gt; tail;</div><div class="line">        Node&lt;K, V&gt; next;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">()</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder() ;</div><div class="line">        Node&lt;K,V&gt; node = tailer ;</div><div class="line">        <span class="keyword">while</span> (node != <span class="keyword">null</span>)&#123;</div><div class="line">            sb.append(node.getKey()).append(<span class="string">":"</span>)</div><div class="line">                    .append(node.getValue())</div><div class="line">                    .append(<span class="string">"--&gt;"</span>) ;</div><div class="line"></div><div class="line">            node = node.next ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码：<br><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUMap.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRUMap.java</a></p>
<p>实际效果，写入时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRUMap&lt;String,Integer&gt; lruMap = <span class="keyword">new</span> LRUMap(<span class="number">3</span>) ;</div><div class="line">        lruMap.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div><div class="line">        lruMap.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div><div class="line">        lruMap.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div><div class="line"></div><div class="line">        System.out.println(lruMap.toString());</div><div class="line"></div><div class="line">        lruMap.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</div><div class="line">        System.out.println(lruMap.toString());</div><div class="line"></div><div class="line">        lruMap.put(<span class="string">"5"</span>,<span class="number">5</span>) ;</div><div class="line">        System.out.println(lruMap.toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//输出：</span></div><div class="line"><span class="number">1</span>:<span class="number">1</span>--&gt;<span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;</div><div class="line"><span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;<span class="number">4</span>:<span class="number">4</span>--&gt;</div><div class="line"><span class="number">3</span>:<span class="number">3</span>--&gt;<span class="number">4</span>:<span class="number">4</span>--&gt;<span class="number">5</span>:<span class="number">5</span>--&gt;</div></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRUMap&lt;String,Integer&gt; lruMap = <span class="keyword">new</span> LRUMap(<span class="number">3</span>) ;</div><div class="line">        lruMap.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div><div class="line">        lruMap.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div><div class="line">        lruMap.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div><div class="line"></div><div class="line">        System.out.println(lruMap.toString());</div><div class="line">        System.out.println(<span class="string">"=============="</span>);</div><div class="line"></div><div class="line">        Integer integer = lruMap.get(<span class="string">"1"</span>);</div><div class="line">        System.out.println(integer);</div><div class="line">        System.out.println(<span class="string">"=============="</span>);</div><div class="line">        System.out.println(lruMap.toString());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span>:<span class="number">1</span>--&gt;<span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;</div><div class="line">==============</div><div class="line"><span class="number">1</span></div><div class="line">==============</div><div class="line"><span class="number">2</span>:<span class="number">2</span>--&gt;<span class="number">3</span>:<span class="number">3</span>--&gt;<span class="number">1</span>:<span class="number">1</span>--&gt;</div></pre></td></tr></table></figure>
<p>实现思路和上文提到的一致，说下重点：</p>
<ul>
<li>数据是直接利用 HashMap 来存放的。</li>
<li>内部使用了一个双向链表来存放数据，所以有一个头结点 header，以及尾结点 tailer。</li>
<li>每次写入头结点，删除尾结点时都是依赖于 header tailer，如果看着比较懵建议自己实现一个链表熟悉下，或结合下文的对象关系图一起理解。</li>
<li>使用数据移动到链表头时，第一步是需要在双向链表中找到该节点。这里就体现出链表的问题了。查找效率很低，最差需要 <code>O(N)</code>。之后依赖于当前节点进行移动。</li>
<li>在写入头结点时有判断链表大小等于 2 时需要删除初始化的头尾结点。这是因为初始化时候生成了两个双向节点，没有数据只是为了形成一个数据结构。当真实数据进来之后需要删除以方便后续的操作（这点可以继续优化）。</li>
<li>以上的所有操作都是线程不安全的，需要使用者自行控制。</li>
</ul>
<p>下面是对象关系图：</p>
<h3 id="初始化时"><a href="#初始化时" class="headerlink" title="初始化时"></a>初始化时</h3><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq3h4xsf4cj30dh09hglr.jpg" alt=""></p>
<h3 id="写入数据时"><a href="#写入数据时" class="headerlink" title="写入数据时"></a>写入数据时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LRUMap&lt;String,Integer&gt; lruMap = <span class="keyword">new</span> LRUMap(<span class="number">3</span>) ;</div><div class="line">lruMap.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fq3h892nalj30ef09jdg2.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lruMap.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fq3hayffy1j30jr0b6q3a.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lruMap.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fq3hcfq95pj30gp0bot93.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lruMap.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</div></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fq3hfl5r8ij30kn0b374s.jpg" alt=""></p>
<h3 id="获取数据时"><a href="#获取数据时" class="headerlink" title="获取数据时"></a>获取数据时</h3><p>数据和上文一样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer integer = lruMap.get(<span class="string">"2"</span>);</div></pre></td></tr></table></figure>
<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fq3hjbou5pj30k70aj3yy.jpg" alt=""></p>
<p>通过以上几张图应该是很好理解数据是如何存放的了。</p>
<h2 id="实现三"><a href="#实现三" class="headerlink" title="实现三"></a>实现三</h2><p>其实如果对 Java 的集合比较熟悉的话，会发现上文的结构和 LinkedHashMap 非常类似。</p>
<p>对此不太熟悉的朋友可以先了解下 <a href="http://crossoverjie.top/2018/02/06/LinkedHashMap/">LinkedHashMap 底层分析</a> 。</p>
<p>所以我们完全可以借助于它来实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRULinkedMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 最大缓存大小</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cacheSize;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinkedHashMap&lt;K,V&gt; cacheMap ;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LRULinkedMap</span><span class="params">(<span class="keyword">int</span> cacheSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</div><div class="line"></div><div class="line">        cacheMap = <span class="keyword">new</span> LinkedHashMap(<span class="number">16</span>,<span class="number">0.75F</span>,<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (cacheSize + <span class="number">1</span> == cacheMap.size())&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(K key,V value)</span></span>&#123;</div><div class="line">        cacheMap.put(key,value) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> cacheMap.get(key) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> Collection&lt;Map.Entry&lt;K, V&gt;&gt; getAll() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;K, V&gt;&gt;(cacheMap.entrySet());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>源码：<br><a href="https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRULinkedMap.java" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview/blob/master/src/main/java/com/crossoverjie/actual/LRULinkedMap.java</a></p>
<p>这次就比较简洁了，也就几行代码（具体的逻辑 LinkedHashMap 已经帮我们实现好了）</p>
<p>实际效果:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRULinkedMap&lt;String,Integer&gt; map = <span class="keyword">new</span> LRULinkedMap(<span class="number">3</span>) ;</div><div class="line">        map.put(<span class="string">"1"</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">"2"</span>,<span class="number">2</span>);</div><div class="line">        map.put(<span class="string">"3"</span>,<span class="number">3</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">""</span>);</div><div class="line">        map.put(<span class="string">"4"</span>,<span class="number">4</span>);</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span> : <span class="number">1</span>	<span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	</div><div class="line"><span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	<span class="number">4</span> : <span class="number">4</span></div></pre></td></tr></table></figure>
<p>使用时：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LRULinkedMap&lt;String,Integer&gt; map = <span class="keyword">new</span> LRULinkedMap(<span class="number">4</span>) ;</div><div class="line">        map.put(<span class="string">"1"</span>,<span class="number">1</span>);</div><div class="line">        map.put(<span class="string">"2"</span>,<span class="number">2</span>);</div><div class="line">        map.put(<span class="string">"3"</span>,<span class="number">3</span>);</div><div class="line">        map.put(<span class="string">"4"</span>,<span class="number">4</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">""</span>);</div><div class="line">        map.get(<span class="string">"1"</span>) ;</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.getAll())&#123;</div><div class="line">            System.out.print(e.getKey() + <span class="string">" : "</span> + e.getValue() + <span class="string">"\t"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//输出</span></div><div class="line"><span class="number">1</span> : <span class="number">1</span>	<span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	<span class="number">4</span> : <span class="number">4</span>	</div><div class="line"><span class="number">2</span> : <span class="number">2</span>	<span class="number">3</span> : <span class="number">3</span>	<span class="number">4</span> : <span class="number">4</span>	<span class="number">1</span> : <span class="number">1</span></div></pre></td></tr></table></figure>
<p>LinkedHashMap 内部也有维护一个双向队列，在初始化时也会给定一个缓存大小的阈值。初始化时自定义是否需要删除最近不常使用的数据，如果是则会按照实现二中的方式管理数据。</p>
<p>其实主要代码就是重写了 LinkedHashMap 的 removeEldestEntry 方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它默认是返回 false，也就是不会管有没有超过阈值。</p>
<p>所以我们自定义大于了阈值时返回 true，这样 LinkedHashMap 就会帮我们删除最近最少使用的数据。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是对 LRU 缓存的实现，了解了这些至少在平时使用时可以知其所以然。</p>
<p>当然业界使用较多的还有 <a href="https://github.com/google/guava" target="_blank" rel="external">guava</a> 的实现，并且它还支持多种过期策略。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fq3fey7n97j31340o8myw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;LRU 是 &lt;code&gt;Least Recently Used&lt;/code&gt; 的简写，字面意思则是&lt;code&gt;最近最少使用&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;通常用于缓存的淘汰策略实现，由于缓存的内存非常宝贵，所以需要根据某种规则来剔除数据保证内存不被撑满。&lt;/p&gt;
&lt;p&gt;如常用的 Redis 就有以下几种策略：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;策略&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volatile-lru&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从已设置过期时间的数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volatile-ttl&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从已设置过期时间的数据集中挑选将要过期的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;volatile-random&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从已设置过期时间的数据集中任意选择数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;allkeys-lru&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从所有数据集中挑选最近最少使用的数据淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;allkeys-random&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;从所有数据集中任意选择数据进行淘汰&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;no-envicition&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;禁止驱逐数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;摘抄自:&lt;a href=&quot;https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5&quot;&gt;https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Redis.md#%E5%8D%81%E4%B8%89%E6%95%B0%E6%8D%AE%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法" scheme="http://crossoverjie.top/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="LRU cache" scheme="http://crossoverjie.top/categories/%E7%AE%97%E6%B3%95/LRU-cache/"/>
    
    
  </entry>
  
  <entry>
    <title>基于 Redis 的分布式锁</title>
    <link href="http://crossoverjie.top/2018/03/29/distributed-lock/distributed-lock-redis/"/>
    <id>http://crossoverjie.top/2018/03/29/distributed-lock/distributed-lock-redis/</id>
    <published>2018-03-29T12:10:36.000Z</published>
    <updated>2018-04-27T14:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1fpvathnbf6j31kw11xwl3.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分布式锁在分布式应用中应用广泛，想要搞懂一个新事物首先得了解它的由来，这样才能更加的理解甚至可以举一反三。</p>
<p>首先谈到分布式锁自然也就联想到分布式应用。</p>
<p>在我们将应用拆分为分布式应用之前的单机系统中，对一些并发场景读取公共资源时如扣库存，卖车票之类的需求可以简单的使用<a href="http://crossoverjie.top/2018/01/14/Synchronize/">同步</a>或者是<a href="http://crossoverjie.top/2018/01/25/ReentrantLock/">加锁</a>就可以实现。</p>
<p>但是应用分布式了之后系统由以前的单进程多线程的程序变为了多进程多线程，这时使用以上的解决方案明显就不够了。</p>
<p>因此业界常用的解决方案通常是借助于一个第三方组件并利用它自身的排他性来达到多进程的互斥。如：</p>
<ul>
<li>基于 DB 的唯一索引。</li>
<li>基于 ZK 的临时有序节点。</li>
<li>基于 Redis 的 <code>NX EX</code> 参数。</li>
</ul>
<p>这里主要基于 Redis 进行讨论。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>既然是选用了 Redis，那么它就得具有排他性才行。同时它最好也有锁的一些基本特性：</p>
<ul>
<li>高性能(加、解锁时高性能)</li>
<li>可以使用阻塞锁与非阻塞锁。</li>
<li>不能出现死锁。</li>
<li>可用性(不能出现节点 down 掉后加锁失败)。</li>
</ul>
<p>这里利用 <code>Redis set key</code> 时的一个 NX 参数可以保证在这个 key 不存在的情况下写入成功。并且再加上 EX 参数可以让该 key 在超时之后自动删除。</p>
<p>所以利用以上两个特性可以保证在同一时刻只会有一个进程获得锁，并且不会出现死锁(最坏的情况就是超时自动删除 key)。</p>
<h3 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h3><p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String key, String request)</span> </span>&#123;</div><div class="line">    String result = <span class="keyword">this</span>.jedis.set(LOCK_PREFIX + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (LOCK_MSG.equals(result))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里使用的 jedis 的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">String <span class="title">set</span><span class="params">(String key, String value, String nxxx, String expx, <span class="keyword">long</span> time)</span></span>;</div></pre></td></tr></table></figure>
<p>api。</p>
<p>该命令可以保证 NX EX 的原子性。</p>
<p>一定不要把两个命令(NX EX)分开执行，如果在 NX 之后程序出现问题就有可能产生死锁。</p>
<h4 id="阻塞锁"><a href="#阻塞锁" class="headerlink" title="阻塞锁"></a>阻塞锁</h4><p>同时也可以实现一个阻塞锁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一直阻塞</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">(String key, String request)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;)&#123;</div><div class="line">        String result = <span class="keyword">this</span>.jedis.set(LOCK_PREFIX + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line">        <span class="keyword">if</span> (LOCK_MSG.equals(result))&#123;</div><div class="line">            <span class="keyword">break</span> ;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"> <span class="comment">//防止一直消耗 CPU 	</span></div><div class="line">        Thread.sleep(DEFAULT_SLEEP_TIME) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">//自定义阻塞时间</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String key, String request,<span class="keyword">int</span> blockTime)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (blockTime &gt;= <span class="number">0</span>)&#123;</div><div class="line"></div><div class="line">        String result = <span class="keyword">this</span>.jedis.set(LOCK_PREFIX + key, request, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, <span class="number">10</span> * TIME);</div><div class="line">        <span class="keyword">if</span> (LOCK_MSG.equals(result))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        blockTime -= DEFAULT_SLEEP_TIME ;</div><div class="line"></div><div class="line">        Thread.sleep(DEFAULT_SLEEP_TIME) ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>解锁也很简单，其实就是把这个 key 删掉就万事大吉了，比如使用 <code>del key</code> 命令。</p>
<p>但现实往往没有那么 easy。</p>
<p>如果进程 A 获取了锁设置了超时时间，但是由于执行周期较长导致到了超时时间之后锁就自动释放了。这时进程 B 获取了该锁执行很快就释放锁。这样就会出现进程 B 将进程 A 的锁释放了。</p>
<p>所以最好的方式是在每次解锁时都需要判断锁<strong>是否是自己</strong>的。</p>
<p>这时就需要结合加锁机制一起实现了。</p>
<p>加锁时需要传递一个参数，将该参数作为这个 key 的 value，这样每次解锁时判断 value 是否相等即可。</p>
<p>所以解锁代码就不能是简单的 <code>del</code>了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(String key,String request)</span></span>&#123;</div><div class="line">    <span class="comment">//lua script</span></div><div class="line">    String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</div><div class="line"></div><div class="line">    Object result = <span class="keyword">null</span> ;</div><div class="line">    <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> Jedis)&#123;</div><div class="line">        result = ((Jedis)<span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(LOCK_PREFIX + key), Collections.singletonList(request));</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (jedis <span class="keyword">instanceof</span> JedisCluster)&#123;</div><div class="line">        result = ((JedisCluster)<span class="keyword">this</span>.jedis).eval(script, Collections.singletonList(LOCK_PREFIX + key), Collections.singletonList(request));</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//throw new RuntimeException("instance is error") ;</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (UNLOCK_MSG.equals(result))&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用了一个 <code>lua</code> 脚本来判断 value 是否相等，相等才执行 del 命令。</p>
<p>使用 <code>lua</code> 也可以保证这里两个操作的原子性。</p>
<p>因此上文提到的四个基本特性也能满足了：</p>
<ul>
<li>使用 Redis 可以保证性能。</li>
<li>阻塞锁与非阻塞锁见上文。</li>
<li>利用超时机制解决了死锁。</li>
<li>Redis 支持集群部署提高了可用性。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>我自己有撸了一个完整的实现，并且已经用于了生产，有兴趣的朋友可以开箱使用:</p>
<p>maven 依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.crossoverjie.opensource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>distributed-redis-lock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>配置 bean :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisLock <span class="title">build</span><span class="params">()</span></span>&#123;</div><div class="line">        RedisLock redisLock = <span class="keyword">new</span> RedisLock() ;</div><div class="line">        HostAndPort hostAndPort = <span class="keyword">new</span> HostAndPort(<span class="string">"127.0.0.1"</span>,<span class="number">7000</span>) ;</div><div class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(hostAndPort) ;</div><div class="line">        <span class="comment">// Jedis 或 JedisCluster 都可以</span></div><div class="line">        redisLock.setJedisCluster(jedisCluster) ;</div><div class="line">        <span class="keyword">return</span> redisLock ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisLock redisLock ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">    String key = <span class="string">"key"</span>;</div><div class="line">    String request = UUID.randomUUID().toString();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">boolean</span> locktest = redisLock.tryLock(key, request);</div><div class="line">        <span class="keyword">if</span> (!locktest) &#123;</div><div class="line">            System.out.println(<span class="string">"locked error"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//do something</span></div><div class="line"></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        redisLock.unlock(key,request) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用很简单。这里主要是想利用 Spring 来帮我们管理 RedisLock 这个单例的 bean，所以在释放锁的时候需要手动(因为整个上下文只有一个 RedisLock 实例)的传入 key 以及 request(api 看起来不是特别优雅)。</p>
<p>也可以在每次使用锁的时候 new 一个 RedisLock 传入 key 以及 request，这样倒是在解锁时很方便。但是需要自行管理 RedisLock 的实例。各有优劣吧。</p>
<p>项目源码在：</p>
<p><a href="https://github.com/crossoverJie/distributed-lock-redis" target="_blank" rel="external">https://github.com/crossoverJie/distributed-lock-redis</a></p>
<p>欢迎讨论。</p>
<h2 id="单测"><a href="#单测" class="headerlink" title="单测"></a>单测</h2><p>在做这个项目的时候让我不得不想提一下<strong>单测</strong>。</p>
<p>因为这个应用是强依赖于第三方组件的(Redis)，但是在单测中我们需要排除掉这种依赖。比如其他伙伴 fork 了该项目想在本地跑一遍单测，结果运行不起来：</p>
<ol>
<li>有可能是 Redis 的 ip、端口和单测里的不一致。</li>
<li>Redis 自身可能也有问题。</li>
<li>也有可能是该同学的环境中并没有 Redis。</li>
</ol>
<p>所以最好是要把这些外部不稳定的因素排除掉，单测只测我们写好的代码。</p>
<p>于是就可以引入单测利器 <code>Mock</code> 了。</p>
<p>它的想法很简答，就是要把你所依赖的外部资源统统屏蔽掉。如：数据库、外部接口、外部文件等等。</p>
<p>使用方式也挺简单，可以参考该项目的单测：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tryLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    String key = <span class="string">"test"</span>;</div><div class="line">    String request = UUID.randomUUID().toString();</div><div class="line">    Mockito.when(jedisCluster.set(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),</div><div class="line">            Mockito.anyString(), Mockito.anyLong())).thenReturn(<span class="string">"OK"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> locktest = redisLock.tryLock(key, request);</div><div class="line">    System.out.println(<span class="string">"locktest="</span> + locktest);</div><div class="line"></div><div class="line">    Assert.assertTrue(locktest);</div><div class="line"></div><div class="line">    <span class="comment">//check</span></div><div class="line">    Mockito.verify(jedisCluster).set(Mockito.anyString(), Mockito.anyString(), Mockito.anyString(),</div><div class="line">            Mockito.anyString(), Mockito.anyLong());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是简单演示下，可以的话下次仔细分析分析。</p>
<p>它的原理其实也挺简单，debug 的话可以很直接的看出来：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpxho866hbj311u0ej42f.jpg" alt=""></p>
<p>这里我们所依赖的 JedisCluster 其实是一个 <code>cglib 代理对象</code>。所以也不难想到它是如何工作的。</p>
<p>比如这里我们需要用到 JedisCluster 的 set 函数并需要它的返回值。</p>
<p>Mock 就将该对象代理了，并在实际执行 set 方法后给你返回了一个你自定义的值。</p>
<p>这样我们就可以随心所欲的测试了，<strong>完全把外部依赖所屏蔽了</strong>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此一个基于 Redis 的分布式锁完成，但是依然有些问题。</p>
<ul>
<li>如在 key 超时之后业务并没有执行完毕但却自动释放锁了，这样就会导致并发问题。</li>
<li>就算 Redis 是集群部署的，如果每个节点都只是 master 没有 slave，那么 master 宕机时该节点上的所有 key 在那一时刻都相当于是释放锁了，这样也会出现并发问题。就算是有 slave 节点，但如果在数据同步到 salve 之前 master 宕机也是会出现上面的问题。</li>
</ul>
<p>感兴趣的朋友还可以参考 <a href="https://github.com/redisson/redisson" target="_blank" rel="external">Redisson</a> 的实现。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcgy1fpvathnbf6j31kw11xwl3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;分布式锁在分布式应用中应用广泛，想要搞懂一个新事物首先得了解它的由来，这样才能更加的理解甚至可以举一反三。&lt;/p&gt;
&lt;p&gt;首先谈到分布式锁自然也就联想到分布式应用。&lt;/p&gt;
&lt;p&gt;在我们将应用拆分为分布式应用之前的单机系统中，对一些并发场景读取公共资源时如扣库存，卖车票之类的需求可以简单的使用&lt;a href=&quot;http://crossoverjie.top/2018/01/14/Synchronize/&quot;&gt;同步&lt;/a&gt;或者是&lt;a href=&quot;http://crossoverjie.top/2018/01/25/ReentrantLock/&quot;&gt;加锁&lt;/a&gt;就可以实现。&lt;/p&gt;
&lt;p&gt;但是应用分布式了之后系统由以前的单进程多线程的程序变为了多进程多线程，这时使用以上的解决方案明显就不够了。&lt;/p&gt;
&lt;p&gt;因此业界常用的解决方案通常是借助于一个第三方组件并利用它自身的排他性来达到多进程的互斥。如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 DB 的唯一索引。&lt;/li&gt;
&lt;li&gt;基于 ZK 的临时有序节点。&lt;/li&gt;
&lt;li&gt;基于 Redis 的 &lt;code&gt;NX EX&lt;/code&gt; 参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里主要基于 Redis 进行讨论。&lt;/p&gt;
    
    </summary>
    
      <category term="Distributed Tools" scheme="http://crossoverjie.top/categories/Distributed-Tools/"/>
    
    
      <category term="Distributed Lock" scheme="http://crossoverjie.top/tags/Distributed-Lock/"/>
    
  </entry>
  
  <entry>
    <title>Spring Bean 生命周期</title>
    <link href="http://crossoverjie.top/2018/03/21/spring/spring-bean-lifecycle/"/>
    <id>http://crossoverjie.top/2018/03/21/spring/spring-bean-lifecycle/</id>
    <published>2018-03-20T18:10:36.000Z</published>
    <updated>2018-03-21T14:21:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fpjstgeir9j30v90kujyq.jpg" alt=""></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Spring Bean 的生命周期在整个 Spring 中占有很重要的位置，掌握这些可以加深对 Spring 的理解。</p>
<p>首先看下生命周期图：</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fpjsamy6uoj30nt0cqq4i.jpg" alt=""></p>
<p>再谈生命周期之前有一点需要先明确：</p>
<blockquote>
<p>Spring 只帮我们管理单例模式 Bean 的<strong>完整</strong>生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。</p>
</blockquote>
<a id="more"></a>
<h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>在 bean 初始化时会经历几个阶段，首先可以使用注解 <code>@PostConstruct</code>, <code>@PreDestroy</code> 来在 bean 的创建和销毁阶段进行调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationBean</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(AnnotationBean.class);</div><div class="line"></div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"AnnotationBean start"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@PreDestroy</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"AnnotationBean destroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="InitializingBean-DisposableBean-接口"><a href="#InitializingBean-DisposableBean-接口" class="headerlink" title="InitializingBean, DisposableBean 接口"></a>InitializingBean, DisposableBean 接口</h3><p>还可以实现 <code>InitializingBean,DisposableBean</code> 这两个接口，也是在初始化以及销毁阶段调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">DisposableBean</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycleService.class);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycleService start"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycleService destroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义初始化和销毁方法"><a href="#自定义初始化和销毁方法" class="headerlink" title="自定义初始化和销毁方法"></a>自定义初始化和销毁方法</h3><p>也可以自定义方法用于在初始化、销毁阶段调用:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCycleConfig</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"start"</span>, destroyMethod = <span class="string">"destroy"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> SpringLifeCycle <span class="title">create</span><span class="params">()</span></span>&#123;</div><div class="line">        SpringLifeCycle springLifeCycle = <span class="keyword">new</span> SpringLifeCycle() ;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> springLifeCycle ;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycle</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycle.class);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycle start"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycle destroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是在 SpringBoot 中可以这样配置，如果是原始的基于 XML 也是可以使用:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.crossoverjie.spring.SpringLifeCycle"</span> <span class="attr">init-method</span>=<span class="string">"start"</span> <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>来达到同样的效果。</p>
<h3 id="实现-Aware-接口"><a href="#实现-Aware-接口" class="headerlink" title="实现 *Aware 接口"></a>实现 *Aware 接口</h3><p><code>*Aware</code> 接口可以用于在初始化 bean 时获得 Spring 中的一些对象，如获取 <code>Spring 上下文</code>等。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleAware</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycleAware.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ApplicationContext applicationContext ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">this</span>.applicationContext = applicationContext ;</div><div class="line">        LOGGER.info(<span class="string">"SpringLifeCycleAware start"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样在 <code>springLifeCycleAware</code> 这个 bean 初始化会就会调用 <code>setApplicationContext</code> 方法，并可以获得 <code>applicationContext</code> 对象。</p>
<h3 id="BeanPostProcessor-增强处理器"><a href="#BeanPostProcessor-增强处理器" class="headerlink" title="BeanPostProcessor 增强处理器"></a>BeanPostProcessor 增强处理器</h3><p>实现 BeanPostProcessor 接口，Spring 中所有 bean 在做初始化时都会调用该接口中的两个方法，可以用于对一些特殊的 bean 进行处理：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringLifeCycleProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(SpringLifeCycleProcessor.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 预初始化 初始化之前调用</div><div class="line">     * <span class="doctag">@param</span> bean</div><div class="line">     * <span class="doctag">@param</span> beanName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> BeansException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"annotationBean"</span>.equals(beanName))&#123;</div><div class="line">            LOGGER.info(<span class="string">"SpringLifeCycleProcessor start beanName=&#123;&#125;"</span>,beanName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 后初始化  bean 初始化完成调用</div><div class="line">     * <span class="doctag">@param</span> bean</div><div class="line">     * <span class="doctag">@param</span> beanName</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> BeansException</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"annotationBean"</span>.equals(beanName))&#123;</div><div class="line">            LOGGER.info(<span class="string">"SpringLifeCycleProcessor end beanName=&#123;&#125;"</span>,beanName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> bean;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行之后观察结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">018-03-21 00:40:24.856 [restartedMain] INFO  c.c.s.p.SpringLifeCycleProcessor - SpringLifeCycleProcessor start beanName=annotationBean</div><div class="line">2018-03-21 00:40:24.860 [restartedMain] INFO  c.c.spring.annotation.AnnotationBean - AnnotationBean start</div><div class="line">2018-03-21 00:40:24.861 [restartedMain] INFO  c.c.s.p.SpringLifeCycleProcessor - SpringLifeCycleProcessor end beanName=annotationBean</div><div class="line">2018-03-21 00:40:24.864 [restartedMain] INFO  c.c.s.aware.SpringLifeCycleAware - SpringLifeCycleAware start</div><div class="line">2018-03-21 00:40:24.867 [restartedMain] INFO  c.c.s.service.SpringLifeCycleService - SpringLifeCycleService start</div><div class="line">2018-03-21 00:40:24.887 [restartedMain] INFO  c.c.spring.SpringLifeCycle - SpringLifeCycle start</div><div class="line">2018-03-21 00:40:25.062 [restartedMain] INFO  o.s.b.d.a.OptionalLiveReloadServer - LiveReload server is running on port 35729</div><div class="line">2018-03-21 00:40:25.122 [restartedMain] INFO  o.s.j.e.a.AnnotationMBeanExporter - Registering beans for JMX exposure on startup</div><div class="line">2018-03-21 00:40:25.140 [restartedMain] INFO  com.crossoverjie.Application - Started Application in 2.309 seconds (JVM running for 3.681)</div><div class="line">2018-03-21 00:40:25.143 [restartedMain] INFO  com.crossoverjie.Application - start ok!</div><div class="line">2018-03-21 00:40:25.153 [Thread-8] INFO  o.s.c.a.AnnotationConfigApplicationContext - Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@3913adad: startup date [Wed Mar 21 00:40:23 CST 2018]; root of context hierarchy</div><div class="line">2018-03-21 00:40:25.155 [Thread-8] INFO  o.s.j.e.a.AnnotationMBeanExporter - Unregistering JMX-exposed beans on shutdown</div><div class="line">2018-03-21 00:40:25.156 [Thread-8] INFO  c.c.spring.SpringLifeCycle - SpringLifeCycle destroy</div><div class="line">2018-03-21 00:40:25.156 [Thread-8] INFO  c.c.s.service.SpringLifeCycleService - SpringLifeCycleService destroy</div><div class="line">2018-03-21 00:40:25.156 [Thread-8] INFO  c.c.spring.annotation.AnnotationBean - AnnotationBean destroy</div></pre></td></tr></table></figure>
<p>直到 Spring 上下文销毁时则会调用自定义的销毁方法以及实现了 <code>DisposableBean</code> 的 <code>destroy()</code> 方法。</p>
<h3 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h3><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79gy1fpjstgeir9j30v90kujyq.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Spring Bean 的生命周期在整个 Spring 中占有很重要的位置，掌握这些可以加深对 Spring 的理解。&lt;/p&gt;
&lt;p&gt;首先看下生命周期图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fpjsamy6uoj30nt0cqq4i.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;再谈生命周期之前有一点需要先明确：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring 只帮我们管理单例模式 Bean 的&lt;strong&gt;完整&lt;/strong&gt;生命周期，对于 prototype 的 bean ，Spring 在创建好交给使用者之后则不会再管理后续的生命周期。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://crossoverjie.top/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://crossoverjie.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>深入理解线程通信</title>
    <link href="http://crossoverjie.top/2018/03/16/java-senior/thread-communication/"/>
    <id>http://crossoverjie.top/2018/03/16/java-senior/thread-communication/</id>
    <published>2018-03-16T12:10:36.000Z</published>
    <updated>2018-03-18T16:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fpey91u1opj30z00aogo6.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发中不免会遇到需要所有子线程执行完毕通知主线程处理某些逻辑的场景。</p>
<p>或者是线程 A 在执行到某个条件通知线程 B 执行某个操作。</p>
<p>可以通过以下几种方式实现：</p>
<h2 id="等待通知机制"><a href="#等待通知机制" class="headerlink" title="等待通知机制"></a>等待通知机制</h2><blockquote>
<p>等待通知模式是 Java 中比较经典的线程通信方式。</p>
</blockquote>
<p>两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。</p>
<p>如两个线程交替打印奇偶数：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoThreadWaitNotify</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        TwoThreadWaitNotify twoThread = <span class="keyword">new</span> TwoThreadWaitNotify();</div><div class="line"></div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> OuNum(twoThread));</div><div class="line">        t1.setName(<span class="string">"A"</span>);</div><div class="line"></div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> JiNum(twoThread));</div><div class="line">        t2.setName(<span class="string">"B"</span>);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 偶数线程</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OuNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OuNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.number = number;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</div><div class="line">                    System.out.println(<span class="string">"偶数线程抢到锁了"</span>);</div><div class="line">                    <span class="keyword">if</span> (number.flag) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"+-+偶数"</span> + number.start);</div><div class="line">                        number.start++;</div><div class="line"></div><div class="line">                        number.flag = <span class="keyword">false</span>;</div><div class="line">                        TwoThreadWaitNotify.class.notify();</div><div class="line"></div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            TwoThreadWaitNotify.class.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 奇数线程</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JiNum</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> TwoThreadWaitNotify number;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">JiNum</span><span class="params">(TwoThreadWaitNotify number)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.number = number;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (number.start &lt;= <span class="number">100</span>) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (TwoThreadWaitNotify.class) &#123;</div><div class="line">                    System.out.println(<span class="string">"奇数线程抢到锁了"</span>);</div><div class="line">                    <span class="keyword">if</span> (!number.flag) &#123;</div><div class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">"+-+奇数"</span> + number.start);</div><div class="line">                        number.start++;</div><div class="line"></div><div class="line">                        number.flag = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">                        TwoThreadWaitNotify.class.notify();</div><div class="line">                    &#125;<span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            TwoThreadWaitNotify.class.wait();</div><div class="line">                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                            e.printStackTrace();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">t2+-+奇数93</div><div class="line">t1+-+偶数94</div><div class="line">t2+-+奇数95</div><div class="line">t1+-+偶数96</div><div class="line">t2+-+奇数97</div><div class="line">t1+-+偶数98</div><div class="line">t2+-+奇数99</div><div class="line">t1+-+偶数100</div></pre></td></tr></table></figure>
<p>这里的线程 A 和线程 B 都对同一个对象 <code>TwoThreadWaitNotify.class</code> 获取锁，A 线程调用了同步对象的 wait() 方法释放了锁并进入 <code>WAITING</code> 状态。</p>
<p>B 线程调用了 notify() 方法，这样 A 线程收到通知之后就可以从 wait() 方法中返回。</p>
<p>这里利用了 <code>TwoThreadWaitNotify.class</code> 对象完成了通信。</p>
<p>有一些需要注意:</p>
<ul>
<li>wait() 、nofify() 、nofityAll() 调用的前提都是获得了对象的锁(也可称为对象监视器)。</li>
<li>调用 wait() 方法后线程会释放锁，进入 <code>WAITING</code> 状态，该线程也会被移动到<strong>等待队列</strong>中。</li>
<li>调用 notify() 方法会将<strong>等待队列</strong>中的线程移动到<strong>同步队列</strong>中，线程状态也会更新为 <code>BLOCKED</code></li>
<li>从 wait() 方法返回的前提是调用 notify() 方法的线程释放锁，wait() 方法的线程获得锁。</li>
</ul>
<p>等待通知有着一个经典范式：</p>
<p>线程 A 作为消费者：</p>
<ol>
<li>获取对象的锁。</li>
<li>进入 while(判断条件)，并调用 wait() 方法。</li>
<li>当条件满足跳出循环执行具体处理逻辑。</li>
</ol>
<p>线程 B 作为生产者:</p>
<ol>
<li>获取对象锁。</li>
<li>更改与线程 A 共用的判断条件。</li>
<li>调用 notify() 方法。</li>
</ol>
<p>伪代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//Thread A</div><div class="line"></div><div class="line">synchronized(Object)&#123;</div><div class="line">    while(条件)&#123;</div><div class="line">        Object.wait();</div><div class="line">    &#125;</div><div class="line">    //do something</div><div class="line">&#125;</div><div class="line"></div><div class="line">//Thread B</div><div class="line">synchronized(Object)&#123;</div><div class="line">    条件=false;//改变条件</div><div class="line">    Object.notify();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join() 方法"></a>join() 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;) ;</div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running2"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">4000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;) ;</div><div class="line"></div><div class="line">    t1.start();</div><div class="line">    t2.start();</div><div class="line"></div><div class="line">    <span class="comment">//等待线程1终止</span></div><div class="line">    t1.join();</div><div class="line"></div><div class="line">    <span class="comment">//等待线程2终止</span></div><div class="line">    t2.join();</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"main over"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2018-03-16 20:21:30.967 [Thread-1] INFO  c.c.actual.ThreadCommunication - running2</div><div class="line">2018-03-16 20:21:30.967 [Thread-0] INFO  c.c.actual.ThreadCommunication - running</div><div class="line">2018-03-16 20:21:34.972 [main] INFO  c.c.actual.ThreadCommunication - main over</div></pre></td></tr></table></figure>
<p>在  <code>t1.join()</code> 时会一直阻塞到 t1 执行完毕，所以最终主线程会等待 t1 和 t2 线程执行完毕。</p>
<p>其实从源码可以看出，join() 也是利用的等待通知机制：</p>
<p>核心逻辑:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (isAlive()) &#123;</div><div class="line">    wait(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 join 线程完成后会调用 notifyAll() 方法，是在 JVM 实现中调用，所以这里看不出来。</p>
<h2 id="volatile-共享内存"><a href="#volatile-共享内存" class="headerlink" title="volatile 共享内存"></a>volatile 共享内存</h2><p>因为 Java 是采用共享内存的方式进行线程通信的，所以可以采用以下方式用主线程关闭 A 线程:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volatile</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (flag)&#123;</div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"正在运行。。。"</span>);</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Volatile aVolatile = <span class="keyword">new</span> Volatile();</div><div class="line">        <span class="keyword">new</span> Thread(aVolatile,<span class="string">"thread A"</span>).start();</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"main 线程正在运行"</span>) ;</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>) ;</div><div class="line"></div><div class="line">        aVolatile.stopThread();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span></span>&#123;</div><div class="line">        flag = <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">thread A正在运行。。。</div><div class="line">thread A正在运行。。。</div><div class="line">thread A正在运行。。。</div><div class="line">thread A正在运行。。。</div><div class="line">thread A执行完毕</div></pre></td></tr></table></figure></p>
<p>这里的 flag 存放于主内存中，所以主线程和线程 A 都可以看到。</p>
<p>flag 采用 volatile 修饰主要是为了内存可见性，更多内容可以查看<a href="http://crossoverjie.top/2018/03/09/volatile/">这里</a>。</p>
<h2 id="CountDownLatch-并发工具"><a href="#CountDownLatch-并发工具" class="headerlink" title="CountDownLatch 并发工具"></a>CountDownLatch 并发工具</h2><p>CountDownLatch 可以实现 join 相同的功能，但是更加的灵活。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countDownLatch</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    <span class="keyword">int</span> thread = <span class="number">3</span> ;</div><div class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">    <span class="keyword">final</span> CountDownLatch countDown = <span class="keyword">new</span> CountDownLatch(thread);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i= <span class="number">0</span> ;i&lt;thread ; i++)&#123;</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">2000</span>);</div><div class="line">                    countDown.countDown();</div><div class="line"></div><div class="line">                    LOGGER.info(<span class="string">"thread end"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    countDown.await();</div><div class="line">    <span class="keyword">long</span> stop = System.currentTimeMillis();</div><div class="line">    LOGGER.info(<span class="string">"main over total time=&#123;&#125;"</span>,stop-start);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2018-03-16 20:19:44.126 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-16 20:19:44.126 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-16 20:19:44.126 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-16 20:19:46.136 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread end</div><div class="line">2018-03-16 20:19:46.136 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread end</div><div class="line">2018-03-16 20:19:46.136 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread end</div><div class="line">2018-03-16 20:19:46.136 [main] INFO  c.c.actual.ThreadCommunication - main over total time=2012</div></pre></td></tr></table></figure>
<p>CountDownLatch 也是基于 AQS(AbstractQueuedSynchronizer) 实现的，更多实现参考 <a href="http://crossoverjie.top/2018/01/25/ReentrantLock/">ReentrantLock 实现原理</a></p>
<ul>
<li>初始化一个 CountDownLatch 时告诉并发的线程，然后在每个线程处理完毕之后调用 countDown() 方法。</li>
<li>该方法会将 AQS 内置的一个 state 状态 -1 。</li>
<li>最终在主线程调用 await() 方法，它会阻塞直到 <code>state == 0</code> 的时候返回。</li>
</ul>
<h2 id="CyclicBarrier-并发工具"><a href="#CyclicBarrier-并发工具" class="headerlink" title="CyclicBarrier 并发工具"></a>CyclicBarrier 并发工具</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cyclicBarrier</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>) ;</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                cyclicBarrier.await() ;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"thread end do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                cyclicBarrier.await() ;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"thread end do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line"></div><div class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"thread run"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">5000</span>);</div><div class="line">                cyclicBarrier.await() ;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            LOGGER.info(<span class="string">"thread end do something"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line"></div><div class="line">    LOGGER.info(<span class="string">"main thread"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>CyclicBarrier 中文名叫做屏障或者是栅栏，也可以用于线程间通信。</p>
<p>它可以等待 N 个线程都达到某个状态后继续运行的效果。</p>
<ol>
<li>首先初始化线程参与者。</li>
<li>调用 <code>await()</code> 将会在所有参与者线程都调用之前等待。</li>
<li>直到所有参与者都调用了 <code>await()</code> 后，所有线程从 <code>await()</code> 返回继续后续逻辑。</li>
</ol>
<p>运行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2018-03-18 22:40:00.731 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-18 22:40:00.731 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-18 22:40:00.731 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread run</div><div class="line">2018-03-18 22:40:00.731 [main] INFO  c.c.actual.ThreadCommunication - main thread</div><div class="line">2018-03-18 22:40:05.741 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread end do something</div><div class="line">2018-03-18 22:40:05.741 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread end do something</div><div class="line">2018-03-18 22:40:05.741 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread end do something</div></pre></td></tr></table></figure>
<p>可以看出由于其中一个线程休眠了五秒，所有其余所有的线程都得等待这个线程调用 <code>await()</code> 。</p>
<p>该工具可以实现 CountDownLatch 同样的功能，但是要更加灵活。甚至可以调用 <code>reset()</code> 方法重置 CyclicBarrier (需要自行捕获 BrokenBarrierException 处理) 然后重新执行。</p>
<h2 id="线程响应中断"><a href="#线程响应中断" class="headerlink" title="线程响应中断"></a>线程响应中断</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StopThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span> ( !Thread.currentThread().isInterrupted()) &#123;</div><div class="line">            <span class="comment">// 线程执行具体逻辑</span></div><div class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"运行中。。"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">"退出。。"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> StopThread(), <span class="string">"thread A"</span>);</div><div class="line">        thread.start();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"main 线程正在运行"</span>) ;</div><div class="line"></div><div class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">10</span>) ;</div><div class="line">        thread.interrupt();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">thread A运行中。。</div><div class="line">thread A运行中。。</div><div class="line">thread A退出。。</div></pre></td></tr></table></figure>
<p>可以采用中断线程的方式来通信，调用了 <code>thread.interrupt()</code> 方法其实就是将 thread 中的一个标志属性置为了 true。</p>
<p>并不是说调用了该方法就可以中断线程，如果不对这个标志进行响应其实是没有什么作用(这里对这个标志进行了判断)。</p>
<p><strong>但是如果抛出了 InterruptedException 异常，该标志就会被 JVM 重置为 false。</strong></p>
<h2 id="线程池-awaitTermination-方法"><a href="#线程池-awaitTermination-方法" class="headerlink" title="线程池 awaitTermination() 方法"></a>线程池 awaitTermination() 方法</h2><p>如果是用线程池来管理线程，可以使用以下方式来让主线程等待线程池中所有任务执行完毕:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">executorService</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    BlockingQueue&lt;Runnable&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>) ;</div><div class="line">    ThreadPoolExecutor poolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>, TimeUnit.MILLISECONDS,queue) ;</div><div class="line">    poolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">3000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    poolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running2"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">2000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    poolExecutor.shutdown();</div><div class="line">    <span class="keyword">while</span> (!poolExecutor.awaitTermination(<span class="number">1</span>,TimeUnit.SECONDS))&#123;</div><div class="line">        LOGGER.info(<span class="string">"线程还在执行。。。"</span>);</div><div class="line">    &#125;</div><div class="line">    LOGGER.info(<span class="string">"main over"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">2018-03-16 20:18:01.273 [pool-1-thread-2] INFO  c.c.actual.ThreadCommunication - running2</div><div class="line">2018-03-16 20:18:01.273 [pool-1-thread-1] INFO  c.c.actual.ThreadCommunication - running</div><div class="line">2018-03-16 20:18:02.273 [main] INFO  c.c.actual.ThreadCommunication - 线程还在执行。。。</div><div class="line">2018-03-16 20:18:03.278 [main] INFO  c.c.actual.ThreadCommunication - 线程还在执行。。。</div><div class="line">2018-03-16 20:18:04.278 [main] INFO  c.c.actual.ThreadCommunication - main over</div></pre></td></tr></table></figure>
<p>使用这个 <code>awaitTermination()</code> 方法的前提需要关闭线程池，如调用了 <code>shutdown()</code> 方法。</p>
<p>调用了 <code>shutdown()</code> 之后线程池会停止接受新任务，并且会平滑的关闭线程池中现有的任务。</p>
<h2 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">piped</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="comment">//面向于字符 PipedInputStream 面向于字节</span></div><div class="line">    PipedWriter writer = <span class="keyword">new</span> PipedWriter();</div><div class="line">    PipedReader reader = <span class="keyword">new</span> PipedReader();</div><div class="line"></div><div class="line">    <span class="comment">//输入输出流建立连接</span></div><div class="line">    writer.connect(reader);</div><div class="line"></div><div class="line"></div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running"</span>);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line"></div><div class="line">                    writer.write(i+<span class="string">""</span>);</div><div class="line">                    Thread.sleep(<span class="number">10</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    writer.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            LOGGER.info(<span class="string">"running2"</span>);</div><div class="line">            <span class="keyword">int</span> msg = <span class="number">0</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> ((msg = reader.read()) != -<span class="number">1</span>) &#123;</div><div class="line">                    LOGGER.info(<span class="string">"msg=&#123;&#125;"</span>, (<span class="keyword">char</span>) msg);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    t1.start();</div><div class="line">    t2.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">2018-03-16 19:56:43.014 [Thread-0] INFO  c.c.actual.ThreadCommunication - running</div><div class="line">2018-03-16 19:56:43.014 [Thread-1] INFO  c.c.actual.ThreadCommunication - running2</div><div class="line">2018-03-16 19:56:43.130 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=0</div><div class="line">2018-03-16 19:56:43.132 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=1</div><div class="line">2018-03-16 19:56:43.132 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=2</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=3</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=4</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=5</div><div class="line">2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=6</div><div class="line">2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=7</div><div class="line">2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=8</div><div class="line">2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=9</div></pre></td></tr></table></figure>
<p>Java 虽说是基于内存通信的，但也可以使用管道通信。</p>
<p>需要注意的是，输入流和输出流需要首先建立连接。这样线程 B 就可以收到线程 A 发出的消息了。</p>
<p>实际开发中可以灵活根据需求选择最适合的线程通信方式。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fpey91u1opj30z00aogo6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发中不免会遇到需要所有子线程执行完毕通知主线程处理某些逻辑的场景。&lt;/p&gt;
&lt;p&gt;或者是线程 A 在执行到某个条件通知线程 B 执行某个操作。&lt;/p&gt;
&lt;p&gt;可以通过以下几种方式实现：&lt;/p&gt;
&lt;h2 id=&quot;等待通知机制&quot;&gt;&lt;a href=&quot;#等待通知机制&quot; class=&quot;headerlink&quot; title=&quot;等待通知机制&quot;&gt;&lt;/a&gt;等待通知机制&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;等待通知模式是 Java 中比较经典的线程通信方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。&lt;/p&gt;
&lt;p&gt;如两个线程交替打印奇偶数：&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="Thread" scheme="http://crossoverjie.top/tags/Thread/"/>
    
      <category term="concurrent" scheme="http://crossoverjie.top/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>你应该知道的 volatile 关键字</title>
    <link href="http://crossoverjie.top/2018/03/09/volatile/"/>
    <id>http://crossoverjie.top/2018/03/09/volatile/</id>
    <published>2018-03-08T18:00:36.000Z</published>
    <updated>2018-07-24T07:58:55.228Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fp5xm7uykoj30v90kugng.jpg" alt=""></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不管是在面试还是实际开发中 <code>volatile</code> 都是一个应该掌握的技能。</p>
<p>首先来看看为什么会出现这个关键字。</p>
<h2 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h2><p>由于 <code>Java</code> 内存模型(<code>JMM</code>)规定，所有的变量都存放在主内存中，而每个线程都有着自己的工作内存(高速缓存)。</p>
<p>线程在工作时，需要将主内存中的数据拷贝到工作内存中。这样对数据的任何操作都是基于工作内存(效率提高)，并且不能直接操作主内存以及其他线程工作内存中的数据，之后再将更新之后的数据刷新到主内存中。</p>
<blockquote>
<p>这里所提到的主内存可以简单认为是<strong>堆内存</strong>，而工作内存则可以认为是<strong>栈内存</strong>。</p>
</blockquote>
<p>如下图所示：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fmouu3fpokj31ae0osjt1.jpg" alt=""></p>
<p>所以在并发运行时可能会出现线程 B 所读取到的数据是线程 A 更新之前的数据。</p>
<p>显然这肯定是会出问题的，因此 <code>volatile</code> 的作用出现了：</p>
<blockquote>
<p>当一个变量被 <code>volatile</code> 修饰时，任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了该变量的线程中的数据清空，必须从主内存重新读取最新数据。</p>
</blockquote>
<a id="more"></a>
<p><em><code>volatile</code> 修饰之后并不是让线程直接从主内存中获取数据，依然需要将变量拷贝到工作内存中</em>。</p>
<h3 id="内存可见性的应用"><a href="#内存可见性的应用" class="headerlink" title="内存可见性的应用"></a>内存可见性的应用</h3><p>当我们需要在两个线程间依据主内存通信时，通信的那个变量就必须的用 <code>volatile</code> 来修饰：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Volatile</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span> ;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (flag)&#123;</div><div class="line">        &#125;</div><div class="line">        System.out.println(Thread.currentThread().getName() +<span class="string">"执行完毕"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Volatile aVolatile = <span class="keyword">new</span> Volatile();</div><div class="line">        <span class="keyword">new</span> Thread(aVolatile,<span class="string">"thread A"</span>).start();</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"main 线程正在运行"</span>) ;</div><div class="line"></div><div class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">while</span>(sc.hasNext())&#123;</div><div class="line">            String value = sc.next();</div><div class="line">            <span class="keyword">if</span>(value.equals(<span class="string">"1"</span>))&#123;</div><div class="line"></div><div class="line">                <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        aVolatile.stopThread();</div><div class="line">                    &#125;</div><div class="line">                &#125;).start();</div><div class="line"></div><div class="line">                <span class="keyword">break</span> ;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"主线程退出了！"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span></span>&#123;</div><div class="line">        flag = <span class="keyword">false</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主线程在修改了标志位使得线程 A 立即停止，如果没有用 <code>volatile</code> 修饰，就有可能出现延迟。</p>
<p>但这里有个误区，这样的使用方式容易给人的感觉是：</p>
<blockquote>
<p>对 <code>volatile</code> 修饰的变量进行并发操作是线程安全的。</p>
</blockquote>
<p>这里要重点强调，<code>volatile</code> 并<strong>不能</strong>保证线程安全性！</p>
<p>如下程序:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileInc</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span> ; <span class="comment">//使用 volatile 修饰基本数据内存不能保证原子性</span></div><div class="line"></div><div class="line">    <span class="comment">//private static AtomicInteger count = new AtomicInteger() ;</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span> ;i++)&#123;</div><div class="line">            count ++ ;</div><div class="line">            <span class="comment">//count.incrementAndGet() ;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        VolatileInc volatileInc = <span class="keyword">new</span> VolatileInc() ;</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(volatileInc,<span class="string">"t1"</span>) ;</div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(volatileInc,<span class="string">"t2"</span>) ;</div><div class="line">        t1.start();</div><div class="line">        <span class="comment">//t1.join();</span></div><div class="line"></div><div class="line">        t2.start();</div><div class="line">        <span class="comment">//t2.join();</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span> ;i++)&#123;</div><div class="line">            count ++ ;</div><div class="line">            <span class="comment">//count.incrementAndGet();</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        System.out.println(<span class="string">"最终Count="</span>+count);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们三个线程(t1,t2,main)同时对一个 <code>int</code> 进行累加时会发现最终的值都会小于 30000。</p>
<blockquote>
<p>这是因为虽然 <code>volatile</code> 保证了内存可见性，每个线程拿到的值都是最新值，但 <code>count ++</code> 这个操作并不是原子的，这里面涉及到获取值、自增、赋值的操作并不能同时完成。</p>
</blockquote>
<ul>
<li><p>所以想到达到线程安全可以使这三个线程串行执行(其实就是单线程，没有发挥多线程的优势)。</p>
</li>
<li><p>也可以使用 <code>synchronize</code> 或者是锁的方式来保证原子性。</p>
</li>
<li><p>还可以用 <code>Atomic</code> 包中 <code>AtomicInteger</code> 来替换 <code>int</code>，它利用了 <code>CAS</code> 算法来保证了原子性。</p>
</li>
</ul>
<h2 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h2><p>内存可见性只是 <code>volatile</code> 的其中一个语义，它还可以防止 <code>JVM</code> 进行指令重排优化。</p>
<p>举一个伪代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a=<span class="number">10</span> ;<span class="comment">//1</span></div><div class="line"><span class="keyword">int</span> b=<span class="number">20</span> ;<span class="comment">//2</span></div><div class="line"><span class="keyword">int</span> c= a+b ;<span class="comment">//3</span></div></pre></td></tr></table></figure>
<p>一段特别简单的代码，理想情况下它的执行顺序是：<code>1&gt;2&gt;3</code>。但有可能经过 JVM 优化之后的执行顺序变为了 <code>2&gt;1&gt;3</code>。</p>
<p>可以发现不管 JVM 怎么优化，前提都是保证单线程中最终结果不变的情况下进行的。</p>
<p>可能这里还看不出有什么问题，那看下一段伪代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; value ;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = fasle ;</div><div class="line"></div><div class="line"><span class="comment">//以下方法发生在线程 A 中 初始化 Map</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">//耗时操作</span></div><div class="line">	value = getMapValue() ;<span class="comment">//1</span></div><div class="line">	flag = <span class="keyword">true</span> ;<span class="comment">//2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//发生在线程 B中 等到 Map 初始化成功进行其他操作</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span>(!flag)&#123;</div><div class="line">		sleep() ;</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//dosomething</span></div><div class="line">	doSomeThing(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里就能看出问题了，当 <code>flag</code> 没有被 <code>volatile</code> 修饰时，<code>JVM</code> 对 1 和 2 进行重排，导致 <code>value</code> 都还没有被初始化就有可能被线程 B 使用了。</p>
<p>所以加上 <code>volatile</code> 之后可以防止这样的重排优化，保证业务的正确性。</p>
<h3 id="指令重排的的应用"><a href="#指令重排的的应用" class="headerlink" title="指令重排的的应用"></a>指令重排的的应用</h3><p>一个经典的使用场景就是双重懒加载的单例模式了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton singleton;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="comment">//防止指令重排</span></div><div class="line">                    singleton = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 <code>volatile</code> 关键字主要是为了防止指令重排。 </p>
<p>如果不用 ，<code>singleton = new Singleton();</code>，这段代码其实是分为三步：</p>
<ul>
<li>分配内存空间。(1)</li>
<li>初始化对象。(2)</li>
<li>将 <code>singleton</code> 对象指向分配的内存地址。(3)</li>
</ul>
<p>加上 <code>volatile</code> 是为了让以上的三步操作顺序执行，反之有可能第二步在第三步之前被执行就有可能某个线程拿到的单例对象是还没有初始化的，以致于报错。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>volatile</code> 在 <code>Java</code> 并发中用的很多，比如像 <code>Atomic</code> 包中的 <code>value</code>、以及 <code>AbstractQueuedLongSynchronizer</code> 中的 <code>state</code> 都是被定义为 <code>volatile</code> 来用于保证内存可见性。</p>
<p>将这块理解透彻对我们编写并发程序时可以提供很大帮助。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79gy1fp5xm7uykoj30v90kugng.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不管是在面试还是实际开发中 &lt;code&gt;volatile&lt;/code&gt; 都是一个应该掌握的技能。&lt;/p&gt;
&lt;p&gt;首先来看看为什么会出现这个关键字。&lt;/p&gt;
&lt;h2 id=&quot;内存可见性&quot;&gt;&lt;a href=&quot;#内存可见性&quot; class=&quot;headerlink&quot; title=&quot;内存可见性&quot;&gt;&lt;/a&gt;内存可见性&lt;/h2&gt;&lt;p&gt;由于 &lt;code&gt;Java&lt;/code&gt; 内存模型(&lt;code&gt;JMM&lt;/code&gt;)规定，所有的变量都存放在主内存中，而每个线程都有着自己的工作内存(高速缓存)。&lt;/p&gt;
&lt;p&gt;线程在工作时，需要将主内存中的数据拷贝到工作内存中。这样对数据的任何操作都是基于工作内存(效率提高)，并且不能直接操作主内存以及其他线程工作内存中的数据，之后再将更新之后的数据刷新到主内存中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里所提到的主内存可以简单认为是&lt;strong&gt;堆内存&lt;/strong&gt;，而工作内存则可以认为是&lt;strong&gt;栈内存&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fmouu3fpokj31ae0osjt1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以在并发运行时可能会出现线程 B 所读取到的数据是线程 A 更新之前的数据。&lt;/p&gt;
&lt;p&gt;显然这肯定是会出问题的，因此 &lt;code&gt;volatile&lt;/code&gt; 的作用出现了：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当一个变量被 &lt;code&gt;volatile&lt;/code&gt; 修饰时，任何线程对它的写操作都会立即刷新到主内存中，并且会强制让缓存了该变量的线程中的数据清空，必须从主内存重新读取最新数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="volatile" scheme="http://crossoverjie.top/tags/volatile/"/>
    
      <category term="concurrent" scheme="http://crossoverjie.top/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap 底层分析</title>
    <link href="http://crossoverjie.top/2018/02/06/LinkedHashMap/"/>
    <id>http://crossoverjie.top/2018/02/06/LinkedHashMap/</id>
    <published>2018-02-06T15:01:36.000Z</published>
    <updated>2018-03-19T05:04:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1fo6w785brkj31g80ytjx5.jpg" alt=""></p>
<p>众所周知 <a href="https://github.com/crossoverJie/Java-Interview/blob/master/MD/HashMap.md" target="_blank" rel="external">HashMap</a> 是一个无序的 <code>Map</code>，因为每次根据 <code>key</code> 的 <code>hashcode</code> 映射到 <code>Entry</code> 数组上，所以遍历出来的顺序并不是写入的顺序。</p>
<p>因此 JDK 推出一个基于 <code>HashMap</code> 但具有顺序的 <code>LinkedHashMap</code> 来解决有排序需求的场景。</p>
<p>它的底层是继承于 <code>HashMap</code> 实现的，由一个双向链表所构成。</p>
<p><code>LinkedHashMap</code> 的排序方式有两种：</p>
<ul>
<li>根据写入顺序排序。</li>
<li>根据访问顺序排序。</li>
</ul>
<p>其中根据访问顺序排序时，每次 <code>get</code> 都会将访问的值移动到链表末尾，这样重复操作就能的到一个按照访问顺序排序的链表。</p>
<a id="more"></a>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">	Map&lt;String, Integer&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;String, Integer&gt;();</div><div class="line">	map.put(<span class="string">"1"</span>,<span class="number">1</span>) ;</div><div class="line">	map.put(<span class="string">"2"</span>,<span class="number">2</span>) ;</div><div class="line">	map.put(<span class="string">"3"</span>,<span class="number">3</span>) ;</div><div class="line">	map.put(<span class="string">"4"</span>,<span class="number">4</span>) ;</div><div class="line">	map.put(<span class="string">"5"</span>,<span class="number">5</span>) ;</div><div class="line">	System.out.println(map.toString());</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调试可以看到 <code>map</code> 的组成：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1fo6l9xp91lj319m0s4tgi.jpg" alt=""></p>
<p>打开源码可以看到：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * The head of the doubly linked list.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</div><div class="line"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@serial</span></div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></div><div class="line">    Entry&lt;K,V&gt; before, after;</div><div class="line"></div><div class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</div><div class="line">        <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 <code>Entry</code> 继承于 <code>HashMap</code> 的 <code>Entry</code>，并新增了上下节点的指针，也就形成了双向链表。</p>
<p>还有一个 <code>header</code> 的成员变量，是这个双向链表的头结点。 </p>
<p>上边的 demo 总结成一张图如下：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1fodggwc523j30za0n4wgj.jpg" alt=""></p>
<p>第一个类似于 <code>HashMap</code> 的结构，利用 <code>Entry</code> 中的 <code>next</code> 指针进行关联。</p>
<p>下边则是 <code>LinkedHashMap</code> 如何达到有序的关键。</p>
<p>就是利用了头节点和其余的各个节点之间通过 <code>Entry</code> 中的 <code>after</code> 和 <code>before</code> 指针进行关联。</p>
<p>其中还有一个 <code>accessOrder</code> 成员变量，默认是 <code>false</code>，默认按照插入顺序排序，为 <code>true</code> 时按照访问顺序排序，也可以调用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public LinkedHashMap(int initialCapacity,</div><div class="line">                     float loadFactor,</div><div class="line">                     boolean accessOrder) &#123;</div><div class="line">    super(initialCapacity, loadFactor);</div><div class="line">    this.accessOrder = accessOrder;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个构造方法可以显示的传入 <code>accessOrder</code>。</p>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p><code>LinkedHashMap</code> 的构造方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    accessOrder = <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实就是调用的 <code>HashMap</code> 的构造方法:</p>
<p><code>HashMap</code> 实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                           initialCapacity);</div><div class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">        initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                           loadFactor);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</div><div class="line">    threshold = initialCapacity;</div><div class="line">    <span class="comment">//HashMap 只是定义了改方法，具体实现交给了 LinkedHashMap</span></div><div class="line">    init();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到里面有一个空的 <code>init()</code>，具体是由 <code>LinkedHashMap</code> 来实现的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    header = <span class="keyword">new</span> Entry&lt;&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">    header.before = header.after = header;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实也就是对 <code>header</code> 进行了初始化。</p>
<h2 id="put-方法"><a href="#put-方法" class="headerlink" title="put 方法"></a>put 方法</h2><p>看 <code>LinkedHashMap</code> 的 <code>put()</code> 方法之前先看看 <code>HashMap</code> 的 <code>put</code> 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public V put(K key, V value) &#123;</div><div class="line">    if (table == EMPTY_TABLE) &#123;</div><div class="line">        inflateTable(threshold);</div><div class="line">    &#125;</div><div class="line">    if (key == null)</div><div class="line">        return putForNullKey(value);</div><div class="line">    int hash = hash(key);</div><div class="line">    int i = indexFor(hash, table.length);</div><div class="line">    for (Entry&lt;K,V&gt; e = table[i]; e != null; e = e.next) &#123;</div><div class="line">        Object k;</div><div class="line">        if (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</div><div class="line">            V oldValue = e.value;</div><div class="line">            e.value = value;</div><div class="line">            //空实现，交给 LinkedHashMap 自己实现</div><div class="line">            e.recordAccess(this);</div><div class="line">            return oldValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    modCount++;</div><div class="line">    // LinkedHashMap 对其重写</div><div class="line">    addEntry(hash, key, value, i);</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// LinkedHashMap 对其重写</div><div class="line">void addEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class="line">    if ((size &gt;= threshold) &amp;&amp; (null != table[bucketIndex])) &#123;</div><div class="line">        resize(2 * table.length);</div><div class="line">        hash = (null != key) ? hash(key) : 0;</div><div class="line">        bucketIndex = indexFor(hash, table.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createEntry(hash, key, value, bucketIndex);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// LinkedHashMap 对其重写</div><div class="line">void createEntry(int hash, K key, V value, int bucketIndex) &#123;</div><div class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</div><div class="line">    table[bucketIndex] = new Entry&lt;&gt;(hash, key, value, e);</div><div class="line">    size++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主体的实现都是借助于 <code>HashMap</code> 来完成的，只是对其中的 <code>recordAccess(), addEntry(), createEntry()</code> 进行了重写。</p>
<p><code>LinkedHashMap</code> 的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">//就是判断是否是根据访问顺序排序，如果是则需要将当前这个 Entry 移动到链表的末尾</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">        LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</div><div class="line">        <span class="keyword">if</span> (lm.accessOrder) &#123;</div><div class="line">            lm.modCount++;</div><div class="line">            remove();</div><div class="line">            addBefore(lm.header);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line"><span class="comment">//调用了 HashMap 的实现，并判断是否需要删除最少使用的 Entry(默认不删除)    </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.addEntry(hash, key, value, bucketIndex);</div><div class="line"></div><div class="line">    <span class="comment">// Remove eldest entry if instructed</span></div><div class="line">    Entry&lt;K,V&gt; eldest = header.after;</div><div class="line">    <span class="keyword">if</span> (removeEldestEntry(eldest)) &#123;</div><div class="line">        removeEntryForKey(eldest.key);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</div><div class="line">    HashMap.Entry&lt;K,V&gt; old = table[bucketIndex];</div><div class="line">    Entry&lt;K,V&gt; e = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, old);</div><div class="line">    <span class="comment">//就多了这一步，将新增的 Entry 加入到 header 双向链表中</span></div><div class="line">    table[bucketIndex] = e;</div><div class="line">    e.addBefore(header);</div><div class="line">    size++;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">//写入到双向链表中</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;</div><div class="line">        after  = existingEntry;</div><div class="line">        before = existingEntry.before;</div><div class="line">        before.after = <span class="keyword">this</span>;</div><div class="line">        after.before = <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="get-方法"><a href="#get-方法" class="headerlink" title="get 方法"></a>get 方法</h2><p>LinkedHashMap 的 <code>get()</code> 方法也重写了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)getEntry(key);</div><div class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        </div><div class="line">    <span class="comment">//多了一个判断是否是按照访问顺序排序，是则将当前的 Entry 移动到链表头部。</span></div><div class="line">    e.recordAccess(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> e.value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</div><div class="line">    LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</div><div class="line">    <span class="keyword">if</span> (lm.accessOrder) &#123;</div><div class="line">        lm.modCount++;</div><div class="line">        </div><div class="line">        <span class="comment">//删除</span></div><div class="line">        remove();</div><div class="line">        <span class="comment">//添加到头部</span></div><div class="line">        addBefore(lm.header);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>clear()</code> 清空就要比较简单了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只需要把指针都指向自己即可，原本那些 Entry 没有引用之后就会被 JVM 自动回收。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.clear();</div><div class="line">    header.before = header.after = header;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说 <code>LinkedHashMap</code> 其实就是对 <code>HashMap</code> 进行了拓展，使用了双向链表来保证了顺序性。</p>
<p>因为是继承与 <code>HashMap</code> 的，所以一些 <code>HashMap</code> 存在的问题 <code>LinkedHashMap</code> 也会存在，比如不支持并发等。</p>
<h2 id="号外"><a href="#号外" class="headerlink" title="号外"></a>号外</h2><p>最近在总结一些 Java 相关的知识点，感兴趣的朋友可以一起维护。</p>
<blockquote>
<p>地址: <a href="https://github.com/crossoverJie/Java-Interview" target="_blank" rel="external">https://github.com/crossoverJie/Java-Interview</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNc79ly1fo6w785brkj31g80ytjx5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;众所周知 &lt;a href=&quot;https://github.com/crossoverJie/Java-Interview/blob/master/MD/HashMap.md&quot;&gt;HashMap&lt;/a&gt; 是一个无序的 &lt;code&gt;Map&lt;/code&gt;，因为每次根据 &lt;code&gt;key&lt;/code&gt; 的 &lt;code&gt;hashcode&lt;/code&gt; 映射到 &lt;code&gt;Entry&lt;/code&gt; 数组上，所以遍历出来的顺序并不是写入的顺序。&lt;/p&gt;
&lt;p&gt;因此 JDK 推出一个基于 &lt;code&gt;HashMap&lt;/code&gt; 但具有顺序的 &lt;code&gt;LinkedHashMap&lt;/code&gt; 来解决有排序需求的场景。&lt;/p&gt;
&lt;p&gt;它的底层是继承于 &lt;code&gt;HashMap&lt;/code&gt; 实现的，由一个双向链表所构成。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LinkedHashMap&lt;/code&gt; 的排序方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据写入顺序排序。&lt;/li&gt;
&lt;li&gt;根据访问顺序排序。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中根据访问顺序排序时，每次 &lt;code&gt;get&lt;/code&gt; 都会将访问的值移动到链表末尾，这样重复操作就能的到一个按照访问顺序排序的链表。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 进阶" scheme="http://crossoverjie.top/categories/Java-%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Java" scheme="http://crossoverjie.top/tags/Java/"/>
    
      <category term="LinkedHashMap" scheme="http://crossoverjie.top/tags/LinkedHashMap/"/>
    
  </entry>
  
</feed>
